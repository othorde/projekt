{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  const [message, setMessage] = useState(\"\");\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n  */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.forEach(elem => {\n      setCharging_posts([elem]);\n    });\n  }\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor !== \"noValue\") {\n      updateScooter();\n      updateScootersUser();\n      updateScooterLogg();\n      updateZon();\n    }\n  };\n\n  async function updateScooter() {\n    var position = props.position;\n    var newPosition;\n    var speed = \"0\";\n    var battery = \"100\";\n    var response;\n    charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n    newPosition = calculateScooterNewPosition();\n\n    if (position !== null) {\n      response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n    }\n  }\n\n  async function updateScootersUser() {\n    await Api.updateAScootersUser(props.id); //uppdaterar scooterns användare\n  }\n\n  async function updateScooterLogg() {\n    var active_user = \"null\";\n    var event = getEventString();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var newPosition = calculateScooterNewPosition();\n    const varForUpdate = {\n      id: props.id,\n      active_user: active_user,\n      event: event,\n      start_lat: props.position.lat,\n      start_lng: props.position.lng,\n      time: time,\n      end_lat: newPosition.lat,\n      end_lng: newPosition.lng\n    };\n    var response = await Api.updateAScootersLogg(varForUpdate);\n\n    if (response && response.data.result === true) {\n      console.log(\"HÄÄÄÄÄÄÄR\");\n      setMessage(\"Cykel förflyttad, logg uppdaterad\");\n    } else {\n      setMessage(\"Något gick fel\");\n    }\n  }\n  /* UPPDATERA ZONER */\n\n  /* Tid för eventet (loggen) */\n\n\n  function getTime() {\n    var today = new Date();\n    var date = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    var dateTime = date + ' ' + time;\n    return {\n      time,\n      dateTime\n    };\n  }\n  /* String för event (loggen) */\n\n\n  function getEventString() {\n    var newPosition = calculateScooterNewPosition();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var movedBy = myContext.userHook.value.user;\n    var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n    return event;\n  }\n  /* Räknar ut ny position inom den zon som scootern ska flyttas till\n      Kontrollera denna uträkningen */\n\n\n  function calculateScooterNewPosition() {\n    var newPosition;\n    var position = props.position;\n    charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n    let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n    let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n    newPosition = {\n      lat: lat,\n      lng: lng\n    };\n    return newPosition;\n  }\n\n  async function updateZon() {}\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 5000);\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"ssXEX09XlTxuSz3Dcw8Xe68iG88=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","message","setMessage","getLoadStationsForMovingBike","city","getACity","forEach","elem","handleSubmit","updateScooter","updateScootersUser","updateScooterLogg","updateZon","position","newPosition","speed","battery","response","filter","color","includes","calculateScooterNewPosition","updateAScooter","id","updateAScootersUser","active_user","event","getEventString","time","dateTime","getTime","varForUpdate","start_lat","lat","start_lng","lng","end_lat","end_lng","updateAScootersLogg","data","result","console","log","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","movedBy","userHook","value","user","polygonePart1","Math","random","polygonePart4","setTimeout","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n    const [message, setMessage] = useState(\"\")\n\n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n    */\n\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.forEach(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    const handleSubmit = async () => {\n\n        if (moveBikeToColor !== \"noValue\") {\n            updateScooter();\n            updateScootersUser();\n            updateScooterLogg();\n            updateZon();\n\n        }\n    }\n\n    async function updateScooter() {\n\n        var position = props.position;\n        var newPosition;\n        var speed = \"0\";\n        var battery = \"100\";\n        var response;\n        charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n        newPosition = calculateScooterNewPosition()\n        if (position !== null) {\n            response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n       }\n    }\n\n    async function updateScootersUser() {\n        await Api.updateAScootersUser(props.id);  //uppdaterar scooterns användare\n    }\n\n    async function updateScooterLogg() {\n\n        var active_user = \"null\";\n        var event = getEventString();\n        var {time, dateTime} = getTime();\n        var newPosition = calculateScooterNewPosition();\n\n        const varForUpdate = {\n            id: props.id,\n            active_user: active_user,\n            event: event,\n            start_lat: props.position.lat,\n            start_lng: props.position.lng,\n            time: time,\n            end_lat: newPosition.lat,\n            end_lng: newPosition.lng,\n        }\n        var response = await Api.updateAScootersLogg(varForUpdate);\n        if(response && response.data.result === true) {\n            console.log(\"HÄÄÄÄÄÄÄR\")\n            setMessage(\"Cykel förflyttad, logg uppdaterad\")\n        } else {\n            setMessage(\"Något gick fel\")\n        }  \n    }\n\n    /* UPPDATERA ZONER */\n\n    /* Tid för eventet (loggen) */\n    function getTime() {\n        var today = new Date();\n        var date = today.getFullYear()+'-'+(today.getMonth())+'-'+today.getDate();\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        var dateTime = date+' '+time;\n        return {time, dateTime}\n    }\n\n    /* String för event (loggen) */\n    function getEventString() {\n\n        var newPosition = calculateScooterNewPosition();\n        var {time, dateTime} = getTime();\n        var movedBy = myContext.userHook.value.user;\n        var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n        return event\n    }\n\n    /* Räknar ut ny position inom den zon som scootern ska flyttas till\n        Kontrollera denna uträkningen */\n    function calculateScooterNewPosition() {\n        var newPosition;\n        var position = props.position;\n        charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n        let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n        let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n        newPosition = {lat: lat, lng: lng}\n        return newPosition\n    }\n\n\n    \n    async function updateZon() {\n        \n        \n        \n    }\n\n\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 5000);\n    }, [message])\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {message && <p style={{color:\"red\"}}> {message} </p>} {/* meddelande om det går bra/dåligt med uppdatering */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}\n            value = {moveBikeToColor}\n            >\n            <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}