{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nasync function useLoadStationsForMap() {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [loadStationObject, setLoadStationObject] = useState([]);\n  const [loadStationContent, setLoadStationContent] = useState(\"\");\n  const [loadStationError, setLoadStationError] = useState(\"\");\n  let res;\n  useEffect(async () => {}, [mapRef]);\n\n  if (!res || res.length === 0) {\n    try {\n      let res = await Api.getAllCitys();\n\n      if (res !== null && mapRef.current.map !== undefined) {\n        var loadStationName;\n        const map = mapRef.current.map;\n        const maps = mapRef.current.maps;\n        res.map(cityCoords => {\n          cityCoords.charging_posts.map(loadStations => {\n            let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n            loadStationName = new maps.Polygon({\n              paths: polyGon,\n              strokeColor: \"yellow\",\n              strokeOpacity: 0.9,\n              strokeWeight: 2,\n              fillColor: \"transparent\",\n              fillOpacity: 0.35\n            });\n            loadStationName.addListener('click', event => {//setLoadStationContent({loadStations});\n            });\n            loadStationName.setMap(map);\n            setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n          });\n        });\n      }\n    } catch (error) {//setLoadStationError({error})\n    }\n  }\n\n  console.log(loadStationObject);\n  return loadStationObject;\n}\n\n_s(useLoadStationsForMap, \"Z2StwFpu8xRziRcoJD4AnOGzhO4=\");\n\n;\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","res","length","getAllCitys","current","map","undefined","loadStationName","maps","cityCoords","charging_posts","loadStations","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","setMap","oldArray","error","console","log"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,eAAeC,qBAAf,GAAiD;AAAA;;AAAA,MAAZC,MAAY,uEAAL,EAAK;AAChD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,EAAD,CAAxD;AAEG,MAAIW,GAAJ;AACAV,EAAAA,SAAS,CAAC,YAAa,CACtB,CADQ,EACN,CAACG,MAAD,CADM,CAAT;;AAGA,MAAG,CAACO,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA1B,EAA4B;AACxB,QAAI;AACA,UAAID,GAAG,GAAG,MAAMT,GAAG,CAACW,WAAJ,EAAhB;;AAEA,UAAIF,GAAG,KAAK,IAAR,IAAgBP,MAAM,CAACU,OAAP,CAAeC,GAAf,KAAuBC,SAA3C,EAAsD;AAClD,YAAIC,eAAJ;AACA,cAAMF,GAAG,GAAGX,MAAM,CAACU,OAAP,CAAeC,GAA3B;AACA,cAAMG,IAAI,GAAGd,MAAM,CAACU,OAAP,CAAeI,IAA5B;AAEAP,QAAAA,GAAG,CAACI,GAAJ,CAAQI,UAAU,IAAI;AAClBA,UAAAA,UAAU,CAACC,cAAX,CAA0BL,GAA1B,CAA8BM,YAAY,IAAI;AAC1C,gBAAIC,OAAO,GACN,CAACH,UAAU,CAACI,QAAX,CAAoBC,aAArB,EACGL,UAAU,CAACI,QAAX,CAAoBE,aADvB,EAEGN,UAAU,CAACI,QAAX,CAAoBG,aAFvB,EAGGP,UAAU,CAACI,QAAX,CAAoBI,aAHvB,CADL;AAMAV,YAAAA,eAAe,GAAG,IAAIC,IAAI,CAACU,OAAT,CAAiB;AAC/BC,cAAAA,KAAK,EAAEP,OADwB;AAE/BQ,cAAAA,WAAW,EAAE,QAFkB;AAG/BC,cAAAA,aAAa,EAAE,GAHgB;AAI/BC,cAAAA,YAAY,EAAE,CAJiB;AAK/BC,cAAAA,SAAS,EAAE,aALoB;AAM/BC,cAAAA,WAAW,EAAE;AANkB,aAAjB,CAAlB;AASJjB,YAAAA,eAAe,CAACkB,WAAhB,CAA4B,OAA5B,EAAsCC,KAAD,IAAW,CAC5C;AACH,aAFD;AAGAnB,YAAAA,eAAe,CAACoB,MAAhB,CAAuBtB,GAAvB;AACAT,YAAAA,oBAAoB,CAACgC,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcrB,eAAd,CAAb,CAApB;AACC,WArBD;AAsBH,SAvBD;AAwBH;AAEJ,KAlCD,CAkCE,OAAOsB,KAAP,EAAc,CACZ;AACH;AACJ;;AAMDC,EAAAA,OAAO,CAACC,GAAR,CAAYpC,iBAAZ;AACA,SAAOA,iBAAP;AACH;;GAvDcF,qB;;AAuDd;AACD,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nasync function useLoadStationsForMap(mapRef={})  {\n\tconst [loadStationObject, setLoadStationObject] = useState([]);\n\tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n\tconst [loadStationError, setLoadStationError] = useState(\"\");\n\n    let res;\n    useEffect(async () =>  {\n    }, [mapRef])\n\n    if(!res || res.length === 0){\n        try {\n            let res = await Api.getAllCitys();\n\n            if (res !== null && mapRef.current.map !== undefined) {\n                var loadStationName;\n                const map = mapRef.current.map;\n                const maps = mapRef.current.maps;\n\n                res.map(cityCoords => {\n                    cityCoords.charging_posts.map(loadStations => {            \n                        let polyGon = \n                            ([cityCoords.position.polygonePart1,\n                                cityCoords.position.polygonePart2,\n                                cityCoords.position.polygonePart3,\n                                cityCoords.position.polygonePart4\n                            ]);\n                        loadStationName = new maps.Polygon({\n                            paths: polyGon,\n                            strokeColor: \"yellow\",\n                            strokeOpacity: 0.9,\n                            strokeWeight: 2,\n                            fillColor: \"transparent\",\n                            fillOpacity: 0.35,\n                            });\n                   \n                    loadStationName.addListener('click', (event) => {\n                        //setLoadStationContent({loadStations});\n                    });\n                    loadStationName.setMap(map);\n                    setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n                    })\n                })\n            }\n\n        } catch (error) {\n            //setLoadStationError({error})\n        }\n    }\n\n\n\n\n\n    console.log(loadStationObject)\n    return loadStationObject;\n};\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}