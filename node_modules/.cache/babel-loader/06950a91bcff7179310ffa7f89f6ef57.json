{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  console.log(mapRef.current);\n\n  try {\n    let res = await Api.getAllCitys();\n\n    if (res !== null && mapRef.current !== null) {\n      console.log(res);\n      var cityname;\n      const map = mapRef.map;\n      const maps = mapRef.maps;\n      res.map(cityCoords => {\n        cityCoords.map(loadStations => {\n          console.log(loadStations);\n        });\n        cityname = cityCoords.city;\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        cityname = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        cityname.addListener('click', event => {\n          console.log(\"HEJ\", cityCoords);\n          setPopupInfo({\n            showBike: false,\n            showCity: true,\n            showLocation: false,\n            content: cityCoords\n          });\n        });\n        cityname.setMap(map);\n        setCitysObject(oldArray => [...oldArray, cityname]);\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n_s(useLoadStationsForMap, \"s1AWfSwHheD+DhFje7irgvZQyA8=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","console","log","current","res","Api","getAllCitys","cityname","map","maps","cityCoords","loadStations","city","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","setPopupInfo","showBike","showCity","showLocation","content","setMap","setCitysObject","oldArray","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAElD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CL,QAAQ,CAAC,EAAD,CAA1D;AACGM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,OAAnB;;AACA,MAAI;AACA,QAAIC,GAAG,GAAG,MAAMC,GAAG,CAACC,WAAJ,EAAhB;;AACA,QAAIF,GAAG,KAAK,IAAR,IAAgBN,MAAM,CAACK,OAAP,KAAmB,IAAvC,EAA6C;AACzCF,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEA,UAAIG,QAAJ;AACA,YAAMC,GAAG,GAAGV,MAAM,CAACU,GAAnB;AACA,YAAMC,IAAI,GAAGX,MAAM,CAACW,IAApB;AACAL,MAAAA,GAAG,CAACI,GAAJ,CAAQE,UAAU,IAAI;AAClBA,QAAAA,UAAU,CAACF,GAAX,CAAeG,YAAY,IAAI;AAC3BV,UAAAA,OAAO,CAACC,GAAR,CAAYS,YAAZ;AAIH,SALD;AAOAJ,QAAAA,QAAQ,GAAGG,UAAU,CAACE,IAAtB;AACA,YAAIC,OAAO,GACN,CAACH,UAAU,CAACI,QAAX,CAAoBC,aAArB,EACGL,UAAU,CAACI,QAAX,CAAoBE,aADvB,EAEGN,UAAU,CAACI,QAAX,CAAoBG,aAFvB,EAGGP,UAAU,CAACI,QAAX,CAAoBI,aAHvB,CADL;AAMAX,QAAAA,QAAQ,GAAG,IAAIE,IAAI,CAACU,OAAT,CAAiB;AACxBC,UAAAA,KAAK,EAAEP,OADiB;AAExBQ,UAAAA,WAAW,EAAE,SAFW;AAGxBC,UAAAA,aAAa,EAAE,GAHS;AAIxBC,UAAAA,YAAY,EAAE,CAJU;AAKxBC,UAAAA,SAAS,EAAE,aALa;AAMxBC,UAAAA,WAAW,EAAE;AANW,SAAjB,CAAX;AASAlB,QAAAA,QAAQ,CAACmB,WAAT,CAAqB,OAArB,EAA+BC,KAAD,IAAW;AACrC1B,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBQ,UAAnB;AACAkB,UAAAA,YAAY,CAAC;AACTC,YAAAA,QAAQ,EAAE,KADD;AAETC,YAAAA,QAAQ,EAAE,IAFD;AAGTC,YAAAA,YAAY,EAAE,KAHL;AAITC,YAAAA,OAAO,EAAEtB;AAJA,WAAD,CAAZ;AAMH,SARD;AASAH,QAAAA,QAAQ,CAAC0B,MAAT,CAAgBzB,GAAhB;AACA0B,QAAAA,cAAc,CAACC,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAc5B,QAAd,CAAb,CAAd;AAEC,OApCL;AAqCC;AAER,GA/CD,CA+CE,OAAO6B,KAAP,EAAc;AACZnC,IAAAA,OAAO,CAACC,GAAR,CAAYkC,KAAZ;AACH;AACJ,CAtDD;;GAAMvC,qB;;AAuDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n    console.log(mapRef.current)\n    try {\n        let res = await Api.getAllCitys();\n        if (res !== null && mapRef.current !== null) {\n            console.log(res)\n\n            var cityname;\n            const map = mapRef.map;\n            const maps = mapRef.maps;\n            res.map(cityCoords => {\n                cityCoords.map(loadStations => {\n                    console.log(loadStations)\n                \n                    \n                \n                })\n\n                cityname = cityCoords.city\n                let polyGon = \n                    ([cityCoords.position.polygonePart1,\n                        cityCoords.position.polygonePart2,\n                        cityCoords.position.polygonePart3,\n                        cityCoords.position.polygonePart4\n                    ]);\n                cityname = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                cityname.addListener('click', (event) => {\n                    console.log(\"HEJ\", cityCoords)\n                    setPopupInfo({\t\n                        showBike: false,\n                        showCity: true,\n                        showLocation: false,\n                        content: cityCoords\n                    })\n                });\n                cityname.setMap(map);\n                setCitysObject(oldArray => [...oldArray, cityname]);\n\n                })\n            }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}