{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\loggin\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { Wrapper } from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nexport default function Login() {\n  _s();\n\n  const [data, setData] = useState({\n    errorMessage: \"\",\n    isLoading: false\n  });\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\"); // If Github API returns the code parameter\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data,\n        isLoading: true\n      });\n      const requestData = {\n        code: newUrl[1]\n      };\n      console.log(\"HÄÄÄÄÄÄÄÄR\", requestData);\n      const proxy_url = \"http://localhost:1337/api/authenticate/authenticate\";\n\n      async function getINFO() {\n        try {\n          console.log(addToBalance, id);\n          const endpoint = `${proxy_url}`;\n          let res;\n          res = await (await fetch(endpoint, { ...defaultConfigPut,\n            body: JSON.stringify({\n              code: newUrl[1]\n            })\n          })).json();\n          console.log(res.data.result);\n\n          if (res.data.result === \"Object: 619b5e6fe8cf630e43c0aff4 updated\") {\n            return true;\n          } else {\n            return false;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n\n      getINFO();\n    }\n  }, [data]); // Use code parameter and other parameters to make POST request to proxy_server\n  //   fetch(proxy_url, {\n  //     method: \"POST\",\n  //     body: JSON.stringify(requestData)\n  //   })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       console.log(data, \" IGENOM\")\n  //     })\n  //     .catch(error => {\n  //       console.log(error, \"HÄÄÄR\")\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: \"FRAMME\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"+o/aPN0HmoOh/R4RFDKbirQwrBY=\");\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/loggin/index.js"],"names":["React","useState","useEffect","useContext","Navigate","Wrapper","AppContext","Api","require","config","Login","data","setData","errorMessage","isLoading","url","window","location","href","hasCode","includes","newUrl","split","history","pushState","requestData","code","console","log","proxy_url","getINFO","addToBalance","id","endpoint","res","fetch","defaultConfigPut","body","JSON","stringify","json","result","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,WAAhB;;;AAEAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC;AAAEY,IAAAA,YAAY,EAAE,EAAhB;AAAoBC,IAAAA,SAAS,EAAE;AAA/B,GAAD,CAAhC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMa,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACA,UAAMC,OAAO,GAAGJ,GAAG,CAACK,QAAJ,CAAa,QAAb,CAAhB,CAHc,CAKd;;AACA,QAAID,OAAJ,EAAa;AACX,YAAME,MAAM,GAAGN,GAAG,CAACO,KAAJ,CAAU,QAAV,CAAf;AACAN,MAAAA,MAAM,CAACO,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,IAA7B,EAAmCH,MAAM,CAAC,CAAD,CAAzC;AACAT,MAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWG,QAAAA,SAAS,EAAE;AAAtB,OAAD,CAAP;AAEA,YAAMW,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD;AADM,OAApB;AAIAM,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,WAA1B;AAEA,YAAMI,SAAS,GAAG,qDAAlB;;AACE,qBAAeC,OAAf,GAAyB;AACvB,YAAI;AACFH,UAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ,EAA0BC,EAA1B;AACA,gBAAMC,QAAQ,GAAI,GAAEJ,SAAU,EAA9B;AACA,cAAIK,GAAJ;AACAA,UAAAA,GAAG,GAAG,MAAM,CACR,MAAMC,KAAK,CAACF,QAAD,EAAW,EAClB,GAAGG,gBADe;AAElBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBb,cAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD;AADK,aAAf;AAFY,WAAX,CADH,EAMJmB,IANI,EAAZ;AAOAb,UAAAA,OAAO,CAACC,GAAR,CAAYM,GAAG,CAACvB,IAAJ,CAAS8B,MAArB;;AAEA,cAAGP,GAAG,CAACvB,IAAJ,CAAS8B,MAAT,KAAoB,0CAAvB,EAAmE;AAC/D,mBAAO,IAAP;AACH,WAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ,SAlBC,CAkBA,OAAOC,KAAP,EAAc;AACZf,UAAAA,OAAO,CAACC,GAAR,CAAac,KAAb;AACH;AAEF;;AACDZ,MAAAA,OAAO;AACR;AACF,GA5CQ,EA4CN,CAACnB,IAAD,CA5CM,CAAT,CAH8B,CAmD1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAIF,sBACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5EuBD,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport {Wrapper} from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\n\nrequire('dotenv').config()\n\n\nexport default function Login() {\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n\n      const requestData = {\n        code: newUrl[1]\n      };\n      \n      console.log(\"HÄÄÄÄÄÄÄÄR\", requestData)\n\n      const proxy_url = \"http://localhost:1337/api/authenticate/authenticate\";\n        async function getINFO() {\n          try {\n            console.log(addToBalance, id)\n            const endpoint = `${proxy_url}`;\n            let res;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        code: newUrl[1],\n                    })\n                })).json();\n            console.log(res.data.result)\n            \n            if(res.data.result === \"Object: 619b5e6fe8cf630e43c0aff4 updated\") {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            console.log((error))\n        }\n\n      }\n      getINFO()\n    }\n  }, [data]);\n\n\n\n      // Use code parameter and other parameters to make POST request to proxy_server\n    //   fetch(proxy_url, {\n    //     method: \"POST\",\n    //     body: JSON.stringify(requestData)\n    //   })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //       console.log(data, \" IGENOM\")\n         \n    //     })\n        \n    //     .catch(error => {\n    //       console.log(error, \"HÄÄÄR\")\n    //     });\n    // }\n\n\n\n  return (\n    <Wrapper>\n   \n        FRAMME\n\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}