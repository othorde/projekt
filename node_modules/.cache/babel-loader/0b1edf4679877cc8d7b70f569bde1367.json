{"ast":null,"code":"export function checkIfCoordInParkingZone(coords, allParkingZones) {\n  let res;\n\n  for (var elem of allParkingZones) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon([\"59.306000\", \"18.082101\"], polyGon);\n\n    if (res === true) {\n      let res = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_zone: \"elem.amount_of_bikes_zone\"\n      };\n      console.log(elem);\n      return res;\n    }\n  }\n}\n/*  loopara igenom alla chargingposts,\n       ser om koordinaterna finns inuti polygon,\n       retunerar endast true */\n\nexport function checkIfCoordInChargingPost(startCoords, allCharging_posts) {\n  console.log(startCoords, allCharging_posts, \"hääär\");\n  let res;\n\n  for (var elem of allCharging_posts) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(startCoords, polyGon);\n    console.log(res);\n\n    if (res === true) {\n      let zone = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_post: elem.amount_of_bikes_post\n      };\n      return zone;\n    }\n  }\n}\n/* Retunerar true/false om punkt finns i polygon */\n\nexport function checkIfPointInPolyGon(point, polygone) {\n  var pointInPolygon = require('point-in-polygon');\n\n  return pointInPolygon(point, polygone);\n}","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/helperfunction/helpers.js"],"names":["checkIfCoordInParkingZone","coords","allParkingZones","res","elem","polyGon","position","polygonePart1","lat","lng","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","returned","color","amount_of_bikes_zone","console","log","checkIfCoordInChargingPost","startCoords","allCharging_posts","zone","amount_of_bikes_post","point","polygone","pointInPolygon","require"],"mappings":"AACA,OAAO,SAASA,yBAAT,CAAmCC,MAAnC,EAA2CC,eAA3C,EAA4D;AAC/D,MAAIC,GAAJ;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,eAAjB,EAAkC;AAC9B,QAAIG,OAAO,GAAG,CACV,CAACD,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BC,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BE,GAD5B,CADU,EAGV,CAACL,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BF,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BD,GAD5B,CAHU,EAKV,CAACL,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BH,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BF,GAD5B,CALU,EAOV,CAACL,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BJ,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BH,GAD5B,CAPU,CAAd;AAUAN,IAAAA,GAAG,GAAGU,qBAAqB,CAAC,CAAC,WAAD,EAAc,WAAd,CAAD,EAA6BR,OAA7B,CAA3B;;AAEA,QAAGF,GAAG,KAAK,IAAX,EAAiB;AACb,UAAIA,GAAG,GAAG;AACNW,QAAAA,QAAQ,EAAE,IADJ;AAENC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAFN;AAGNC,QAAAA,oBAAoB,EAAE;AAHhB,OAAV;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACA,aAAOD,GAAP;AACH;AACJ;AACJ;AAEA;AACD;AACA;;AACA,OAAO,SAASgB,0BAAT,CAAoCC,WAApC,EAAiDC,iBAAjD,EAAoE;AACnEJ,EAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ,EAAyBC,iBAAzB,EAA4C,OAA5C;AAEJ,MAAIlB,GAAJ;;AACA,OAAK,IAAIC,IAAT,IAAiBiB,iBAAjB,EAAoC;AAChC,QAAIhB,OAAO,GAAG,CACV,CAACD,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BC,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BE,GAD5B,CADU,EAGV,CAACL,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BF,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BD,GAD5B,CAHU,EAKV,CAACL,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BH,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BF,GAD5B,CALU,EAOV,CAACL,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BJ,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BH,GAD5B,CAPU,CAAd;AAWAN,IAAAA,GAAG,GAAGU,qBAAqB,CAACO,WAAD,EAAcf,OAAd,CAA3B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;;AAEA,QAAGA,GAAG,KAAK,IAAX,EAAiB;AACb,UAAImB,IAAI,GAAG;AACPR,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAFL;AAGPQ,QAAAA,oBAAoB,EAAEnB,IAAI,CAACmB;AAHpB,OAAX;AAKA,aAAOD,IAAP;AACH;AACJ;AACJ;AAGD;;AACA,OAAO,SAAST,qBAAT,CAA+BW,KAA/B,EAAsCC,QAAtC,EAAgD;AACnD,MAAIC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,SAAOD,cAAc,CAACF,KAAD,EAAQC,QAAR,CAArB;AACH","sourcesContent":["    \nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n    let res;\n\n    for (var elem of allParkingZones) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon([\"59.306000\", \"18.082101\"], polyGon);\n\n        if(res === true) {\n            let res = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_zone: \"elem.amount_of_bikes_zone\"\n            }\n            console.log(elem)\n            return res\n        }\n    }\n}\n\n /*  loopara igenom alla chargingposts,\n        ser om koordinaterna finns inuti polygon,\n        retunerar endast true */\nexport function checkIfCoordInChargingPost(startCoords, allCharging_posts) {\n        console.log(startCoords, allCharging_posts, \"hääär\")\n\n    let res;\n    for (var elem of allCharging_posts) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n\n        res = checkIfPointInPolyGon(startCoords, polyGon);\n        console.log(res)\n\n        if(res === true) {\n            let zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_post: elem.amount_of_bikes_post\n            }\n            return zone\n        }\n    } \n}\n\n\n/* Retunerar true/false om punkt finns i polygon */\nexport function checkIfPointInPolyGon(point, polygone) {\n    var pointInPolygon = require('point-in-polygon');\n\n    return pointInPolygon(point, polygone);\n}"]},"metadata":{},"sourceType":"module"}