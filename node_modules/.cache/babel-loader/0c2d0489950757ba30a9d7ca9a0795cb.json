{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import {useState, useEffect} from 'react';\nimport Api from '../api';\nimport { useState, useEffect } from 'react';\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\n\nconst useCurrentPosition2 = mapRef => {\n  _s();\n\n  console.log(mapRef);\n  const [location1, setLocation1] = useState(\"\");\n  const [error1, setError1] = useState();\n\n  const handleSucces = pos => {\n    const {\n      latitude,\n      longitude\n    } = pos.coords;\n    setLocation1({\n      mapRef\n    });\n  };\n\n  const handleError = error => {\n    setError1(error.message);\n  };\n\n  useEffect(async () => {\n    const {\n      geolocation\n    } = navigator;\n    res = await Api.getAllCitys();\n\n    if (res != null) {\n      handleSucces(res);\n    }\n\n    if (!geolocation) {\n      setError1(\"Geolocation not supported\");\n      return;\n    }\n\n    geolocation.getCurrentPosition(handleSucces, handleError, options);\n  }, [options]);\n  return {\n    location1,\n    error1\n  };\n};\n\n_s(useCurrentPosition2, \"vu9rY+THhM8DGGpCJ9DBmabHZpE=\");\n\nexport default useCurrentPosition2; // const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n//     const getCitys = (res) => {\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n//     return \"res\"\n// };\n// export default useLoadStationsForMaps;\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadStationsToMap.js"],"names":["Api","useState","useEffect","options","enableHighAccuracy","timeout","maximumAge","useCurrentPosition2","mapRef","console","log","location1","setLocation1","error1","setError1","handleSucces","pos","latitude","longitude","coords","handleError","error","message","geolocation","navigator","res","getAllCitys","getCurrentPosition"],"mappings":";;AAAA;AAIA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,MAAMC,OAAO,GAAG;AACfC,EAAAA,kBAAkB,EAAE,IADL;AAEfC,EAAAA,OAAO,EAAE,OAAO,EAAP,GAAY,CAFN;AAES;AACxBC,EAAAA,UAAU,EAAE,OAAO,EAAP,GAAY,EAHT,CAGa;;AAHb,CAAhB;;AAMA,MAAMC,mBAAmB,GAAIC,MAAD,IAAY;AAAA;;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAK,CAACG,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,EAApC;;AACA,QAAMc,YAAY,GAAIC,GAAD,IAAS;AAC1B,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAyBF,GAAG,CAACG,MAAnC;AAEAP,IAAAA,YAAY,CAAC;AACTJ,MAAAA;AADS,KAAD,CAAZ;AAGH,GAND;;AAQA,QAAMY,WAAW,GAAIC,KAAD,IAAW;AAC3BP,IAAAA,SAAS,CAACO,KAAK,CAACC,OAAP,CAAT;AACH,GAFD;;AAIApB,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAM;AAACqB,MAAAA;AAAD,QAAgBC,SAAtB;AACAC,IAAAA,GAAG,GAAG,MAAMzB,GAAG,CAAC0B,WAAJ,EAAZ;;AACA,QAAID,GAAG,IAAI,IAAX,EAAiB;AACbV,MAAAA,YAAY,CAACU,GAAD,CAAZ;AACH;;AACD,QAAI,CAACF,WAAL,EAAkB;AACdT,MAAAA,SAAS,CAAC,2BAAD,CAAT;AACA;AACH;;AACDS,IAAAA,WAAW,CAACI,kBAAZ,CAA+BZ,YAA/B,EAA6CK,WAA7C,EAA0DjB,OAA1D;AACH,GAXQ,EAWP,CAACA,OAAD,CAXO,CAAT;AAaA,SAAO;AAACQ,IAAAA,SAAD;AAAYE,IAAAA;AAAZ,GAAP;AACH,CA9BD;;GAAMN,mB;;AA+BN,eAAeA,mBAAf,C,CAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AA2BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import {useState, useEffect} from 'react';\n\n\n\nimport Api from '../api';\nimport {useState, useEffect} from 'react';\n\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\nconst useCurrentPosition2 = (mapRef) => {\n    console.log(mapRef)\n    const[location1, setLocation1] = useState(\"\");\n    const [error1, setError1] = useState();\n    const handleSucces = (pos) => {\n        const {latitude, longitude } = pos.coords;\n\n        setLocation1({\n            mapRef\n        });\n    };\n\n    const handleError = (error) => {\n        setError1(error.message);\n    };\n\n    useEffect(async () => {\n        const {geolocation} = navigator;\n        res = await Api.getAllCitys();\n        if (res != null) {\n            handleSucces(res);\n        }\n        if (!geolocation) {\n            setError1(\"Geolocation not supported\")\n            return;\n        }\n        geolocation.getCurrentPosition(handleSucces, handleError, options)\n    },[options])\n    \n    return {location1, error1};\n};\nexport default useCurrentPosition2;\n\n\n\n\n\n\n// const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n\n\n//     const getCitys = (res) => {\n\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n            \n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n\n    \n//     return \"res\"\n\n// };\n// export default useLoadStationsForMaps;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}