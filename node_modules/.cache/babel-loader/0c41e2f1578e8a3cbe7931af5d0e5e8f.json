{"ast":null,"code":"/* Används av movebike samt history */\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n  let res;\n  let zone;\n\n  for (var elem of allParkingZones) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(coords, polyGon);\n\n    if (res === true) {\n      zone = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_zone: elem.amount_of_bikes_zone\n      };\n    } else {\n      zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_zone: \"\"\n      };\n    }\n\n    return zone;\n  }\n}\n/*  loopara igenom alla chargingposts,\n       ser om koordinaterna finns inuti polygon,\n       retunerar endast true */\n\nexport function checkIfCoordInChargingPost(coords, allCharging_posts) {\n  let res;\n  let zone;\n\n  for (var elem of allCharging_posts) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(coords, polyGon);\n\n    if (res === true) {\n      zone = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_post: elem.amount_of_bikes_post\n      };\n    } else {\n      zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_post: \"\"\n      };\n    }\n\n    return zone;\n  }\n}\n/* Retunerar true/false om punkt finns i polygon */\n\nexport function checkIfPointInPolyGon(point, polygone) {\n  var pointInPolygon = require('point-in-polygon');\n\n  return pointInPolygon(point, polygone);\n}","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/helperfunction/helpers.js"],"names":["checkIfCoordInParkingZone","coords","allParkingZones","res","zone","elem","polyGon","position","polygonePart1","lat","lng","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","returned","color","amount_of_bikes_zone","checkIfCoordInChargingPost","allCharging_posts","amount_of_bikes_post","point","polygone","pointInPolygon","require"],"mappings":"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","sourcesContent":["\n/* Används av movebike samt history */\n\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n    let res;\n    let zone;\n\n\n    for (var elem of allParkingZones) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon(coords, polyGon);\n\n        if(res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_zone: elem.amount_of_bikes_zone\n            }\n        } else {\n            zone = {\n                returned: false,\n                color: \"\",\n                amount_of_bikes_zone: \"\"\n            }\n        }\n        return zone\n    }\n}\n\n /*  loopara igenom alla chargingposts,\n        ser om koordinaterna finns inuti polygon,\n        retunerar endast true */\nexport function checkIfCoordInChargingPost(coords, allCharging_posts) {\n\n    let res;\n    let zone;\n    for (var elem of allCharging_posts) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n\n        res = checkIfPointInPolyGon(coords, polyGon);\n\n        if (res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_post: elem.amount_of_bikes_post\n            }\n        } else {\n            zone = {\n                returned: false,\n                color: \"\",\n                amount_of_bikes_post: \"\"\n            }\n        }\n        return zone;\n    } \n}\n\n/* Retunerar true/false om punkt finns i polygon */\nexport function checkIfPointInPolyGon(point, polygone) {\n    var pointInPolygon = require('point-in-polygon');\n\n    return pointInPolygon(point, polygone);\n}"]},"metadata":{},"sourceType":"module"}