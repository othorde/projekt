{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Oauth\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { Wrapper } from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config(); // clientId: process.env.REACT_APP_GITHUB_CLIENT_ID,\n// clientSecret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n// accessTokenUri: `https://github.com/login/oauth/access_token`, /* måste va rätt */\n// authorizationUri: \"https://github.com/login/oauth/authorize\", /* måste ocksåva rätt */\n// redirectUri: \"http://localhost:3000/login/home\",\n// scopes: [\"identity\"],\n\n\nconst requestData = {\n  client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\n  client_secret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n  code: newUrl[1],\n  redirect_uri: \"hej\"\n};\nexport default function Logins() {\n  _s();\n\n  //const { state, dispatch } = useContext(AuthContext);\n  const [data, setData] = useState({\n    errorMessage: \"\",\n    isLoading: false\n  });\n  const [data2, setData2] = useState({\n    requestData\n  }); //const { client_id, redirect_uri } = state;\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n    console.log(hasCode); // If Github API returns the code parameter\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      console.log((\"HÄÄÄÄÄÄÄÄR, \", hasCode)); //window.history.pushState({}, null, newUrl[0]);\n\n      setData({ ...data,\n        isLoading: true\n      });\n      setData2({\n        client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\n        client_secret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n        code: newUrl[1]\n      });\n      console.log(requestData);\n\n      function postOauth() {\n        const postUrl = \"https://github.com/login/oauth/access_token\";\n        fetch(postUrl, {\n          method: \"POST\",\n          body: JSON.stringify(requestData)\n        }).then(response => response.json()).then(data => {\n          console.log(data);\n        }).catch(error => {\n          setData({\n            isLoading: false,\n            errorMessage: \"Sorry! Login failed\"\n          });\n        });\n      }\n\n      postOauth();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"login-link\",\n        onClick: () => {\n          setData({ ...data,\n            errorMessage: \"\"\n          });\n        },\n        href: `https://github.com/login/oauth/authorize?scope=identity&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Login with GitHub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Logins, \"MhM0KZejdW7TNml3ub86+RLE33s=\");\n\n_c = Logins;\n\nvar _c;\n\n$RefreshReg$(_c, \"Logins\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Oauth/index.js"],"names":["React","useState","useEffect","useContext","Navigate","Wrapper","AppContext","Api","require","config","requestData","client_id","process","env","REACT_APP_GITHUB_CLIENT_ID","client_secret","REACT_APP_GITHUB_CLIENT_SECRET","code","newUrl","redirect_uri","Logins","data","setData","errorMessage","isLoading","data2","setData2","url","window","location","href","hasCode","includes","console","log","split","postOauth","postUrl","fetch","method","body","JSON","stringify","then","response","json","catch","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport {Wrapper} from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\n\nrequire('dotenv').config()\n\n\n    // clientId: process.env.REACT_APP_GITHUB_CLIENT_ID,\n    // clientSecret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n    // accessTokenUri: `https://github.com/login/oauth/access_token`, /* måste va rätt */\n    // authorizationUri: \"https://github.com/login/oauth/authorize\", /* måste ocksåva rätt */\n    // redirectUri: \"http://localhost:3000/login/home\",\n    // scopes: [\"identity\"],\n\n    const requestData = {\n        client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\n        client_secret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n        code: newUrl[1],\n        redirect_uri: \"hej\"\n    };\n\n\nexport default function Logins() {\n    //const { state, dispatch } = useContext(AuthContext);\n    const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n    const [data2, setData2] = useState({ requestData });\n\n    //const { client_id, redirect_uri } = state;\n  \n    useEffect(() => {\n      // After requesting Github access, Github redirects back to your app with a code parameter\n        const url = window.location.href;\n\n        const hasCode = url.includes(\"?code=\");\n        \n        console.log(hasCode);\n\n      // If Github API returns the code parameter\n      if (hasCode) {\n        const newUrl = url.split(\"?code=\");\n        console.log((\"HÄÄÄÄÄÄÄÄR, \", hasCode))\n        //window.history.pushState({}, null, newUrl[0]);\n        setData({ ...data, isLoading: true });\n        setData2({ \n            client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\n            client_secret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n            code: newUrl[1]\n        })\n\n\n        console.log(requestData)\n\n        function postOauth() {\n\n            const postUrl = \"https://github.com/login/oauth/access_token\";\n            fetch(postUrl, {\n                method: \"POST\",\n                body: JSON.stringify(requestData)\n              })\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data)\n                })\n                .catch(error => {\n                  setData({\n                    isLoading: false,\n                    errorMessage: \"Sorry! Login failed\"\n                  });\n                }); \n            }\n        postOauth()\n        }\n      }, []);\n\n\n  \n  \n    return (\n      <Wrapper>\n        <>\n            {\n            // Link to request GitHub access\n            }\n            \n            <a\n            className=\"login-link\"\n            onClick={() => {\n                setData({ ...data, errorMessage: \"\" });\n            }}\n                href={`https://github.com/login/oauth/authorize?scope=identity&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}`}\n\n            >\n            <span>Login with GitHub</span>\n            </a>\n        </>\n       \n      </Wrapper>\n    );\n  }\n  \n"]},"metadata":{},"sourceType":"module"}