{"ast":null,"code":"export function checkIfCoordInParkingZone(coords, allParkingZones) {\n  let res;\n\n  for (var elem of allParkingZones) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n    if (res === true) {\n      return true;\n    }\n  }\n}\n/*  loopara igenom alla chargingposts,\n       ser om koordinaterna finns inuti polygon,\n       retunerar endast true */\n\nexport function checkIfCoordInChargingPost(coords, allParkingZones) {\n  let res;\n\n  for (var elem of allCharging_posts) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n    if (res === true) {\n      return true;\n    }\n  }\n}\n/* Retunerar true/false om punkt finns i polygon */\n\nfunction checkIfPointInPolyGon(point, polygone) {\n  var pointInPolygon = require('point-in-polygon');\n\n  return pointInPolygon(point, polygone);\n} // export function checkIfCoordInParkingZone(coords, allParkingZones) {\n//     let res;\n//     for (var elem of allParkingZones) {\n//         let polyGon = [\n//             [elem.position.polygonePart1.lat,\n//             elem.position.polygonePart1.lng],\n//             [elem.position.polygonePart2.lat,\n//             elem.position.polygonePart2.lng],\n//             [elem.position.polygonePart3.lat,\n//             elem.position.polygonePart3.lng],\n//             [elem.position.polygonePart4.lat,\n//             elem.position.polygonePart4.lng]\n//         ]\n//         return checkIfPointInPolyGon(coords, polyGon);\n//     }\n// }\n//  /*  loopara igenom alla chargingposts,\n//         ser om koordinaterna finns inuti polygon,\n//         retunerar endast true */\n// export function checkIfCoordInChargingPost(coords, allCharging_posts) {\n//     let res;\n//     for (var elem of allCharging_posts) {\n//         let polyGon = [\n//             [elem.position.polygonePart1.lat,\n//             elem.position.polygonePart1.lng],\n//             [elem.position.polygonePart2.lat,\n//             elem.position.polygonePart2.lng],\n//             [elem.position.polygonePart3.lat,\n//             elem.position.polygonePart3.lng],\n//             [elem.position.polygonePart4.lat,\n//             elem.position.polygonePart4.lng]\n//         ]\n//         return checkIfPointInPolyGon(coords, polyGon);\n//     } \n// }\n// /* Retunerar true/false om punkt finns i polygon */\n// export function checkIfPointInPolyGon(point, polygone) {\n//     var pointInPolygon = require('point-in-polygon');\n//     return pointInPolygon(point, polygone);\n// }","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/helperfunction/helpers.js"],"names":["checkIfCoordInParkingZone","coords","allParkingZones","res","elem","polyGon","position","polygonePart1","lat","lng","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","tripEnded","checkIfCoordInChargingPost","allCharging_posts","point","polygone","pointInPolygon","require"],"mappings":"AACA,OAAO,SAASA,yBAAT,CAAmCC,MAAnC,EAA2CC,eAA3C,EAA4D;AAC/D,MAAIC,GAAJ;;AACA,OAAK,IAAIC,IAAT,IAAiBF,eAAjB,EAAkC;AAC9B,QAAIG,OAAO,GAAG,CACV,CAACD,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BC,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BE,GAD5B,CADU,EAGV,CAACL,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BF,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BD,GAD5B,CAHU,EAKV,CAACL,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BH,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BF,GAD5B,CALU,EAOV,CAACL,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BJ,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BH,GAD5B,CAPU,CAAd;AAUAN,IAAAA,GAAG,GAAGU,qBAAqB,CAACC,SAAD,EAAYT,OAAZ,CAA3B;;AAEA,QAAGF,GAAG,KAAK,IAAX,EAAiB;AACb,aAAO,IAAP;AACH;AACJ;AACJ;AAEA;AACD;AACA;;AACA,OAAO,SAASY,0BAAT,CAAoCd,MAApC,EAA4CC,eAA5C,EAA6D;AAChE,MAAIC,GAAJ;;AACA,OAAK,IAAIC,IAAT,IAAiBY,iBAAjB,EAAoC;AAChC,QAAIX,OAAO,GAAG,CACV,CAACD,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BC,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcC,aAAd,CAA4BE,GAD5B,CADU,EAGV,CAACL,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BF,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcI,aAAd,CAA4BD,GAD5B,CAHU,EAKV,CAACL,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BH,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcK,aAAd,CAA4BF,GAD5B,CALU,EAOV,CAACL,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BJ,GAA7B,EACAJ,IAAI,CAACE,QAAL,CAAcM,aAAd,CAA4BH,GAD5B,CAPU,CAAd;AAUAN,IAAAA,GAAG,GAAGU,qBAAqB,CAACC,SAAD,EAAYT,OAAZ,CAA3B;;AAEA,QAAGF,GAAG,KAAK,IAAX,EAAiB;AACb,aAAO,IAAP;AACH;AACJ;AACJ;AAGG;;AACA,SAASU,qBAAT,CAA+BI,KAA/B,EAAsCC,QAAtC,EAAgD;AAC5C,MAAIC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,SAAOD,cAAc,CAACF,KAAD,EAAQC,QAAR,CAArB;AACH,C,CAOL;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA","sourcesContent":["\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n    let res;\n    for (var elem of allParkingZones) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n        if(res === true) {\n            return true\n        }\n    }\n}\n\n /*  loopara igenom alla chargingposts,\n        ser om koordinaterna finns inuti polygon,\n        retunerar endast true */\nexport function checkIfCoordInChargingPost(coords, allParkingZones) {\n    let res;\n    for (var elem of allCharging_posts) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n        if(res === true) {\n            return true\n        }\n    } \n}\n\n\n    /* Retunerar true/false om punkt finns i polygon */\n    function checkIfPointInPolyGon(point, polygone) {\n        var pointInPolygon = require('point-in-polygon');\n\n        return pointInPolygon(point, polygone);\n    }\n\n\n\n\n\n    \n// export function checkIfCoordInParkingZone(coords, allParkingZones) {\n//     let res;\n\n//     for (var elem of allParkingZones) {\n//         let polyGon = [\n//             [elem.position.polygonePart1.lat,\n//             elem.position.polygonePart1.lng],\n//             [elem.position.polygonePart2.lat,\n//             elem.position.polygonePart2.lng],\n//             [elem.position.polygonePart3.lat,\n//             elem.position.polygonePart3.lng],\n//             [elem.position.polygonePart4.lat,\n//             elem.position.polygonePart4.lng]\n//         ]\n//         return checkIfPointInPolyGon(coords, polyGon);\n//     }\n// }\n\n//  /*  loopara igenom alla chargingposts,\n//         ser om koordinaterna finns inuti polygon,\n//         retunerar endast true */\n// export function checkIfCoordInChargingPost(coords, allCharging_posts) {\n//     let res;\n//     for (var elem of allCharging_posts) {\n//         let polyGon = [\n//             [elem.position.polygonePart1.lat,\n//             elem.position.polygonePart1.lng],\n//             [elem.position.polygonePart2.lat,\n//             elem.position.polygonePart2.lng],\n//             [elem.position.polygonePart3.lat,\n//             elem.position.polygonePart3.lng],\n//             [elem.position.polygonePart4.lat,\n//             elem.position.polygonePart4.lng]\n//         ]\n//         return checkIfPointInPolyGon(coords, polyGon);\n//     } \n// }\n\n\n// /* Retunerar true/false om punkt finns i polygon */\n// export function checkIfPointInPolyGon(point, polygone) {\n//     var pointInPolygon = require('point-in-polygon');\n\n//     return pointInPolygon(point, polygone);\n// }"]},"metadata":{},"sourceType":"module"}