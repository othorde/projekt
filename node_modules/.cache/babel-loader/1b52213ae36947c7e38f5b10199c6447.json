{"ast":null,"code":"import { API_URL, defaultConfigPut } from \"./config\";\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nconst Api = {\n  //EJ aktiv från backend\n  createOneUser: async (name, email, psw) => {\n    const endpoint = `${API_URL}`;\n    let allowed_user = [];\n    allowed_user.push(email);\n    let randomnr = uuidv4();\n    const document = await (await fetch(endpoint, { ...defaultConfig,\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        psw: psw,\n        docs: [{\n          docname: `${name} dokument`,\n          docid: randomnr,\n          text: `${name} skriv här`,\n          allowed_user\n        }]\n      })\n    })).json();\n\n    if (document.data.msg === \"Got a POST request, sending back 201 Created\") {\n      return document;\n    } else {\n      return false;\n    }\n  },\n  postLoginOauth: async () => {\n    try {\n      const endpoint = `https://github.com/login/oauth/authorize?client_id=7c488a6f93e063d494fb`;\n      let res = await (await fetch(endpoint)).json();\n      console.log(res);\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAUser: async id => {\n    try {\n      const endpoint = `${API_URL}/customers/${id}`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getACity: async whatCity => {\n    console.log(whatCity);\n\n    try {\n      const endpoint = `${API_URL}/cities/${whatCity}`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllCitys: async () => {\n    try {\n      const endpoint = `${API_URL}/cities`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllScooters: async () => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateAScooter: async (id, speed, battery, newPosition, logg) => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          speed: speed,\n          battery: battery // position: newPosition,\n          // logg: logg\n\n        })\n      })).json();\n      console.log(res);\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  // EJ Gjorde som den ska, bara dummy\n  // Samma med updateUserSubscription måste skapas\n  updateUserFunds: async (addToBalance, id) => {\n    try {\n      console.log(addToBalance, id);\n      const endpoint = `${API_URL}/customers/balance`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          balance: addToBalance\n        })\n      })).json();\n      console.log(res.data.result);\n\n      if (res.data.result === \"Object: 619b5e6fe8cf630e43c0aff4 updated\") {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nexport default Api;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/api.js"],"names":["API_URL","defaultConfigPut","defaultConfig","method","headers","Api","createOneUser","name","email","psw","endpoint","allowed_user","push","randomnr","uuidv4","document","fetch","body","JSON","stringify","docs","docname","docid","text","json","data","msg","postLoginOauth","res","console","log","error","getAUser","id","getACity","whatCity","getAllCitys","getAllScooters","updateAScooter","speed","battery","newPosition","logg","_id","updateUserFunds","addToBalance","balance","result"],"mappings":"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","sourcesContent":["\nimport { API_URL, defaultConfigPut } from \"./config\";\n\n\nconst defaultConfig = {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n\t},\n};\n\n\nconst Api =  {\n    //EJ aktiv från backend\n\n\n\n    \n\n    \n\tcreateOneUser: async (name, email, psw) => {\n\t\tconst endpoint = `${API_URL}`\n\t\tlet allowed_user = [];\n\t\tallowed_user.push(email)\n\t\tlet randomnr = uuidv4();\n\t\tconst document = await (\n\t\t\tawait fetch(endpoint, {\n\t\t\t  \t...defaultConfig,\n\t\t\t  \tbody: JSON.stringify( {name: name, email: email, psw: psw, \n\t\t\t  \tdocs: [{ docname: `${name} dokument`, docid: randomnr,  text: `${name} skriv här`, allowed_user }],\n\t\t\t\t})\n\t\t\t})\n\t\t  ).json();\n\t\t\tif (document.data.msg === \"Got a POST request, sending back 201 Created\") {\n\t\t\t\treturn document\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t},\n\n\n\n\n\n\n    postLoginOauth: async() => {\n        try {\n            const endpoint = `https://github.com/login/oauth/authorize?client_id=7c488a6f93e063d494fb`;\n            let res = await (await fetch(endpoint)).json();\n            console.log(res)\n            return res\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    getAUser: async(id) => {\n        try {\n            const endpoint = `${API_URL}/customers/${id}`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    getACity: async (whatCity) => {\n        console.log(whatCity)\n        try {\n            const endpoint = `${API_URL}/cities/${whatCity}`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllCitys: async () => {\n        try {\n            const endpoint = `${API_URL}/cities`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllScooters: async () => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    updateAScooter: async (id, speed, battery, newPosition, logg) => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        speed: speed,\n                        battery: battery\n                        // position: newPosition,\n                        // logg: logg\n                    })\n                    })).json();\n            console.log(res)\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n    // EJ Gjorde som den ska, bara dummy\n    // Samma med updateUserSubscription måste skapas\n\n    updateUserFunds: async (addToBalance, id) => {\n        try {\n            console.log(addToBalance, id)\n            const endpoint = `${API_URL}/customers/balance`;\n            let res;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        balance: addToBalance,\n                    })\n                })).json();\n            console.log(res.data.result)\n            \n            if(res.data.result === \"Object: 619b5e6fe8cf630e43c0aff4 updated\") {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n}\n\nexport default Api\n"]},"metadata":{},"sourceType":"module"}