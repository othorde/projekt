{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import {useState, useEffect} from 'react';\nimport Api from '../api';\nimport { useState, useEffect } from 'react';\n\nconst useCurrentPosition2 = mapRef => {\n  _s();\n\n  console.log(mapRef);\n  const [loadStationObject, setLoadStationObject] = useState(\"\");\n  const [error1, setError1] = useState();\n\n  const handleSucces = res => {\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.map(cityCoords => {\n      cityCoords.charging_posts.map(loadStations => {\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        loadStationName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"yellow\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        loadStationName.addListener('click', event => {//setLoadStationContent({loadStations});\n        });\n        loadStationName.setMap(map);\n        setLoadStationObject({\n          loadStationName\n        });\n      });\n    });\n  };\n\n  const handleError = error => {\n    setError1(error.message);\n  };\n\n  useEffect(async () => {\n    const {\n      geolocation\n    } = navigator;\n    let res;\n    res = await Api.getAllCitys();\n\n    if (res != null) {\n      handleSucces(res);\n    } else {\n      handleError(\"Error\");\n      return;\n    } // geolocation.getCurrentPosition(handleSucces, handleError, options)\n\n  }, [mapRef]);\n  return {\n    loadStationObject,\n    error1\n  };\n};\n\n_s(useCurrentPosition2, \"Qz2tI5vfa5i3uCduZtHg2+CDl/c=\");\n\nexport default useCurrentPosition2; // const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n//     const getCitys = (res) => {\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n//     return \"res\"\n// };\n// export default useLoadStationsForMaps;\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadStationsToMap.js"],"names":["Api","useState","useEffect","useCurrentPosition2","mapRef","console","log","loadStationObject","setLoadStationObject","error1","setError1","handleSucces","res","loadStationName","map","current","maps","cityCoords","charging_posts","loadStations","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","setMap","handleError","error","message","geolocation","navigator","getAllCitys"],"mappings":";;AAAA;AAIA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,MAAMC,mBAAmB,GAAIC,MAAD,IAAY;AAAA;;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAK,CAACG,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC,EAAD,CAAzD;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,EAApC;;AACA,QAAMU,YAAY,GAAIC,GAAD,IAAS;AAE9B,QAAIC,eAAJ;AACA,UAAMC,GAAG,GAAGV,MAAM,CAACW,OAAP,CAAeD,GAA3B;AACA,UAAME,IAAI,GAAGZ,MAAM,CAACW,OAAP,CAAeC,IAA5B;AAEAJ,IAAAA,GAAG,CAACE,GAAJ,CAAQG,UAAU,IAAI;AAClBA,MAAAA,UAAU,CAACC,cAAX,CAA0BJ,GAA1B,CAA8BK,YAAY,IAAI;AAC1C,YAAIC,OAAO,GACN,CAACH,UAAU,CAACI,QAAX,CAAoBC,aAArB,EACGL,UAAU,CAACI,QAAX,CAAoBE,aADvB,EAEGN,UAAU,CAACI,QAAX,CAAoBG,aAFvB,EAGGP,UAAU,CAACI,QAAX,CAAoBI,aAHvB,CADL;AAMAZ,QAAAA,eAAe,GAAG,IAAIG,IAAI,CAACU,OAAT,CAAiB;AAC/BC,UAAAA,KAAK,EAAEP,OADwB;AAE/BQ,UAAAA,WAAW,EAAE,QAFkB;AAG/BC,UAAAA,aAAa,EAAE,GAHgB;AAI/BC,UAAAA,YAAY,EAAE,CAJiB;AAK/BC,UAAAA,SAAS,EAAE,aALoB;AAM/BC,UAAAA,WAAW,EAAE;AANkB,SAAjB,CAAlB;AASAnB,QAAAA,eAAe,CAACoB,WAAhB,CAA4B,OAA5B,EAAsCC,KAAD,IAAW,CAC5C;AACH,SAFD;AAGJrB,QAAAA,eAAe,CAACsB,MAAhB,CAAuBrB,GAAvB;AACAN,QAAAA,oBAAoB,CAAC;AAACK,UAAAA;AAAD,SAAD,CAApB;AAEC,OAtBD;AAuBH,KAxBD;AAyBH,GA/BG;;AAiCA,QAAMuB,WAAW,GAAIC,KAAD,IAAW;AAC3B3B,IAAAA,SAAS,CAAC2B,KAAK,CAACC,OAAP,CAAT;AACH,GAFD;;AAIApC,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAM;AAACqC,MAAAA;AAAD,QAAgBC,SAAtB;AACA,QAAI5B,GAAJ;AACAA,IAAAA,GAAG,GAAG,MAAMZ,GAAG,CAACyC,WAAJ,EAAZ;;AACA,QAAI7B,GAAG,IAAI,IAAX,EAAiB;AACbD,MAAAA,YAAY,CAACC,GAAD,CAAZ;AACH,KAFD,MAEO;AACHwB,MAAAA,WAAW,CAAC,OAAD,CAAX;AACA;AACH,KATiB,CAUlB;;AACH,GAXQ,EAWP,CAAChC,MAAD,CAXO,CAAT;AAaA,SAAO;AAACG,IAAAA,iBAAD;AAAoBE,IAAAA;AAApB,GAAP;AACH,CAvDD;;GAAMN,mB;;AAwDN,eAAeA,mBAAf,C,CAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AA2BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import {useState, useEffect} from 'react';\n\n\n\nimport Api from '../api';\nimport {useState, useEffect} from 'react';\n\n\nconst useCurrentPosition2 = (mapRef) => {\n    console.log(mapRef)\n    const[loadStationObject, setLoadStationObject] = useState(\"\");\n    const [error1, setError1] = useState();\n    const handleSucces = (res) => {\n\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.map(cityCoords => {\n        cityCoords.charging_posts.map(loadStations => {            \n            let polyGon = \n                ([cityCoords.position.polygonePart1,\n                    cityCoords.position.polygonePart2,\n                    cityCoords.position.polygonePart3,\n                    cityCoords.position.polygonePart4\n                ]);\n            loadStationName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: \"yellow\",\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35,\n                });\n            \n            loadStationName.addListener('click', (event) => {\n                //setLoadStationContent({loadStations});\n            });\n        loadStationName.setMap(map);\n        setLoadStationObject({loadStationName});\n        \n        })\n    })\n};\n\n    const handleError = (error) => {\n        setError1(error.message);\n    };\n\n    useEffect(async () => {\n        const {geolocation} = navigator;\n        let res;\n        res = await Api.getAllCitys();\n        if (res != null) {\n            handleSucces(res);\n        } else {\n            handleError(\"Error\")\n            return;\n        }\n        // geolocation.getCurrentPosition(handleSucces, handleError, options)\n    },[mapRef])\n    \n    return {loadStationObject, error1};\n};\nexport default useCurrentPosition2;\n\n\n\n\n\n\n// const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n\n\n//     const getCitys = (res) => {\n\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n            \n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n\n    \n//     return \"res\"\n\n// };\n// export default useLoadStationsForMaps;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}