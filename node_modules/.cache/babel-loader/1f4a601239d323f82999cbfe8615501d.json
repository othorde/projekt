{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //hooks\n\nimport useCurrentLocation from \"../../Hooks/useCurrentPosition\";\nimport useDisplayPolyChargeStation from \"../../Hooks/useDisplayPolyChargeStation\";\nimport useDisplayPolyParkZone from \"../../Hooks/useDisplayPolyParkZone\";\nimport useDisplayPolyCities from \"../../Hooks/useDisplayPolyCities\"; //components\n\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\";\nimport Loader from \"../Loader\"; //styles & img\n\nimport { Container, StyleMap, Main } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\n/* Denna komponent är kartan till admin.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props(Admin route). För att kunna lägga till polygons hämtas dessa med \n   Hooks, se mappen hooks.\n*/\n\nexport default function MapContainer(props) {\n  _s();\n\n  //hooks\n  const mapRef = useRef();\n  const {\n    loadStationContent,\n    showInfoForLoadStation\n  } = useDisplayPolyChargeStation(mapRef, props);\n  const {\n    cityContent,\n    showInfoForCity\n  } = useDisplayPolyCities(mapRef, props);\n  const {\n    parkingZoneContent,\n    showInfoForParkingZone\n  } = useDisplayPolyParkZone(mapRef, props);\n  const {\n    location\n  } = useCurrentLocation(options); //State\n\n  const [scooter, setScooter] = useState([]);\n  const [PopupInfo, setPopupInfo] = useState(null); ///Variabel\n\n  const loadScooters = props.ifToShowScooter;\n  const ScooterArray = props.ifToShowScooter.content; // Marker på kartan 1 person\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 35\n    }, this);\n  };\n  /*  Dessa useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll (PopUp)*/\n\n\n  useEffect(() => {\n    var _ref2, _ref3, _ref4, _ref5;\n\n    (_ref2 = scooter.showScooter === true) !== null && _ref2 !== void 0 ? _ref2 : setPopupInfo({\n      content: scooter.scooter,\n      whatToShow: \"Scooter\"\n    });\n    (_ref3 = loadStationContent.showLoadStations === true) !== null && _ref3 !== void 0 ? _ref3 : setPopupInfo({\n      content: loadStationContent.loadStations,\n      whatToShow: \"LoadStation\"\n    });\n    (_ref4 = cityContent.showLoadCitys === true) !== null && _ref4 !== void 0 ? _ref4 : setPopupInfo({\n      content: cityContent.city,\n      whatToShow: \"City\"\n    });\n    (_ref5 = parkingZoneContent.showParkingZone === true) !== null && _ref5 !== void 0 ? _ref5 : setPopupInfo({\n      content: parkingZoneContent.loadParkingZone,\n      whatToShow: \"ParkingZone\"\n    }); // if (scooter.showScooter === true) {\n    // \tsetPopupInfo({content: scooter.scooter, whatToShow: \"Scooter\"});\n    // }\n    // if (loadStationContent.showLoadStations === true) {\n    // \tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n    // }\n    // if (cityContent.showLoadCitys === true) {\n    // \tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n    // }\n    // if (parkingZoneContent.showParkingZone === true) {\n    // \tsetPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n    // }\n  }, [scooter.showScooter, scooter, setScooter, parkingZoneContent.showParkingZone, parkingZoneContent.loadParkingZone, cityContent.showLoadCitys, cityContent.city, loadStationContent.showLoadStations, loadStationContent.loadStations]); // useEffect(() => {\n  // \tif (loadStationContent.showLoadStations === true) {\n  // \t\tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n  // \t}\n  // },[loadStationContent.showLoadStations, loadStationContent.loadStations])\n  // useEffect(() => {\n  // \tif (cityContent.showLoadCitys === true) {\n  // \t\tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n  // \t}\n  // },[cityContent.showLoadCitys, cityContent.city])\n  // useEffect(() => {\n  // \tif (parkingZoneContent.showParkingZone === true) {\n  // \t\tsetPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n  // \t}\n  // },[parkingZoneContent.showParkingZone, parkingZoneContent.loadParkingZone])\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(StyleMap, {\n        children: location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n          },\n          defaultCenter: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          defaultZoom: 10,\n          yesIWantToUseGoogleMapApiInternals: true,\n          onGoogleApiLoaded: _ref6 => {\n            let {\n              map,\n              maps\n            } = _ref6;\n            mapRef.current = {\n              map,\n              maps\n            };\n          },\n          children: [/*#__PURE__*/_jsxDEV(Marker, {\n            lat: location.latitude,\n            lng: location.longitude,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"crime-marker\",\n                src: personimg,\n                alt: \"person\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 7\n            }, this)\n          }, 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 6\n          }, this), loadScooters.loadScooters && ScooterArray.map(scooter => {\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              lat: scooter.position.lat,\n              lng: scooter.position.lng,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => setScooter({\n                  scooter,\n                  showScooter: true\n                }),\n                className: \"crime-marker\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"scooter\",\n                  src: bikeimg,\n                  alt: \"scooter\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 8\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 8\n              }, this)\n            }, scooter._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 7\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 4\n      }, this), scooter || cityContent || loadStationContent ? /*#__PURE__*/_jsxDEV(PopUp, {\n        PopupInfo: PopupInfo\n      }, \"popupkey\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Logg, {\n      scooter: scooter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"wJh8xykxBsZ+9VRJfW2GpCsDbuI=\", false, function () {\n  return [useDisplayPolyChargeStation, useDisplayPolyCities, useDisplayPolyParkZone, useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","useDisplayPolyChargeStation","useDisplayPolyParkZone","useDisplayPolyCities","PopUp","Logg","Loader","Container","StyleMap","Main","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","MapContainer","props","mapRef","loadStationContent","showInfoForLoadStation","cityContent","showInfoForCity","parkingZoneContent","showInfoForParkingZone","location","scooter","setScooter","PopupInfo","setPopupInfo","loadScooters","ifToShowScooter","ScooterArray","content","Marker","children","showScooter","whatToShow","showLoadStations","loadStations","showLoadCitys","city","showParkingZone","loadParkingZone","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","map","maps","current","position","_id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//hooks\nimport useCurrentLocation from \"../../Hooks/useCurrentPosition\";\nimport useDisplayPolyChargeStation from \"../../Hooks/useDisplayPolyChargeStation\";\nimport useDisplayPolyParkZone from \"../../Hooks/useDisplayPolyParkZone\";\nimport useDisplayPolyCities from \"../../Hooks/useDisplayPolyCities\";\n//components\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\";\nimport Loader from \"../Loader\"\n//styles & img\nimport {Container,StyleMap, Main} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n/* Denna komponent är kartan till admin.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props(Admin route). För att kunna lägga till polygons hämtas dessa med \n   Hooks, se mappen hooks.\n*/\nexport default function MapContainer(props) {\n\t//hooks\n\tconst mapRef = useRef();\n\tconst { loadStationContent, showInfoForLoadStation } = useDisplayPolyChargeStation(mapRef, props);\n\tconst { cityContent, showInfoForCity } = useDisplayPolyCities(mapRef, props);\n\tconst { parkingZoneContent, showInfoForParkingZone } = useDisplayPolyParkZone(mapRef, props);\n\tconst { location } = useCurrentLocation(options);\n\t//State\n\tconst [scooter, setScooter] = useState([]);\n\tconst [PopupInfo, setPopupInfo] = useState(null);\n\t///Variabel\n\tconst loadScooters = props.ifToShowScooter;\n\tconst ScooterArray = props.ifToShowScooter.content;\n\t// Marker på kartan 1 person\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\n\t/*  Dessa useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll (PopUp)*/ \n\tuseEffect(() => {\n\n\t\tscooter.showScooter  === true ?? setPopupInfo({content: scooter.scooter, whatToShow: \"Scooter\"});\n\t\tloadStationContent.showLoadStations  === true ?? setPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n\t\tcityContent.showLoadCitys  === true ?? setPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n\t\tparkingZoneContent.showParkingZone === true ?? setPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n\n\t\t// if (scooter.showScooter === true) {\n\n\t\t// \tsetPopupInfo({content: scooter.scooter, whatToShow: \"Scooter\"});\n\t\t// }\n\n\t\t// if (loadStationContent.showLoadStations === true) {\n\n\t\t// \tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n\t\t// }\n\n\t\t// if (cityContent.showLoadCitys === true) {\n\n\t\t// \tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n\t\t// }\n\n\t\t// if (parkingZoneContent.showParkingZone === true) {\n\n\t\t// \tsetPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n\t\t// }\n\n\t},[scooter.showScooter, scooter, setScooter, parkingZoneContent.showParkingZone, parkingZoneContent.loadParkingZone, cityContent.showLoadCitys, cityContent.city, loadStationContent.showLoadStations, loadStationContent.loadStations])\n\n\t// useEffect(() => {\n\t// \tif (loadStationContent.showLoadStations === true) {\n\n\t// \t\tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n\t// \t}\n\t// },[loadStationContent.showLoadStations, loadStationContent.loadStations])\n\n\t// useEffect(() => {\n\t// \tif (cityContent.showLoadCitys === true) {\n\n\t// \t\tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n\t// \t}\n\t// },[cityContent.showLoadCitys, cityContent.city])\n\n\t// useEffect(() => {\n\t// \tif (parkingZoneContent.showParkingZone === true) {\n\n\t// \t\tsetPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n\t// \t}\n\t// },[parkingZoneContent.showParkingZone, parkingZoneContent.loadParkingZone])\n\n\treturn (\n\t\t<Container>\n\t\t\t<Main> \n\t\t\t<StyleMap>\n\t\t\t\t{/* Visar karta */}\n\t\t\t\t{location ? (\n\t\t\t\t<GoogleMapReact \n\t\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\t\tdefaultZoom={10}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{/*Visar användaren på kartan */}\n\t\t\t\t\t<Marker \n\t\t\t\t\t\tkey={1} \n\t\t\t\t\t\tlat={location.latitude} \n\t\t\t\t\t\tlng={location.longitude}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</Marker>\n\n\t\t\t\t\t{/*Visar alla scootrar*/}\n\t\t\t\t\t{loadScooters.loadScooters && (\n\t\t\t\t\tScooterArray.map(scooter => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t<Marker \n\t\t\t\t\t\t\tkey={scooter._id} \n\t\t\t\t\t\t\tlat={scooter.position.lat} \n\t\t\t\t\t\t\tlng={scooter.position.lng}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div onClick={() => setScooter({scooter, showScooter: true})}className=\"crime-marker\">\n\t\t\t\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Marker>)\n\t\t\t\t\t\t})\n\t\t\t\t\t)}\n\t\t\t\t</GoogleMapReact>\n\t\t\t\t):(<Loader/> )}\n\t\t\t</StyleMap>\n\n\t\t\t{/*Visar POPUP fönster, info skickas hit beroende på vad användaren vill se*/}\n\t\t\t{scooter || cityContent || loadStationContent ? (\n\t\t\t\t<PopUp key={\"popupkey\"} PopupInfo={PopupInfo}></PopUp>\n\t\t\t): (null) }\n\t\t\t</Main>\n\t\t\t<Logg scooter= {scooter}/>\t\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}