{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useFetchAllCities = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [cities, setCities] = useState();\n  const [loadingCities, setLoadingCities] = useState();\n  const [errorCities, setErrorCities] = useState();\n\n  const fetchData = async id => {\n    let data;\n\n    try {\n      setErrorCities(false);\n      setLoadingCities(true);\n      const allCities = await Api.getAllCitys();\n\n      if (allCities.length > 0) {\n        setCities(allCities);\n      } else {\n        setMessage(\"Städerna kunde ej läsas in\");\n      }\n    } catch (error) {\n      setErrorCities(true);\n    }\n\n    setLoadingCities(false);\n  };\n  /* Kör funktionen  */\n\n\n  useEffect(_s(() => {\n    _s();\n\n    useFetchAllCities();\n  }, \"0XYxEA+lD3YWd68o80jzY85uB2c=\", false, function () {\n    return [useFetchAllCities];\n  }), []);\n  return {\n    cities,\n    loadingCities,\n    errorCities\n  };\n}; // /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n// }, [user, state, loading, error, message])\n\n_s2(useFetchAllCities, \"TiL146R4JrAQ2cupUJjxG5S+dF8=\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useFetchAllCities.js"],"names":["useState","useEffect","useFetchAllCities","cities","setCities","loadingCities","setLoadingCities","errorCities","setErrorCities","fetchData","id","data","allCities","Api","getAllCitys","length","setMessage","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;AAIA,OAAO,MAAOC,iBAAiB,GAAG,MAAM;AAAA;;AAAA;;AAEvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,EAApC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,EAAlD;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,EAA9C;;AAEA,QAAMS,SAAS,GAAG,MAAOC,EAAP,IAAc;AACzB,QAAIC,IAAJ;;AACA,QAAI;AACAH,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,YAAMM,SAAS,GAAG,MAAMC,GAAG,CAACC,WAAJ,EAAxB;;AAEA,UAAGF,SAAS,CAACG,MAAV,GAAmB,CAAtB,EAAyB;AACrBX,QAAAA,SAAS,CAACQ,SAAD,CAAT;AACH,OAFD,MAEO;AACHI,QAAAA,UAAU,CAAC,4BAAD,CAAV;AACH;AAEJ,KAXD,CAWE,OAAOC,KAAP,EAAc;AACZT,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AACDF,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAjBJ;AAmBA;;;AACAL,EAAAA,SAAS,IAAC,MAAM;AAAA;;AACfC,IAAAA,iBAAiB;AACjB,GAFQ;AAAA,YACRA,iBADQ;AAAA,MAEN,EAFM,CAAT;AAIA,SAAO;AAACC,IAAAA,MAAD;AAASE,IAAAA,aAAT;AAAwBE,IAAAA;AAAxB,GAAP;AACA,CA/BM,C,CAwCP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;IArDcL,iB","sourcesContent":["import {useState, useEffect } from 'react'\n\n\n\nexport const  useFetchAllCities = () => {\n\n\tconst [cities, setCities] = useState();\n\tconst [loadingCities, setLoadingCities] = useState();\n\tconst [errorCities, setErrorCities] = useState();\n\n\tconst fetchData = async (id) => {\n        let data;\n        try {\n            setErrorCities(false)\n            setLoadingCities(true)\n            const allCities = await Api.getAllCitys()\n\n            if(allCities.length > 0) {\n                setCities(allCities)\n            } else {\n                setMessage(\"Städerna kunde ej läsas in\")\n            }\n            \n        } catch (error) {\n            setErrorCities(true)\n        }\n        setLoadingCities(false)\n    }  \n    \n\t/* Kör funktionen  */\n\tuseEffect(() => {\n\t\tuseFetchAllCities()\n\t}, [])\n\n\treturn {cities, loadingCities, errorCities}\n}\n\n\n\n\n\n\n\n\n// /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n\n// }, [user, state, loading, error, message])"]},"metadata":{},"sourceType":"module"}