{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\routes\\\\Admin\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //components\n\nimport Map from '../../components/Map/index'; //Styles\n\nimport { Container, Nav, MapContainer, StyledBtn, ShowLogg } from './Form.styles';\nimport Api from '../../api';\n/* link / navLinkto (to) prop använder invoice number för att ladda sidan med\n  rätt id\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initalValue = {\n  loadScooters: false,\n  content: []\n};\nlet initalValueLoadCitys = {\n  loadCity: false\n};\nlet initalValueLoadStations = {\n  loadStation: false\n};\n\nconst Admin = () => {\n  _s();\n\n  const [ifToShowScooter, setIfToShowScooter] = useState(initalValue);\n  const [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys);\n  const [ifToShowLoadStations, setIfToShowLoadStations] = useState(initalValueLoadStations); // hämtar ju alla scootrar här varje gång man trycker.\n  // Kanske onödigt? Samtidigt vill man få det uppdaterat?\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        let res = await Api.getAllScooters();\n        setIfToShowScooter(prevState => ({\n          loadScooters: !prevState.loadScooters,\n          content: res\n        }));\n      } catch (error) {\n        console.log(error);\n      }\n\n      console.log(\"HEJ\");\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getScooters = async () => {\n    try {\n      let res = await Api.getAllScooters();\n      setIfToShowScooter(prevState => ({\n        loadScooters: !prevState.loadScooters,\n        content: res\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCitys = async () => {\n    setIfToShowCity(prevState => ({\n      loadCity: !prevState.loadCity\n    }));\n  };\n\n  const getLoadStations = async () => {\n    setIfToShowLoadStations(prevState => ({\n      loadStation: !prevState.loadStation\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      children: [/*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getScooters,\n        children: \" Cyklar \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getCitys,\n        children: \" St\\xE4der \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getLoadStations,\n        children: \" Laddstationer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: setInterval,\n        children: \" Visa live \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        ifToShowScooter: ifToShowScooter,\n        ifToShowCity: ifToShowCity,\n        ifToShowLoadStations: ifToShowLoadStations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 2\n  }, this);\n};\n\n_s(Admin, \"h2LfCfgxkf6x9zNwZIShtWgN5bM=\");\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/routes/Admin/index.js"],"names":["React","useState","useEffect","Map","Container","Nav","MapContainer","StyledBtn","ShowLogg","Api","initalValue","loadScooters","content","initalValueLoadCitys","loadCity","initalValueLoadStations","loadStation","Admin","ifToShowScooter","setIfToShowScooter","ifToShowCity","setIfToShowCity","ifToShowLoadStations","setIfToShowLoadStations","interval","setInterval","res","getAllScooters","prevState","error","console","log","clearInterval","getScooters","getCitys","getLoadStations"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\n//components\nimport Map from '../../components/Map/index';\n\n//Styles\nimport {\n\tContainer, \n\tNav, \n\tMapContainer, \n\tStyledBtn, \n\tShowLogg\n} from './Form.styles';\nimport Api from '../../api';\n/* link / navLinkto (to) prop använder invoice number för att ladda sidan med\n  rätt id\n*/\n\nlet initalValue = {\n\tloadScooters: false,\n\tcontent: []\n}\nlet initalValueLoadCitys = {\n\tloadCity: false,\n}\nlet initalValueLoadStations = {\n\tloadStation: false,\n}\n\nconst Admin = () => {\n\tconst [ifToShowScooter, setIfToShowScooter] = useState(initalValue);\n\tconst [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys);\n\tconst [ifToShowLoadStations, setIfToShowLoadStations] = useState(initalValueLoadStations);\n\n\t// hämtar ju alla scootrar här varje gång man trycker.\n\t// Kanske onödigt? Samtidigt vill man få det uppdaterat?\n\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval (async () => {\n\t\t\ttry {\n\t\t\t\tlet res = await Api.getAllScooters();  \n\t\t\t\tsetIfToShowScooter(prevState => ({\n\t\t\t\t\tloadScooters: !prevState.loadScooters,\n\t\t\t\t\tcontent: res\n\t\t\t\t}));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t}\n\t\t\tconsole.log(\"HEJ\")\n\t\t}, 10000);\n\t\treturn () => clearInterval(interval);\n\t\t}, []);\n\t\n\n\n\n\tconst getScooters = async() => {\n        try {\n            let res = await Api.getAllScooters();  \n\t\t\tsetIfToShowScooter(prevState => ({\n\t\t\t\tloadScooters: !prevState.loadScooters,\n\t\t\t\tcontent: res\n\t\t\t}));\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n    }\n\tconst getCitys = async() => {\n\t\tsetIfToShowCity(prevState => ({\n\t\t\tloadCity: !prevState.loadCity,\n\t\t}));\n\t}\n\n\tconst getLoadStations = async() => {\n\t\tsetIfToShowLoadStations(prevState => ({\n\t\t\tloadStation: !prevState.loadStation,\n\t\t}));\n\t}\n\n\nreturn (\n\t<Container>\n\t\t<Nav>\n\t\t\t<StyledBtn onClick= {getScooters}> Cyklar </StyledBtn>\n\t\t\t<StyledBtn onClick= {getCitys}> Städer </StyledBtn>\n\t\t\t<StyledBtn onClick= {getLoadStations}> Laddstationer </StyledBtn>\n\t\t\t<StyledBtn onClick= {setInterval}> Visa live </StyledBtn>\n\t\t</Nav>\n\t\t<MapContainer>\n\t\t\t<Map ifToShowScooter={ifToShowScooter} ifToShowCity={ifToShowCity} ifToShowLoadStations={ifToShowLoadStations} ></Map>\n\t\t</MapContainer>\n\t</Container>\n  )\n}\n\nexport default Admin\n\n"]},"metadata":{},"sourceType":"module"}