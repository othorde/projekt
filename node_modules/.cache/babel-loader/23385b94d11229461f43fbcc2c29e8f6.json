{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Payment\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\"; //components\n\nimport User from \"../../components/User/index.js\";\nimport Api from \"../../api.js\";\nimport AppContext from \"../../AppContext.js\"; //styles\n\nimport { Content, Delimiter, StylePayment, StylePayment2, Subscription } from \"./Form.styles.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  showMsgSubs: false,\n  showMsgOnePay: false,\n  msg: \"\"\n};\n\nconst Payment = () => {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [msgForUser, setMsgForUser] = useState(initialValue);\n  const [subscription, setSubscription] = useState(0);\n  const [onePayment, setOnePayment] = useState(0);\n  const [IfUserHasSubsc, setIfUserHasSubsc] = useState(0);\n  const [msgForUnsubscribe, setMsgForUnsubscribe] = useState(\"\");\n\n  const checkIfSubscription = async () => {//setIfUserHasSubs(myContext.user.subscription)\n    //setIfUserHasSubsc()\n  };\n\n  let userName = myContext.user.username;\n\n  const handleUnSubscribe = async () => {\n    let result = await Api.updateUserSubscribe();\n\n    if (result === \"Ok\") {\n      setMsgForUnsubscribe(\"Prenumerationen avslutad \");\n    } else {\n      setMsgForUnsubscribe(\"Prenumerationen gick ej att avsluta \");\n    }\n  }; // KOLLA vad meddelandena blir från backend\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let showMsgSubs = false;\n    let showMsgOnePay = false;\n    let msg = \"\";\n    let result;\n\n    if (subscription !== 0) {\n      showMsgSubs = true;\n      result = await Api.updateUserSubsc(subscription, userName);\n      msg = \"Din prenumeration är nu godkänd\";\n      setIfUserHasSubsc(true);\n    } else if (onePayment) {\n      showMsgOnePay = true;\n\n      if (onePayment) {\n        result = await Api.updateUserFunds(onePayment, userName);\n        msg = \"Din insättning har gått igenom\";\n      }\n    }\n\n    if (result != \"OK\") {\n      msg = \"Något gick fel... testa igen senare\";\n    }\n\n    setMsgForUser({\n      showMsgSubs: showMsgSubs,\n      showMsgOnePay: showMsgOnePay,\n      msg: msg\n    });\n    setOnePayment(0);\n    setSubscription(0);\n  };\n\n  useEffect(() => {\n    checkIfSubscription();\n  }, [setMsgForUser, msgForUser]);\n  return /*#__PURE__*/_jsxDEV(Content, {\n    children: [/*#__PURE__*/_jsxDEV(StylePayment, {\n      children: [msgForUser.showMsgOnePay ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msgForUser.msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Minsta m\\xF6jliga ins\\xE4ttning (100:-) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 68\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Belopp att s\\xE4tta in\",\n            type: \"number\",\n            name: \"onepayment\",\n            required: true,\n            value: onePayment || \"\",\n            onChange: e => setOnePayment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Delimiter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"S\\xE4tt in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), IfUserHasSubsc ?\n    /*#__PURE__*/\n\n    /* Om det redan finns en prenumeration */\n    _jsxDEV(StylePayment, {\n      children: [\"Du har en pågående prenumeration \", /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUnSubscribe,\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(Delimiter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Avsluta Prenumeration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n\n    /*  Finns ej någon prenumeration */\n    _jsxDEV(StylePayment2, {\n      children: [msgForUser.showMsgSubs ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msgForUser.msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 47\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Prenumerationen kan avslutas n\\xE4rsomhelst  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 74\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Belopp per m\\xE5nad\",\n            type: \"number\",\n            name: \"subscription\",\n            required: true,\n            value: subscription || \"\",\n            onChange: e => setSubscription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Delimiter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Prenumerera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Payment, \"ZdFv4FNmZCFSVA2UXLC7kMIdxZU=\");\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Payment/index.js"],"names":["React","useState","useContext","useEffect","User","Api","AppContext","Content","Delimiter","StylePayment","StylePayment2","Subscription","initialValue","showMsgSubs","showMsgOnePay","msg","Payment","myContext","msgForUser","setMsgForUser","subscription","setSubscription","onePayment","setOnePayment","IfUserHasSubsc","setIfUserHasSubsc","msgForUnsubscribe","setMsgForUnsubscribe","checkIfSubscription","userName","user","username","handleUnSubscribe","result","updateUserSubscribe","handleSubmit","event","preventDefault","updateUserSubsc","updateUserFunds","e","target","value"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\n//components\nimport User from \"../../components/User/index.js\";\nimport Api from \"../../api.js\";\nimport AppContext from \"../../AppContext.js\";\n//styles\nimport { Content, Delimiter, StylePayment, StylePayment2, Subscription} from \"./Form.styles.js\";\n\nconst initialValue = {\n    showMsgSubs: false,\n    showMsgOnePay: false,\n    msg: \"\"\n}\n\nconst Payment = () => {\n    const myContext = useContext(AppContext);\n    const [msgForUser, setMsgForUser] = useState(initialValue);\n    const [subscription, setSubscription] = useState(0);\n    const [onePayment, setOnePayment] = useState(0);\n    const [IfUserHasSubsc, setIfUserHasSubsc] = useState(0);\n    const [msgForUnsubscribe, setMsgForUnsubscribe] = useState(\"\");\n\n\n    const checkIfSubscription = async() => {\n        //setIfUserHasSubs(myContext.user.subscription)\n        //setIfUserHasSubsc()\n    }\n\n    let userName = myContext.user.username;\n\n\n    const handleUnSubscribe = async() => {\n       let result = await Api.updateUserSubscribe();\n       if(result === \"Ok\") {\n           setMsgForUnsubscribe(\"Prenumerationen avslutad \")\n       } else {\n            setMsgForUnsubscribe(\"Prenumerationen gick ej att avsluta \")\n       }\n    }\n\n    // KOLLA vad meddelandena blir från backend\n    const handleSubmit = async (event)  => {\n        event.preventDefault();\n\n        let showMsgSubs = false;\n        let showMsgOnePay = false;\n        let msg = \"\";\n        let result;\n\n        if (subscription !== 0) {\n            showMsgSubs = true;\n            result = await Api.updateUserSubsc(subscription, userName);\n            msg = \"Din prenumeration är nu godkänd\"\n            setIfUserHasSubsc(true);\n\n        } else if (onePayment) {\n            showMsgOnePay = true;\n            if (onePayment) {\n                result = await Api.updateUserFunds(onePayment, userName);\n                msg = \"Din insättning har gått igenom\";\n            }\n        } \n        if (result != \"OK\") {\n            msg = \"Något gick fel... testa igen senare\"\n        } \n        setMsgForUser({ \n            showMsgSubs: showMsgSubs,\n            showMsgOnePay: showMsgOnePay,\n            msg: msg,\n        })\n        setOnePayment(0);\n        setSubscription(0);\n    }\n\n    useEffect(() => {\n        checkIfSubscription()\n    }, [setMsgForUser, msgForUser])\n\n\treturn (\n        <Content>\n            <StylePayment>\n            {msgForUser.showMsgOnePay ? <p>{msgForUser.msg}</p> : (<p> Minsta möjliga insättning (100:-) </p>)}\n            <form onSubmit={handleSubmit} className = \"register\">\n                <label>\n                <input\n                    placeholder=\"Belopp att sätta in\"\n                    type=\"number\" \n                    name=\"onepayment\"\n                    required\n                    value={onePayment || \"\"} \n                    onChange={(e) => setOnePayment(e.target.value)}\n                />\n                </label>\n                <Delimiter></Delimiter>\n                <input type=\"submit\" value=\"Sätt in\" />\n            </form>\n            </StylePayment>\n\n            {IfUserHasSubsc ? ( /* Om det redan finns en prenumeration */\n            \n                <StylePayment>\n                { \"Du har en pågående prenumeration \"}\n                <form onSubmit={handleUnSubscribe} className = \"register\">\n                    <Delimiter></Delimiter>\n                    <input type=\"submit\" value=\"Avsluta Prenumeration\" />\n                </form>\n                </StylePayment>\n            ):(  /*  Finns ej någon prenumeration */\n                <StylePayment2>\n                    {msgForUser.showMsgSubs ? <p>{msgForUser.msg}</p> : (<p> Prenumerationen kan avslutas närsomhelst  </p>)}\n                    <form onSubmit={handleSubmit} className = \"register\">\n                        <label >\n                        <input\n                            placeholder=\"Belopp per månad\"\n                            type=\"number\" \n                            name=\"subscription\"\n                            required\n                            value={subscription || \"\"} \n                            onChange={(e) => setSubscription(e.target.value)}\n                        />\n                        </label>\n                        <Delimiter></Delimiter>\n                        <input type=\"submit\" value=\"Prenumerera\" />\n                    </form>\n                </StylePayment2>\n                )\n            }\n        </Content>\n\t);\n}\n\nexport default Payment\n\n"]},"metadata":{},"sourceType":"module"}