{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  const [cityFromApi, setCityFromApi] = useState(0);\n  let res;\n  useEffect(async () => {\n    if (!res || res.length === 0) {\n      let res = await Api.getAllCitys();\n      console.log(\"HEJsadasdddddddddddddddddd\");\n      setCityFromApi(res);\n    }\n  }, [mapRef]); // var cityname;\n  // const map = mapRef.current.map;\n  // const maps = mapRef.current.maps;\n  // res.map(cityCoords => {\n  //     cityCoords.charging_posts.map(loadStations => {\n  //         console.log(loadStations)\n  //         let polyGon = \n  //             ([cityCoords.position.polygonePart1,\n  //                 cityCoords.position.polygonePart2,\n  //                 cityCoords.position.polygonePart3,\n  //                 cityCoords.position.polygonePart4\n  //             ]);\n  //         cityname = new maps.Polygon({\n  //             paths: polyGon,\n  //             strokeColor: \"yellow\",\n  //             strokeOpacity: 0.9,\n  //             strokeWeight: 2,\n  //             fillColor: \"transparent\",\n  //             fillOpacity: 0.35,\n  //             });\n  //     })\n  //     // cityname.addListener('click', (event) => {\n  //     //     console.log(\"HEJ\", cityCoords)\n  //     //     setPopupInfo({\t\n  //     //         showBike: false,\n  //     //         showCity: true,\n  //     //         showLocation: false,\n  //     //         content: cityCoords\n  //     //     })\n  //     // });\n  //     cityname.setMap(map);\n  //     setLoadStationObject(oldArray => [...oldArray, cityname]);\n  //     })\n\n  return {\n    LoadStationObject\n  };\n};\n\n_s(useLoadStationsForMap, \"orOzS4W2qzM1tLGMuxMHfxaNC+w=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","cityFromApi","setCityFromApi","res","length","getAllCitys","console","log"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAElD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AACG,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIS,GAAJ;AAEAR,EAAAA,SAAS,CAAE,YAAa;AACpB,QAAG,CAACQ,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA1B,EAA4B;AACxB,UAAID,GAAG,GAAG,MAAMP,GAAG,CAACS,WAAJ,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAL,MAAAA,cAAc,CAACC,GAAD,CAAd;AACH;AACJ,GANQ,EAMN,CAACL,MAAD,CANM,CAAT,CAN+C,CAiB3C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAAO;AAACC,IAAAA;AAAD,GAAP;AAEP,CAxDD;;GAAMF,qB;;AAyDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n    const [cityFromApi, setCityFromApi] = useState(0);\n    let res;\n    \n    useEffect( async () =>  {\n        if(!res || res.length === 0){\n            let res = await Api.getAllCitys();\n            console.log(\"HEJsadasdddddddddddddddddd\")\n            setCityFromApi(res)\n        }\n    }, [mapRef]);\n\n\n   \n\n        // var cityname;\n        // const map = mapRef.current.map;\n        // const maps = mapRef.current.maps;\n        // res.map(cityCoords => {\n\n        //     cityCoords.charging_posts.map(loadStations => {\n        //         console.log(loadStations)\n\n        //         let polyGon = \n        //             ([cityCoords.position.polygonePart1,\n        //                 cityCoords.position.polygonePart2,\n        //                 cityCoords.position.polygonePart3,\n        //                 cityCoords.position.polygonePart4\n        //             ]);\n        //         cityname = new maps.Polygon({\n        //             paths: polyGon,\n        //             strokeColor: \"yellow\",\n        //             strokeOpacity: 0.9,\n        //             strokeWeight: 2,\n        //             fillColor: \"transparent\",\n        //             fillOpacity: 0.35,\n        //             });\n        //     })\n        //     // cityname.addListener('click', (event) => {\n        //     //     console.log(\"HEJ\", cityCoords)\n        //     //     setPopupInfo({\t\n        //     //         showBike: false,\n        //     //         showCity: true,\n        //     //         showLocation: false,\n        //     //         content: cityCoords\n        //     //     })\n        //     // });\n        //     cityname.setMap(map);\n        //     setLoadStationObject(oldArray => [...oldArray, cityname]);\n\n        //     })\n        \n        return {LoadStationObject};\n\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}