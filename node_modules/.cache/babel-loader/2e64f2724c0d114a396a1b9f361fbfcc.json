{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\n\nconst LoadCitys = async mapRef => {\n  _s();\n\n  let initalValueLoadStations = {\n    getStations: false,\n    content: []\n  };\n  const [loadingCoordinates, setLoadingCoordinates] = useState(initalValueLoadStations);\n\n  try {\n    let res = await Api.getAllCitys();\n    setLoadingCoordinates(prevState => ({\n      getStations: !prevState.getStations,\n      content: res\n    })); // setLoadingCoordinates(res)\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (loadingCoordinates.content.length > 0 && mapRef.map !== null) {\n    var cityname;\n    const map = mapRef.map;\n    const maps = mapRef.maps;\n    loadingCoordinates.content.map(coords => {\n      cityname = coords.city;\n      let polyGon = [coords.position.polygonePart1, coords.position.polygonePart2, coords.position.polygonePart3, coords.position.polygonePart4];\n\n      if (props.getStations === true) {\n        cityname = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"black\",\n          strokeOpacity: 0.2,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        cityname.setMap(map);\n        cityname.onClick = {\n          handleToggle() {\n            console.log(\"HEasdasaddsaJ\");\n          }\n\n        };\n      }\n    });\n  }\n};\n\n_s(LoadCitys, \"bjlngm73i2f7XRBgBbRUibu1zCI=\");\n\n_c = LoadCitys;\nexport default LoadCitys; //  fungerar som REACt component till kartan\n// import React from \"react\";\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n// export default PopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadCitys\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/helperFunctions/loadCitys.js"],"names":["React","useState","LoadCitys","mapRef","initalValueLoadStations","getStations","content","loadingCoordinates","setLoadingCoordinates","res","Api","getAllCitys","prevState","error","console","log","length","map","cityname","maps","coords","city","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","props","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","onClick","handleToggle"],"mappings":";;AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA+B,OAA/B;;AAEA,MAAMC,SAAS,GAAG,MAAOC,MAAP,IAAkB;AAAA;;AAGnC,MAAIC,uBAAuB,GAAG;AAC7BC,IAAAA,WAAW,EAAE,KADgB;AAE7BC,IAAAA,OAAO,EAAE;AAFoB,GAA9B;AAIA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAACG,uBAAD,CAA5D;;AAGA,MAAI;AACH,QAAIK,GAAG,GAAG,MAAMC,GAAG,CAACC,WAAJ,EAAhB;AACAH,IAAAA,qBAAqB,CAACI,SAAS,KAAK;AACnCP,MAAAA,WAAW,EAAE,CAACO,SAAS,CAACP,WADW;AAEnCC,MAAAA,OAAO,EAAEG;AAF0B,KAAL,CAAV,CAArB,CAFG,CAOH;AACA,GARD,CAQE,OAAOI,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;;AAGD,MAAIN,kBAAkB,CAACD,OAAnB,CAA2BU,MAA3B,GAAoC,CAApC,IAAyCb,MAAM,CAACc,GAAP,KAAe,IAA5D,EAAkE;AACjE,QAAIC,QAAJ;AACA,UAAMD,GAAG,GAAGd,MAAM,CAACc,GAAnB;AACA,UAAME,IAAI,GAAGhB,MAAM,CAACgB,IAApB;AAEAZ,IAAAA,kBAAkB,CAACD,OAAnB,CAA2BW,GAA3B,CAA+BG,MAAM,IACpC;AACAF,MAAAA,QAAQ,GAAGE,MAAM,CAACC,IAAlB;AACA,UAAIC,OAAO,GACT,CAACF,MAAM,CAACG,QAAP,CAAgBC,aAAjB,EACAJ,MAAM,CAACG,QAAP,CAAgBE,aADhB,EAEAL,MAAM,CAACG,QAAP,CAAgBG,aAFhB,EAGAN,MAAM,CAACG,QAAP,CAAgBI,aAHhB,CADF;;AAOA,UAAIC,KAAK,CAACvB,WAAN,KAAsB,IAA1B,EAAgC;AAC/Ba,QAAAA,QAAQ,GAAG,IAAIC,IAAI,CAACU,OAAT,CAAiB;AAC3BC,UAAAA,KAAK,EAAER,OADoB;AAE3BS,UAAAA,WAAW,EAAE,OAFc;AAG3BC,UAAAA,aAAa,EAAE,GAHY;AAI3BC,UAAAA,YAAY,EAAE,CAJa;AAK3BC,UAAAA,SAAS,EAAE,aALgB;AAM3BC,UAAAA,WAAW,EAAE;AANc,SAAjB,CAAX;AAQAjB,QAAAA,QAAQ,CAACkB,MAAT,CAAgBnB,GAAhB;AACAC,QAAAA,QAAQ,CAACmB,OAAT,GAAiB;AAACC,UAAAA,YAAY,GAAG;AAChCxB,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;;AAFgB,SAAjB;AAIC;AACD,KAzBF;AA0BC;AACF,CAvDD;;GAAMb,S;;KAAAA,S;AAwDN,eAAeA,SAAf,C,CAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import {React, useState } from \"react\";\n\nconst LoadCitys = async (mapRef) => {\n\n\n\tlet initalValueLoadStations = {\n\t\tgetStations: false,\n\t\tcontent: []\n\t}\n\tconst [loadingCoordinates, setLoadingCoordinates] = useState(initalValueLoadStations);\n\n\n\ttry {\n\t\tlet res = await Api.getAllCitys();\n\t\tsetLoadingCoordinates(prevState => ({\n\t\t\tgetStations: !prevState.getStations,\n\t\t\tcontent: res\n\t\t\t}));\n\n\t\t// setLoadingCoordinates(res)\n\t} catch (error) {\n\t\tconsole.log(error)\n\t}\n    \n\n\tif (loadingCoordinates.content.length > 0 && mapRef.map !== null) {\n\t\tvar cityname;\n\t\tconst map = mapRef.map;\n\t\tconst maps = mapRef.maps;\n\n\t\tloadingCoordinates.content.map(coords =>\n\t\t\t{\n\t\t\tcityname = coords.city\n\t\t\tlet polyGon = \n\t\t\t\t([coords.position.polygonePart1,\n\t\t\t\t\tcoords.position.polygonePart2,\n\t\t\t\t\tcoords.position.polygonePart3,\n\t\t\t\t\tcoords.position.polygonePart4\n\t\t\t\t]);\n\n\t\t\tif (props.getStations === true) {\n\t\t\t\tcityname = new maps.Polygon({\n\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\tstrokeColor: \"black\",\n\t\t\t\t\tstrokeOpacity: 0.2,\n\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\tfillColor: \"transparent\",\n\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\t});\n\t\t\t\tcityname.setMap(map);\n\t\t\t\tcityname.onClick={handleToggle() {\n\t\t\t\t\tconsole.log(\"HEasdasaddsaJ\")\n\t\t\t\t}}\n\n\t\t\t\t}\n\t\t\t})\n\t\t}\n}\nexport default LoadCitys\n\n\n\n//  fungerar som REACt component till kartan\n\n// import React from \"react\";\n\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n\n// export default PopUp;\n\n"]},"metadata":{},"sourceType":"module"}