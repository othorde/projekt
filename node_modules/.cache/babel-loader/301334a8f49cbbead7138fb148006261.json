{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\routes\\\\Admin\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //components\n\nimport Map from '../../components/Map/index'; //Styles\n\nimport { Container, Nav, MapContainer, StyledBtn } from './Form.styles';\nimport Api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initalValue = {\n  loadScooters: false,\n  content: []\n};\nlet initalValueLoadCitys = {\n  loadCity: false\n};\nlet initalValueLoadStations = {\n  loadStation: false\n};\nlet initalValueParkingZone = {\n  loadParkingZone: false\n};\n/* Admin hämtar scootrar var 10 sekund. Visar också tre knappar för om användaren vill se städer, \n\tladdstationer eller parkingszoner på kartan */\n\nconst Admin = () => {\n  _s();\n\n  const [ifToShowScooter, setIfToShowScooter] = useState(initalValue);\n  const [scooterError, setScooterError] = useState(false);\n  const [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys);\n  const [ifToShowLoadStations, setIfToShowLoadStations] = useState(initalValueLoadStations);\n  const [ifToShowParkingZone, setIfToShowParkingZone] = useState(initalValueParkingZone);\n  useEffect(() => {\n    getScooters();\n    const interval = setInterval(() => {\n      getScooters();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getScooters = async () => {\n    try {\n      let res = await Api.getAllScooters();\n      setIfToShowScooter({\n        loadScooters: true,\n        content: res\n      });\n    } catch (error) {\n      setScooterError(true);\n    }\n  };\n  /* Dessa tre funktionerna togglar state, vilket tar bort eller lägger till elementen på kartan */\n\n\n  const getCitys = async () => {\n    setIfToShowCity(prevState => ({\n      loadCity: !prevState.loadCity\n    }));\n  };\n\n  const getLoadStations = async () => {\n    setIfToShowLoadStations(prevState => ({\n      loadStation: !prevState.loadStation\n    }));\n  };\n\n  const getParkingZone = async () => {\n    setIfToShowParkingZone(prevState => ({\n      loadParkingZone: !prevState.loadParkingZone\n    }));\n  };\n  /* skickar states till map, så map vet vad som ska visas */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      children: [/*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getCitys,\n        children: \" St\\xE4der \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getLoadStations,\n        children: \" Laddstationer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(StyledBtn, {\n        onClick: getParkingZone,\n        children: \"  Parkeringszoner \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        ifToShowScooter: (ifToShowScooter, scooterError),\n        ifToShowCity: ifToShowCity,\n        ifToShowLoadStations: ifToShowLoadStations,\n        ifToShowParkingZone: ifToShowParkingZone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Admin, \"noXPjSHO13imUPrOQlp0mu89NaY=\");\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/routes/Admin/index.js"],"names":["React","useState","useEffect","Map","Container","Nav","MapContainer","StyledBtn","Api","initalValue","loadScooters","content","initalValueLoadCitys","loadCity","initalValueLoadStations","loadStation","initalValueParkingZone","loadParkingZone","Admin","ifToShowScooter","setIfToShowScooter","scooterError","setScooterError","ifToShowCity","setIfToShowCity","ifToShowLoadStations","setIfToShowLoadStations","ifToShowParkingZone","setIfToShowParkingZone","getScooters","interval","setInterval","clearInterval","res","getAllScooters","error","getCitys","prevState","getLoadStations","getParkingZone"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\n//components\nimport Map from '../../components/Map/index';\n\n//Styles\nimport {\n\tContainer, \n\tNav, \n\tMapContainer, \n\tStyledBtn, \n} from './Form.styles';\nimport Api from '../../api';\n\nlet initalValue = {\n\tloadScooters: false,\n\tcontent: []\n}\nlet initalValueLoadCitys = {\n\tloadCity: false,\n}\nlet initalValueLoadStations = {\n\tloadStation: false,\n}\n\nlet initalValueParkingZone = {\n\tloadParkingZone: false,\n}\n\n/* Admin hämtar scootrar var 10 sekund. Visar också tre knappar för om användaren vill se städer, \n\tladdstationer eller parkingszoner på kartan */\nconst Admin = () => {\n\tconst [ifToShowScooter, setIfToShowScooter] = useState(initalValue);\n\tconst [scooterError, setScooterError] = useState(false);\n\tconst [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys);\n\tconst [ifToShowLoadStations, setIfToShowLoadStations] = useState(initalValueLoadStations);\n\tconst [ifToShowParkingZone, setIfToShowParkingZone] = useState(initalValueParkingZone);\n\n\tuseEffect(()=>{\n    \n\t\tgetScooters()\n\t\tconst interval=setInterval(()=>{\n\t\t\tgetScooters()\n\t\t }, 10000)\n\t\t   \n\t\t return()=>clearInterval(interval)\n\t},[])\n\n\tconst getScooters = async() => {\n        try {\n            let res = await Api.getAllScooters();  \n\t\t\tsetIfToShowScooter({\n\t\t\t\tloadScooters: true,\n\t\t\t\tcontent: res\n\t\t\t});\n        } catch (error) {\n\t\t\tsetScooterError(true)\n        }\n    }\n\t/* Dessa tre funktionerna togglar state, vilket tar bort eller lägger till elementen på kartan */\n\tconst getCitys = async() => {\n\t\tsetIfToShowCity(prevState => ({\n\t\t\tloadCity: !prevState.loadCity,\n\t\t}));\n\t}\n\n\tconst getLoadStations = async() => {\n\t\tsetIfToShowLoadStations(prevState => ({\n\t\t\tloadStation: !prevState.loadStation,\n\t\t}));\n\t}\n\n\tconst getParkingZone = async() => {\n\t\tsetIfToShowParkingZone(prevState => ({\n\t\t\tloadParkingZone: !prevState.loadParkingZone,\n\t\t}));\n\t}\n\n\t/* skickar states till map, så map vet vad som ska visas */\n\treturn (\n\t\t<Container>\n\t\t\t<Nav>\n\t\t\t\t<StyledBtn onClick= {getCitys}> Städer </StyledBtn>\n\t\t\t\t<StyledBtn onClick= {getLoadStations}> Laddstationer </StyledBtn>\n\t\t\t\t<StyledBtn onClick= {getParkingZone}>  Parkeringszoner </StyledBtn>\n\t\t\t</Nav>\n\t\t\t<MapContainer>\n\t\t\t\t<Map \n\t\t\t\t\tifToShowScooter={ifToShowScooter, scooterError}\n\t\t\t\t\tifToShowCity={ifToShowCity} \n\t\t\t\t\tifToShowLoadStations={ifToShowLoadStations} \n\t\t\t\t\tifToShowParkingZone={ifToShowParkingZone} >\n\t\t\t\t</Map>\n\t\t\t</MapContainer>\n\t\t</Container>\n\t)\n}\n\nexport default Admin\n\n"]},"metadata":{},"sourceType":"module"}