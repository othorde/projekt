{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\loggin\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Wrapper } from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\nimport Loader from '../loader/loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nexport default function Login() {\n  _s();\n\n  const [data, setData] = useState({\n    errorMessage: \"\",\n    isLoading: false\n  });\n  const [loggedInUser, setLoggedInUser] = useState(Boolean);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\"); // If Github API returns the code parameter\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data,\n        isLoading: true\n      });\n      const requestData = {\n        code: newUrl[1]\n      };\n      const proxy_url = \"http://localhost:1337/api/authenticate/authenticate\";\n\n      async function getGitInfo() {\n        const defaultConfig = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        };\n\n        try {\n          const endpoint = `${proxy_url}`;\n          let res;\n          let result;\n          res = await (await fetch(endpoint, { ...defaultConfig,\n            body: JSON.stringify({\n              code: requestData.code\n            })\n          })).json();\n          console.log(res); // if (res && res.login) {\n          // \tresult = await Api.logginUserViaGit(res.login)\n          // }\n\n          setLoggedInUser(true);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n\n      getGitInfo();\n    }\n  }, [data]);\n  useEffect(() => {\n    if (loggedInUser === true) {\n      navigate(\"/login/home\");\n    }\n  }, [loggedInUser, setLoggedInUser]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"JSSceNLD4vZ1ONV4kMV9d4Vgr5M=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/loggin/index.js"],"names":["React","useState","useEffect","useContext","useNavigate","Wrapper","AppContext","Api","Loader","require","config","Login","data","setData","errorMessage","isLoading","loggedInUser","setLoggedInUser","Boolean","navigate","url","window","location","href","hasCode","includes","newUrl","split","history","pushState","requestData","code","proxy_url","getGitInfo","defaultConfig","method","headers","endpoint","res","result","fetch","body","JSON","stringify","json","console","log","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;AAGAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC;AAAEa,IAAAA,YAAY,EAAE,EAAhB;AAAoBC,IAAAA,SAAS,EAAE;AAA/B,GAAD,CAAhC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAACiB,OAAD,CAAhD;AACA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMkB,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACA,UAAMC,OAAO,GAAGJ,GAAG,CAACK,QAAJ,CAAa,QAAb,CAAhB,CAHc,CAKd;;AACA,QAAID,OAAJ,EAAa;AACX,YAAME,MAAM,GAAGN,GAAG,CAACO,KAAJ,CAAU,QAAV,CAAf;AACAN,MAAAA,MAAM,CAACO,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,IAA7B,EAAmCH,MAAM,CAAC,CAAD,CAAzC;AACAb,MAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWG,QAAAA,SAAS,EAAE;AAAtB,OAAD,CAAP;AAEA,YAAMe,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD;AADM,OAApB;AAKA,YAAMM,SAAS,GAAG,qDAAlB;;AACE,qBAAeC,UAAf,GAA4B;AAC1B,cAAMC,aAAa,GAAG;AACpBC,UAAAA,MAAM,EAAE,MADY;AAEpBC,UAAAA,OAAO,EAAE;AACP,4BAAgB,kBADT;AAEH,2CAA+B;AAF5B;AAFW,SAAtB;;AAQA,YAAI;AACF,gBAAMC,QAAQ,GAAI,GAAEL,SAAU,EAA9B;AACA,cAAIM,GAAJ;AACT,cAAIC,MAAJ;AACSD,UAAAA,GAAG,GAAG,MAAM,CACR,MAAME,KAAK,CAACH,QAAD,EAAW,EAClB,GAAGH,aADe;AAElBO,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBZ,cAAAA,IAAI,EAAED,WAAW,CAACC;AADD,aAAf;AAFY,WAAX,CADH,EAMJa,IANI,EAAZ;AAQAC,UAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EAZE,CAaX;AACA;AACA;;AACArB,UAAAA,eAAe,CAAC,IAAD,CAAf;AAEM,SAlBC,CAkBA,OAAO8B,KAAP,EAAc;AACZF,UAAAA,OAAO,CAACC,GAAR,CAAaC,KAAb;AACH;AAEF;;AACDd,MAAAA,UAAU;AACX;AACF,GAnDQ,EAmDN,CAACrB,IAAD,CAnDM,CAAT;AAqDAV,EAAAA,SAAS,CAAC,MAAM;AACjB,QAAGc,YAAY,KAAK,IAApB,EAA0B;AACzBG,MAAAA,QAAQ,CAAC,aAAD,CAAR;AACA;AACC,GAJQ,EAIN,CAACH,YAAD,EAAeC,eAAf,CAJM,CAAT;AASA,sBACE,QAAC,OAAD;AAAA,2BAEI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA1EuBN,K;UAGLP,W;;;KAHKO,K","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {Wrapper} from \"./Form.styles\";\nimport { AppContext } from \"../../AppContext\";\nimport Api from \"../../api\";\nimport Loader from '../loader/loader'\n\n\nrequire('dotenv').config()\n\n\nexport default function Login() {\n  const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n  const [loggedInUser, setLoggedInUser] = useState(Boolean);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // If Github API returns the code parameter\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data, isLoading: true });\n      \n      const requestData = {\n        code: newUrl[1]\n      };\n\n\n      const proxy_url = \"http://localhost:1337/api/authenticate/authenticate\";\n        async function getGitInfo() {\n          const defaultConfig = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n                  \"Access-Control-Allow-Origin\": \"*\"\n            },\n          };\n\n          try {\n            const endpoint = `${proxy_url}`;\n            let res;\n\t\t\tlet result;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfig,\n                    body: JSON.stringify({\n                        code: requestData.code,\n                    })\n                })).json();\n\n            console.log(res)\n\t\t\t// if (res && res.login) {\n\t\t\t// \tresult = await Api.logginUserViaGit(res.login)\n\t\t\t// }\n\t\t\tsetLoggedInUser(true)\n\n        } catch (error) {\n            console.log((error))\n        }\n\n      }\n      getGitInfo()\n    }\n  }, [data]);\n\n  useEffect(() => {\n\tif(loggedInUser === true) {\n\t\tnavigate(\"/login/home\")\n\t}\n  }, [loggedInUser, setLoggedInUser])\n\n\n\n\n  return (\n    <Wrapper>\n   \n        <Loader></Loader>\n\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}