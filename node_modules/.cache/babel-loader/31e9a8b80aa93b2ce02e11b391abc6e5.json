{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\History\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\"; //components\n\nimport MapForUser from '../../components/MapForUser/index';\nimport Loader from '../../components/Loader'; // hook\n\nimport { useFetchAUser } from '../../Hooks/useFetchAUser';\nimport { useFetchAllCities } from '../../Hooks/useFetchAllCities'; //styles\n\nimport { Container, Main, UserHistory, MapContainer } from './Form.styles'; //other\n\nimport { checkIfCoordInParkingZone, checkIfCoordInChargingPost } from '../../helperfunction/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  showMap: false,\n  startCoord: \"\",\n  stopCoord: \"\"\n};\n/* Tar props, använder id för att hämta info om användare.  */\n\nconst History = props => {\n  _s();\n\n  let user;\n  let id; // Kollar om props finns, skickar in props från två olika komponenter, sätter alltid id.     \n\n  if (props && props.user) {\n    user = props.user;\n    id = props.user.value.id;\n  } else {\n    id = props.customer.id;\n  }\n\n  const {\n    aUser,\n    aUserMessage,\n    aUserLoading\n  } = useFetchAUser(id);\n  const {\n    cities,\n    messageCities,\n    loadingCities\n  } = useFetchAllCities();\n  const [showMapForUser, setShowMapForUser] = useState(initialValue);\n  const [allCharging_posts, setAllCharging_posts] = useState([]); //parkering \n\n  const [allParkingZones, setAllParkingZones] = useState([]); // laddstationer\n\n  const [userInvoice, setUserInvoice] = useState([]); // Alla uppg som visas\n\n  /* Kollar om cities är satt, Loopa städer, sätt värden till state */\n\n  const getAllCities = async () => {\n    cities && cities.forEach(city => {\n      setAllCharging_posts(city.charging_posts);\n      setAllParkingZones(city.parking_zones);\n    });\n  };\n  /* Rendera och kör funktioner vid mount och om något i arrayn ändras */\n\n\n  useEffect(() => {\n    getAllCities();\n    checkAllUsersTrips();\n  }, [user, aUser, aUserMessage, cities, loadingCities, aUserLoading]);\n  /* rita om, om något i arrayn ändras */\n\n  useEffect(() => {}, [setUserInvoice, userInvoice, showMapForUser, setShowMapForUser]);\n  /* \"huvudfunktion\" Loopar igenom alla användarens resor och \n      kontrollerar resedetaljer mha de andra funktionerna\n  */\n\n  function checkAllUsersTrips() {\n    let arrayOfTrips = [];\n    aUser.forEach(trip => {\n      let time = getTimeOfTrip(trip.start.time, trip.stop.time);\n      let tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n      let tripStarted = [trip.start.position.lat, trip.start.position.lng];\n      let startAtParkingZone = checkIfCoordInParkingZone(tripStarted, allParkingZones);\n      let endedAtParkingZone = checkIfCoordInParkingZone(tripEnded, allParkingZones);\n      let startChargePoint = checkIfCoordInChargingPost(tripStarted, allCharging_posts);\n      let endedAtChargePoint = checkIfCoordInChargingPost(tripEnded, allCharging_posts);\n      let prices = checkUserPrices(startAtParkingZone, startChargePoint, endedAtParkingZone, endedAtChargePoint, time);\n      const atrip = {\n        tripId: trip.id,\n        date: trip.date,\n        startTime: trip.start.time,\n        stopTime: trip.stop.time,\n        tripStartedPos: tripStarted,\n        tripEndedPos: tripEnded,\n        startAtParkingZone: startAtParkingZone,\n        endedAtParkingZone: endedAtParkingZone,\n        startChargePoint: startChargePoint,\n        endedAtChargePoint: endedAtChargePoint,\n        timeOfTrip: time,\n        startFee: prices.startFee,\n        timeFee: prices.minFee,\n        discount: prices.discount,\n        totalCost: prices.minFee + prices.startFee\n      };\n      arrayOfTrips.push(atrip);\n    });\n    setUserInvoice(arrayOfTrips);\n  }\n  /* Räknar ut kunds pris */\n\n\n  const checkUserPrices = (startAtParkingZone, startChargePoint, endedAtParkingZone, endedAtChargePoint, time) => {\n    let prices = {\n      startFee: 10,\n      discount: 0,\n      minFee: 2.5 * time\n    };\n    console.log(startAtParkingZone.returned);\n    /* Om en resa startar i fri parkering och slutar på en definerad blir startavg lägre */\n\n    if (startAtParkingZone && startAtParkingZone.returned === false || startChargePoint && startChargePoint.returned === false) {\n      if (endedAtParkingZone && endedAtParkingZone.returned === true || endedAtChargePoint && endedAtChargePoint.returned === true) {\n        prices.startFee = 8;\n        prices.discount = 2;\n        return prices;\n      }\n    }\n    /* startavg högre (12:-) om man friparkerar dvs ej lämnar inom park eller laddstation */\n\n\n    if (endedAtParkingZone && endedAtParkingZone.returned === false && endedAtChargePoint && endedAtChargePoint.returned === false) {\n      prices.startFee = 12;\n      return prices;\n    }\n\n    return prices;\n  };\n  /* Räknar ut tiden för resan, gör om till sekunder \n      subtraherar och dividerar för att få ut minuter\n  */\n\n\n  function getTimeOfTrip(starttime, stoptime) {\n    var arrStarttime = starttime.split(\".\");\n    var arrStoptime = stoptime.split(\".\");\n    arrStarttime[0] = arrStarttime[0] * 60 * 60;\n    arrStarttime[1] = arrStarttime[1] * 60;\n    arrStoptime[0] = arrStoptime[0] * 60 * 60;\n    arrStoptime[1] = arrStoptime[1] * 60;\n    var stopTime = arrStoptime[0] + arrStoptime[1];\n    var startTime = arrStarttime[0] + arrStarttime[1];\n    var time = (stopTime - startTime) / 60;\n    return time;\n  }\n  /*\n      Tar props som visar var användaren trycker på skärmen med musen.\n      Sparar koordinaterna för att visa upp kartan i närheten där man tryckte.\n      Då ser man enkelt kartan vid ex mobilläge.\n      (om props finns)\n  */\n\n\n  function showMap(startCoord, stopCoord, e) {\n    let pageY = e.pageY;\n    props && props.customer && (pageY = pageY - 200);\n    setShowMapForUser({\n      showMap: !showMapForUser.showMap,\n      startCoord: startCoord,\n      stopCoord: stopCoord,\n      pageY: pageY\n    });\n  }\n  /* Retunerar, men visar loading komponent om loadingCities eller aUserLoading ej är klar */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Main, {\n      showMap: showMapForUser.showMap,\n      children: /*#__PURE__*/_jsxDEV(UserHistory, {\n        children: !loadingCities && !aUserLoading ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n            children: \" Historik \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Datum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Starttid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Sluttid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Total tid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Start avgift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Rabatt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Tid avgift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Visa p\\xE5 karta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Total kostnad\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: userInvoice.map(elem => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Datum\",\n                children: [\" \", elem.date, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Starttid\",\n                children: [elem.startTime, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Sluttid\",\n                children: [elem.stopTime, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Total tid\",\n                children: [elem.timeOfTrip, \" min \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Start avgift\",\n                children: [elem.startFee, \":-\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Rabatt\",\n                children: [elem.discount, \":- \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Minutpris\",\n                children: [elem.timeFee, \":- \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Visa p\\xE5 karta\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"button vertical-align:middle\",\n                  onClick: e => showMap(elem.tripStartedPos, elem.tripEndedPos, e),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"F\\xE4rd \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 93\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                \"data-label\": \"Total kostnad\",\n                children: [elem.totalCost, \":- \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this)]\n            }, elem.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Loader, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: aUserMessage || messageCities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 36\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      showMap: showMapForUser.showMap,\n      pageY: showMapForUser.pageY,\n      children: showMapForUser.showMap && /*#__PURE__*/_jsxDEV(MapForUser, {\n        showMapForUser: showMapForUser,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n\n_s(History, \"rESNwoGm9ATJl4vmJamcMEyoKSo=\", false, function () {\n  return [useFetchAUser, useFetchAllCities];\n});\n\n_c = History;\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/History/index.js"],"names":["React","useState","useEffect","MapForUser","Loader","useFetchAUser","useFetchAllCities","Container","Main","UserHistory","MapContainer","checkIfCoordInParkingZone","checkIfCoordInChargingPost","initialValue","showMap","startCoord","stopCoord","History","props","user","id","value","customer","aUser","aUserMessage","aUserLoading","cities","messageCities","loadingCities","showMapForUser","setShowMapForUser","allCharging_posts","setAllCharging_posts","allParkingZones","setAllParkingZones","userInvoice","setUserInvoice","getAllCities","forEach","city","charging_posts","parking_zones","checkAllUsersTrips","arrayOfTrips","trip","time","getTimeOfTrip","start","stop","tripEnded","position","lat","lng","tripStarted","startAtParkingZone","endedAtParkingZone","startChargePoint","endedAtChargePoint","prices","checkUserPrices","atrip","tripId","date","startTime","stopTime","tripStartedPos","tripEndedPos","timeOfTrip","startFee","timeFee","minFee","discount","totalCost","push","console","log","returned","starttime","stoptime","arrStarttime","split","arrStoptime","e","pageY","map","elem"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from \"react\";\n\n//components\nimport MapForUser from '../../components/MapForUser/index'\nimport Loader from '../../components/Loader'\n// hook\nimport {useFetchAUser} from '../../Hooks/useFetchAUser'\nimport {useFetchAllCities} from '../../Hooks/useFetchAllCities'\n//styles\nimport {Container, Main, UserHistory, MapContainer} from './Form.styles'\n//other\nimport {checkIfCoordInParkingZone, checkIfCoordInChargingPost } from '../../helperfunction/helpers'\n\nconst initialValue = {\n    showMap: false,\n    startCoord: \"\",\n    stopCoord: \"\",\n}\n\n/* Tar props, använder id för att hämta info om användare.  */\nconst History = (props)  => {\n\n    let user;\n    let id;\n \n    // Kollar om props finns, skickar in props från två olika komponenter, sätter alltid id.     \n    if(props && props.user) {\n        user = props.user;\n        id = props.user.value.id\n    } else {\n        id = props.customer.id;\n    }\n\n    const {aUser, aUserMessage, aUserLoading} = useFetchAUser(id);\n    const {cities, messageCities, loadingCities} = useFetchAllCities(); \n    const [showMapForUser, setShowMapForUser] = useState(initialValue);\n    const [allCharging_posts, setAllCharging_posts] = useState([]); //parkering \n    const [allParkingZones, setAllParkingZones] = useState([]); // laddstationer\n    const [userInvoice, setUserInvoice] = useState([]); // Alla uppg som visas\n\n\n    /* Kollar om cities är satt, Loopa städer, sätt värden till state */\n    const getAllCities = async () => {\n        cities && cities.forEach(city => {\n            setAllCharging_posts(city.charging_posts);\n            setAllParkingZones(city.parking_zones);\n        });\n    }\n\n    /* Rendera och kör funktioner vid mount och om något i arrayn ändras */\n    useEffect(() => {\n        getAllCities()\n        checkAllUsersTrips()\n    }, [user, aUser, aUserMessage, cities, loadingCities, aUserLoading])\n\n    /* rita om, om något i arrayn ändras */\n    useEffect(() => {\n    }, [setUserInvoice, userInvoice, showMapForUser, setShowMapForUser])\n\n\n    /* \"huvudfunktion\" Loopar igenom alla användarens resor och \n        kontrollerar resedetaljer mha de andra funktionerna\n    */\n        function checkAllUsersTrips() {\n\n            let arrayOfTrips = []\n            aUser.forEach(trip => {\n    \n                let time = getTimeOfTrip(trip.start.time, trip.stop.time)\n                let tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n                let tripStarted = [trip.start.position.lat, trip.start.position.lng];\n                let startAtParkingZone = checkIfCoordInParkingZone(tripStarted, allParkingZones);\n                let endedAtParkingZone = checkIfCoordInParkingZone(tripEnded, allParkingZones);\n                let startChargePoint = checkIfCoordInChargingPost(tripStarted, allCharging_posts);\n                let endedAtChargePoint = checkIfCoordInChargingPost(tripEnded, allCharging_posts);\n                let prices = checkUserPrices(startAtParkingZone, startChargePoint, endedAtParkingZone, endedAtChargePoint, time);\n    \n                const atrip = { \n                    tripId: trip.id,\n                    date: trip.date,\n                    startTime: trip.start.time,\n                    stopTime: trip.stop.time,\n                    tripStartedPos: tripStarted,\n                    tripEndedPos: tripEnded,\n                    startAtParkingZone: startAtParkingZone,\n                    endedAtParkingZone: endedAtParkingZone,\n                    startChargePoint: startChargePoint,\n                    endedAtChargePoint: endedAtChargePoint,\n                    timeOfTrip: time,\n                    startFee: prices.startFee,\n                    timeFee: prices.minFee,\n                    discount: prices.discount,\n                    totalCost: (prices.minFee + prices.startFee)\n                }\n                arrayOfTrips.push(atrip);\n            })\n            setUserInvoice(arrayOfTrips)\n        }\n\n    /* Räknar ut kunds pris */\n    const checkUserPrices = (startAtParkingZone, startChargePoint, endedAtParkingZone, endedAtChargePoint, time) => {\n\n        let prices = {\n            startFee: 10,\n            discount: 0,\n            minFee: 2.5 * time,\n        }\n\n\n        console.log(startAtParkingZone.returned, )\n\n        /* Om en resa startar i fri parkering och slutar på en definerad blir startavg lägre */\n        if((startAtParkingZone && startAtParkingZone.returned === false)\n        || (startChargePoint && startChargePoint.returned === false)) {\n            if ((endedAtParkingZone && endedAtParkingZone.returned === true) \n            || (endedAtChargePoint && endedAtChargePoint.returned === true)) {\n                prices.startFee = 8;\n                prices.discount = 2;\n                return prices\n            }\n        }\n\n        /* startavg högre (12:-) om man friparkerar dvs ej lämnar inom park eller laddstation */\n        if((endedAtParkingZone && endedAtParkingZone.returned === false)\n            && (endedAtChargePoint && endedAtChargePoint.returned === false)) {\n                prices.startFee = 12;\n                return prices\n            }\n        return prices\n    }\n\n    /* Räknar ut tiden för resan, gör om till sekunder \n        subtraherar och dividerar för att få ut minuter\n    */\n    function getTimeOfTrip(starttime, stoptime) {\n\n        var arrStarttime = starttime.split(\".\");\n        var arrStoptime = stoptime.split(\".\"); \n\n        arrStarttime[0] = arrStarttime[0] * 60 * 60;\n        arrStarttime[1] = arrStarttime[1] * 60;\n        arrStoptime[0] = arrStoptime[0] * 60 * 60;\n        arrStoptime[1] = arrStoptime[1] * 60;\n        \n        var stopTime = arrStoptime[0] + arrStoptime[1];\n        var startTime = arrStarttime[0] + arrStarttime[1];\n        var time = (stopTime - startTime) / 60;\n\n        return time\n    }\n\n    /*\n        Tar props som visar var användaren trycker på skärmen med musen.\n        Sparar koordinaterna för att visa upp kartan i närheten där man tryckte.\n        Då ser man enkelt kartan vid ex mobilläge.\n        (om props finns)\n    */\n    function showMap(startCoord, stopCoord, e) {\n\n        let pageY = e.pageY;\n        (props && props.customer) && (pageY = pageY - 200);\n        \n        setShowMapForUser({\n            showMap: !showMapForUser.showMap,\n            startCoord: startCoord,\n            stopCoord: stopCoord,\n            pageY: pageY\n        })\n    }\n\n    /* Retunerar, men visar loading komponent om loadingCities eller aUserLoading ej är klar */\n\treturn (\n        <Container>  \n            <Main showMap = {showMapForUser.showMap} >\n                <UserHistory> \n                    { !loadingCities && !aUserLoading ? (\n                        <table>\n                            <caption> Historik </caption>\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Datum</th>\n                                    <th scope=\"col\">Starttid</th>\n                                    <th scope=\"col\">Sluttid</th>\n                                    <th scope=\"col\">Total tid</th>\n                                    <th scope=\"col\">Start avgift</th>\n                                    <th scope=\"col\">Rabatt</th>\n                                    <th scope=\"col\">Tid avgift</th>\n                                    <th scope=\"col\">Visa på karta</th>\n                                    <th scope=\"col\">Total kostnad</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {userInvoice.map(elem => \n                                <tr key={elem.id}>\n                                    <td data-label=\"Datum\"> {elem.date} </td>\n                                    <td data-label=\"Starttid\">{elem.startTime} </td>\n                                    <td data-label=\"Sluttid\">{elem.stopTime} </td>\n                                    <td data-label=\"Total tid\">{elem.timeOfTrip} min </td>\n                                    <td data-label=\"Start avgift\" >{elem.startFee}:-</td>\n                                    <td data-label=\"Rabatt\">{elem.discount}:- </td>\n                                    <td data-label=\"Minutpris\">{elem.timeFee}:- </td>\n                                    <td data-label=\"Visa på karta\" >\n                                    { <button className=\"button vertical-align:middle\" onClick={(e) => \n                                        showMap(elem.tripStartedPos, elem.tripEndedPos, e)}><span>Färd </span></button>}\n                                    </td>\n                                    <td data-label=\"Total kostnad\">{elem.totalCost}:- </td>\n                                </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    ) : ( <Loader> <p>{aUserMessage || messageCities}</p> </Loader> )}\n                </UserHistory>\n            </Main>\n            <MapContainer showMap = {showMapForUser.showMap} pageY={showMapForUser.pageY} >\n                {showMapForUser.showMap && <MapForUser showMapForUser = {showMapForUser}> </MapForUser>}\n            </MapContainer>\n        </Container>\n    )\n}\n\nexport default History\n"]},"metadata":{},"sourceType":"module"}