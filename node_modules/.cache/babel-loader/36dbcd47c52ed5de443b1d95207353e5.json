{"ast":null,"code":"import { API_URL, defaultConfigPut } from \"./config\";\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nconst Api = {\n  getAUser: async id => {\n    try {\n      const endpoint = `${API_URL}/customers/${id}`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllUsers: async () => {\n    try {\n      const endpoint = `${API_URL}/customers`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getACity: async whatCity => {\n    console.log(whatCity);\n\n    try {\n      const endpoint = `${API_URL}/cities/${whatCity}`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllCitys: async () => {\n    try {\n      const endpoint = `${API_URL}/cities`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllScooters: async () => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  // När det är fixat med OAUTH funkar denna antagligen\n  logginUserViaGit: async username => {\n    try {\n      const endpoint = `${API_URL}/customers/login`;\n      let res = await (await fetch(endpoint, { ...defaultConfig,\n        body: JSON.stringify({\n          username: username\n        })\n      })).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateAScooter: async (id, speed, battery, newPosition, active_user, is_active) => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          speed: speed,\n          battery: battery,\n          lat: newPosition.lat,\n          lng: newPosition.lng\n        })\n      })).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateAScootersUser: async id => {\n    try {\n      const endpoint = `${API_URL}/scooter/setuser`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id\n        })\n      })).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateAScootersLogg: async varForUpdate => {\n    try {\n      const endpoint = `${API_URL}/scooter/insertLogg`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: varForUpdate.id,\n          active_user: varForUpdate.active_user,\n          event: varForUpdate.event,\n          start_lat: varForUpdate.start_lat,\n          start_lng: varForUpdate.start_lng,\n          start_time: varForUpdate.time,\n          end_lat: varForUpdate.end_lat,\n          end_lng: varForUpdate.end_lng,\n          end_time: varForUpdate.time\n        })\n      })).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateUserFunds: async (addToBalance, id) => {\n    try {\n      console.log(addToBalance, id);\n      const endpoint = `${API_URL}/customers/balance`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          balance: addToBalance\n        })\n      })).json();\n      console.log(res.data.result);\n\n      if (res.data.result === `Object: ${id} updated`) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateZone: async (city, amount_of_bikes, color) => {\n    try {\n      const endpoint = `${API_URL}/cities/zones/update`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          city: city,\n          amount_of_bikes: amount_of_bikes,\n          color: color\n        })\n      })).json();\n\n      if (res.data.result === `Object: undefined updated`) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nexport default Api;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/api.js"],"names":["API_URL","defaultConfigPut","defaultConfig","method","headers","Api","getAUser","id","endpoint","res","fetch","json","error","console","log","getAllUsers","getACity","whatCity","data","getAllCitys","getAllScooters","logginUserViaGit","username","body","JSON","stringify","updateAScooter","speed","battery","newPosition","active_user","is_active","_id","lat","lng","updateAScootersUser","updateAScootersLogg","varForUpdate","event","start_lat","start_lng","start_time","time","end_lat","end_lng","end_time","updateUserFunds","addToBalance","balance","result","updateZone","city","amount_of_bikes","color"],"mappings":"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","sourcesContent":["\nimport { API_URL, defaultConfigPut } from \"./config\";\n\n\nconst defaultConfig = {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n\t},\n};\n\n\nconst Api =  {\n\n\n    getAUser: async(id) => {\n        try {\n            const endpoint = `${API_URL}/customers/${id}`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    getAllUsers: async() => {\n        try {\n            const endpoint = `${API_URL}/customers`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    getACity: async (whatCity) => {\n        console.log(whatCity)\n        try {\n            const endpoint = `${API_URL}/cities/${whatCity}`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllCitys: async () => {\n        try {\n            const endpoint = `${API_URL}/cities`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllScooters: async () => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    // När det är fixat med OAUTH funkar denna antagligen\n    logginUserViaGit: async (username)  => {\n        try {\n            const endpoint = `${API_URL}/customers/login`\n            let res = await (\n                await fetch(endpoint, {\n                  ...defaultConfig,\n                  body: JSON.stringify({username: username} )\n                })\n              ).json();\n            return res\n\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    updateAScooter: async (id, speed, battery, newPosition, active_user, is_active) => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        speed: speed,\n                        battery: battery,\n                        lat: newPosition.lat,\n                        lng: newPosition.lng,\n                    })\n                    })).json();\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n    updateAScootersUser: async (id) => {\n        try {\n            const endpoint = `${API_URL}/scooter/setuser`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                    })\n                    })).json();\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n\n    updateAScootersLogg: async (varForUpdate) => {\n        try {\n            const endpoint = `${API_URL}/scooter/insertLogg`;\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: varForUpdate.id,\n                        active_user: varForUpdate.active_user,\n                        event: varForUpdate.event,\n                        start_lat: varForUpdate.start_lat,\n                        start_lng: varForUpdate.start_lng,\n                        start_time: varForUpdate.time,\n                        end_lat: varForUpdate.end_lat,\n                        end_lng: varForUpdate.end_lng,\n                        end_time: varForUpdate.time,\n                    })\n                    })).json();\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n\n    updateUserFunds: async (addToBalance, id) => {\n        try {\n            console.log(addToBalance, id)\n            const endpoint = `${API_URL}/customers/balance`;\n            let res;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        balance: addToBalance,\n                    })\n                })).json();\n            console.log(res.data.result)\n            \n            if(res.data.result === `Object: ${id} updated`) {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n\n    updateZone: async (city, amount_of_bikes, color) => {\n     \n        try {\n            const endpoint = `${API_URL}/cities/zones/update`;\n            let res;\n            res = await(\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        city: city,\n                        amount_of_bikes: amount_of_bikes,\n                        color: color\n                    })\n                })).json();\n            \n            if(res.data.result === `Object: undefined updated`) {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n}\n\nexport default Api\n"]},"metadata":{},"sourceType":"module"}