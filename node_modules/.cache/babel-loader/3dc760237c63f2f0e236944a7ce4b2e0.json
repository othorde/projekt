{"ast":null,"code":"/* Används av movebike samt history */\n\n/* Loopar igenom alla allÅarkeringszones och kollar coords finns i array\n   Gör en array och skickar in till checkIfPointInPolygon för att se om \n   coords finns i polyGon som skickas med. Retunerar zone, som endast är true\n   om coord finns i polygon som är parkeringszon\n*/\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n  console.log(coords);\n  console.log(allParkingZones.position.polygonePart1.lat);\n  let res;\n  let zone = {\n    returned: false,\n    color: \"\",\n    amount_of_bikes_zone: \"\"\n  };\n\n  for (var elem of allParkingZones) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(coords, polyGon); // ändra bara zone om res är true\n\n    if (res === true) {\n      zone = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_zone: elem.amount_of_bikes_zone\n      };\n    } else {\n      continue;\n    }\n  }\n\n  return zone;\n}\n/*  Gör samma som ovan fast loopar chargingposts */\n\nexport function checkIfCoordInChargingPost(coords, allCharging_posts) {\n  let res;\n  let zone = {\n    returned: false,\n    color: \"\",\n    amount_of_bikes_post: \"\"\n  };\n\n  for (var elem of allCharging_posts) {\n    let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n    res = checkIfPointInPolyGon(coords, polyGon); // ändra bara zone om res är true\n\n    if (res === true) {\n      zone = {\n        returned: true,\n        color: elem.color,\n        amount_of_bikes_post: elem.amount_of_bikes_post\n      };\n    } else {\n      continue;\n    }\n  }\n\n  return zone;\n}\n/* Retunerar true/false om punkt finns i polygon */\n\nexport function checkIfPointInPolyGon(point, polygone) {\n  var pointInPolygon = require('point-in-polygon');\n\n  return pointInPolygon(point, polygone);\n}","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/helperfunction/helpers.js"],"names":["checkIfCoordInParkingZone","coords","allParkingZones","console","log","position","polygonePart1","lat","res","zone","returned","color","amount_of_bikes_zone","elem","polyGon","lng","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","checkIfCoordInChargingPost","allCharging_posts","amount_of_bikes_post","point","polygone","pointInPolygon","require"],"mappings":"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","sourcesContent":["\n/* Används av movebike samt history */\n/* Loopar igenom alla allÅarkeringszones och kollar coords finns i array\n   Gör en array och skickar in till checkIfPointInPolygon för att se om \n   coords finns i polyGon som skickas med. Retunerar zone, som endast är true\n   om coord finns i polygon som är parkeringszon\n*/\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n    console.log(coords);\n    console.log(allParkingZones.position.polygonePart1.lat);\n    let res;\n    let zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_zone: \"\"\n    };\n\n    for (var elem of allParkingZones) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon(coords, polyGon);\n\n        // ändra bara zone om res är true\n        if(res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_zone: elem.amount_of_bikes_zone\n            }\n        } else {\n            continue\n        }\n    }\n    return zone\n}\n\n /*  Gör samma som ovan fast loopar chargingposts */\nexport function checkIfCoordInChargingPost(coords, allCharging_posts) {\n\n    let res;\n    let zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_post: \"\"\n    };\n\n    for (var elem of allCharging_posts) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n\n        res = checkIfPointInPolyGon(coords, polyGon);\n        // ändra bara zone om res är true\n        if (res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_post: elem.amount_of_bikes_post\n            }\n        } else {\n            continue\n        }\n    }\n    return zone;\n\n}\n\n/* Retunerar true/false om punkt finns i polygon */\nexport function checkIfPointInPolyGon(point, polygone) {\n    var pointInPolygon = require('point-in-polygon');\n    return pointInPolygon(point, polygone);\n}"]},"metadata":{},"sourceType":"module"}