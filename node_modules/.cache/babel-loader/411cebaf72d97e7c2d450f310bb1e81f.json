{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  console.log(mapRef);\n\n  try {\n    let res = await Api.getAllCitys();\n\n    if (res !== null && mapRef.current !== null) {\n      var cityname;\n      const map = mapRef.map;\n      const maps = mapRef.maps;\n      res.map(cityCoords => {\n        cityCoords.charging_posts.map(loadStations => {\n          console.log(loadStations);\n        });\n        cityname = cityCoords.city;\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        cityname = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        }); // cityname.addListener('click', (event) => {\n        //     console.log(\"HEJ\", cityCoords)\n        //     setPopupInfo({\t\n        //         showBike: false,\n        //         showCity: true,\n        //         showLocation: false,\n        //         content: cityCoords\n        //     })\n        // });\n        // cityname.setMap(map);\n        // setCitysObject(oldArray => [...oldArray, cityname]);\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n_s(useLoadStationsForMap, \"s1AWfSwHheD+DhFje7irgvZQyA8=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","console","log","res","getAllCitys","current","cityname","map","maps","cityCoords","charging_posts","loadStations","city","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAElD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AACGO,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,MAAI;AACA,QAAIK,GAAG,GAAG,MAAMP,GAAG,CAACQ,WAAJ,EAAhB;;AACA,QAAID,GAAG,KAAK,IAAR,IAAgBL,MAAM,CAACO,OAAP,KAAmB,IAAvC,EAA6C;AAEzC,UAAIC,QAAJ;AACA,YAAMC,GAAG,GAAGT,MAAM,CAACS,GAAnB;AACA,YAAMC,IAAI,GAAGV,MAAM,CAACU,IAApB;AACAL,MAAAA,GAAG,CAACI,GAAJ,CAAQE,UAAU,IAAI;AAElBA,QAAAA,UAAU,CAACC,cAAX,CAA0BH,GAA1B,CAA8BI,YAAY,IAAI;AAC1CV,UAAAA,OAAO,CAACC,GAAR,CAAYS,YAAZ;AACH,SAFD;AAIAL,QAAAA,QAAQ,GAAGG,UAAU,CAACG,IAAtB;AACA,YAAIC,OAAO,GACN,CAACJ,UAAU,CAACK,QAAX,CAAoBC,aAArB,EACGN,UAAU,CAACK,QAAX,CAAoBE,aADvB,EAEGP,UAAU,CAACK,QAAX,CAAoBG,aAFvB,EAGGR,UAAU,CAACK,QAAX,CAAoBI,aAHvB,CADL;AAMAZ,QAAAA,QAAQ,GAAG,IAAIE,IAAI,CAACW,OAAT,CAAiB;AACxBC,UAAAA,KAAK,EAAEP,OADiB;AAExBQ,UAAAA,WAAW,EAAE,SAFW;AAGxBC,UAAAA,aAAa,EAAE,GAHS;AAIxBC,UAAAA,YAAY,EAAE,CAJU;AAKxBC,UAAAA,SAAS,EAAE,aALa;AAMxBC,UAAAA,WAAW,EAAE;AANW,SAAjB,CAAX,CAbkB,CAsBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,OAlCL;AAmCC;AAER,GA5CD,CA4CE,OAAOC,KAAP,EAAc;AACZzB,IAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AACH;AACJ,CAnDD;;GAAM7B,qB;;AAoDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n    console.log(mapRef)\n    try {\n        let res = await Api.getAllCitys();\n        if (res !== null && mapRef.current !== null) {\n\n            var cityname;\n            const map = mapRef.map;\n            const maps = mapRef.maps;\n            res.map(cityCoords => {\n\n                cityCoords.charging_posts.map(loadStations => {\n                    console.log(loadStations)\n                })\n\n                cityname = cityCoords.city\n                let polyGon = \n                    ([cityCoords.position.polygonePart1,\n                        cityCoords.position.polygonePart2,\n                        cityCoords.position.polygonePart3,\n                        cityCoords.position.polygonePart4\n                    ]);\n                cityname = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                // cityname.addListener('click', (event) => {\n                //     console.log(\"HEJ\", cityCoords)\n                //     setPopupInfo({\t\n                //         showBike: false,\n                //         showCity: true,\n                //         showLocation: false,\n                //         content: cityCoords\n                //     })\n                // });\n                // cityname.setMap(map);\n                // setCitysObject(oldArray => [...oldArray, cityname]);\n\n                })\n            }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}