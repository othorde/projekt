{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import {useState, useEffect} from 'react';\n// import Api from '../api';\n// const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n//     const getCitys = (res) => {\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n//     return \"res\"\n// };\n// export default useLoadStationsForMaps;\nimport { useState, useEffect } from 'react';\n\nconst useCurrentPosition2 = function () {\n  _s();\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [location, setLocation] = useState(\"\");\n  const [error, setError] = useState();\n\n  const handleSucces = pos => {\n    const {\n      latitude,\n      longitude\n    } = pos.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  };\n\n  const handleError = error => {\n    setError(error.message);\n  };\n\n  useEffect(() => {\n    const {\n      geolocation\n    } = navigator;\n\n    if (!geolocation) {\n      setError(\"Geolocation not supported\");\n      return;\n    }\n\n    geolocation.getCurrentPosition(handleSucces, handleError, options);\n  }, [options]);\n  return {\n    location1,\n    error\n  };\n};\n\n_s(useCurrentPosition2, \"llsKOgLFsW0bFQfowmiRf2c8gHw=\");\n\nexport default useCurrentPosition2; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadStationsToMap.js"],"names":["useState","useEffect","useCurrentPosition2","options","location","setLocation","error","setError","handleSucces","pos","latitude","longitude","coords","handleError","message","geolocation","navigator","getCurrentPosition","location1"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAQA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,mBAAmB,GAAG,YAAgB;AAAA;;AAAA,MAAfC,OAAe,uEAAP,EAAO;AAExC,QAAK,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;;AACA,QAAMQ,YAAY,GAAIC,GAAD,IAAS;AAC1B,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAyBF,GAAG,CAACG,MAAnC;AAEAP,IAAAA,WAAW,CAAC;AACRK,MAAAA,QADQ;AAERC,MAAAA;AAFQ,KAAD,CAAX;AAIH,GAPD;;AASA,QAAME,WAAW,GAAIP,KAAD,IAAW;AAC3BC,IAAAA,QAAQ,CAACD,KAAK,CAACQ,OAAP,CAAR;AACH,GAFD;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACc,MAAAA;AAAD,QAAgBC,SAAtB;;AAEA,QAAI,CAACD,WAAL,EAAkB;AACdR,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACA;AACH;;AACDQ,IAAAA,WAAW,CAACE,kBAAZ,CAA+BT,YAA/B,EAA6CK,WAA7C,EAA0DV,OAA1D;AACH,GARQ,EAQP,CAACA,OAAD,CARO,CAAT;AAUA,SAAO;AAACe,IAAAA,SAAD;AAAYZ,IAAAA;AAAZ,GAAP;AACH,CA5BD;;GAAMJ,mB;;AA6BN,eAAeA,mBAAf,C,CA2BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import {useState, useEffect} from 'react';\n// import Api from '../api';\n\n// const useLoadStationsForMaps = async (mapRef)  => {\n// \tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n// \tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n// \tconst [loadStationError, setLoadStationError] = useState(\"\");\n//     console.log(mapRef, \"h채채r\")\n\n//     let res;\n//     useEffect(async () =>  {\n//         res = await Api.getAllCitys();\n//         getCitys(res)\n//     },[mapRef.current]);\n\n\n//     const getCitys = (res) => {\n\n//         console.log(\"HEj\")\n//         // var loadStationName;\n//         // const map = mapRef.current.map;\n//         // const maps = mapRef.current.maps;\n\n//         // res.map(cityCoords => {\n//         //     cityCoords.charging_posts.map(loadStations => {            \n//         //         let polyGon = \n//         //             ([cityCoords.position.polygonePart1,\n//         //                 cityCoords.position.polygonePart2,\n//         //                 cityCoords.position.polygonePart3,\n//         //                 cityCoords.position.polygonePart4\n//         //             ]);\n//         //         loadStationName = new maps.Polygon({\n//         //             paths: polyGon,\n//         //             strokeColor: \"yellow\",\n//         //             strokeOpacity: 0.9,\n//         //             strokeWeight: 2,\n//         //             fillColor: \"transparent\",\n//         //             fillOpacity: 0.35,\n//         //             });\n            \n//         //     loadStationName.addListener('click', (event) => {\n//         //         //setLoadStationContent({loadStations});\n//         //     });\n//         //     loadStationName.setMap(map);\n//         //     setLoadStationObject(loadStationName);\n//         //     })\n//         // })\n//         console.log(res)\n//     }\n\n    \n//     return \"res\"\n\n// };\n// export default useLoadStationsForMaps;\n\n\n\n\n\n\n\nimport {useState, useEffect} from 'react';\n\nconst useCurrentPosition2 = (options={}) => {\n\n    const[location, setLocation] = useState(\"\");\n    const [error, setError] = useState();\n    const handleSucces = (pos) => {\n        const {latitude, longitude } = pos.coords;\n\n        setLocation({\n            latitude,\n            longitude\n        });\n    };\n\n    const handleError = (error) => {\n        setError(error.message);\n    };\n\n    useEffect(() => {\n        const {geolocation} = navigator;\n\n        if (!geolocation) {\n            setError(\"Geolocation not supported\")\n            return;\n        }\n        geolocation.getCurrentPosition(handleSucces, handleError, options)\n    },[options])\n    \n    return {location1, error};\n};\nexport default useCurrentPosition2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}