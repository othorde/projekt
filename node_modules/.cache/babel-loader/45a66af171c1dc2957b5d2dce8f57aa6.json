{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  const [PopupInfo, setPopupInfo] = useState(\"\");\n  let res;\n  useEffect(async () => {\n    if (!res || res.length === 0) {\n      let res = await Api.getAllCitys();\n\n      try {\n        if (res !== null && mapRef.current.map !== undefined) {\n          var cityname;\n          const map = mapRef.current.map;\n          const maps = mapRef.current.maps;\n          res.map(cityCoords => {\n            cityCoords.charging_posts.map(loadStations => {\n              console.log(loadStations);\n              let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n              cityname = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: \"yellow\",\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35\n              });\n            });\n            cityname.addListener('click', event => {\n              console.log(\"HEJ\", cityCoords);\n              setPopupInfo({\n                showBike: false,\n                showCity: true,\n                showLocation: false,\n                content: cityCoords\n              });\n            });\n            cityname.setMap(map);\n            setLoadStationObject(oldArray => [...oldArray, cityname]);\n          });\n        }\n\n        return {\n          LoadStationObject,\n          PopupInfo\n        };\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, []);\n};\n\n_s(useLoadStationsForMap, \"FOChtWLZTei8sTwsx7xTJAUX7Oo=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","PopupInfo","setPopupInfo","res","length","getAllCitys","current","map","undefined","cityname","maps","cityCoords","charging_posts","loadStations","console","log","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","showBike","showCity","showLocation","content","setMap","oldArray","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAClD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AAEG,MAAIS,GAAJ;AACAR,EAAAA,SAAS,CAAC,YAAa;AACnB,QAAG,CAACQ,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA1B,EAA4B;AACxB,UAAID,GAAG,GAAG,MAAMP,GAAG,CAACS,WAAJ,EAAhB;;AACA,UAAI;AACA,YAAIF,GAAG,KAAK,IAAR,IAAgBL,MAAM,CAACQ,OAAP,CAAeC,GAAf,KAAuBC,SAA3C,EAAsD;AAClD,cAAIC,QAAJ;AACA,gBAAMF,GAAG,GAAGT,MAAM,CAACQ,OAAP,CAAeC,GAA3B;AACA,gBAAMG,IAAI,GAAGZ,MAAM,CAACQ,OAAP,CAAeI,IAA5B;AAEAP,UAAAA,GAAG,CAACI,GAAJ,CAAQI,UAAU,IAAI;AAClBA,YAAAA,UAAU,CAACC,cAAX,CAA0BL,GAA1B,CAA8BM,YAAY,IAAI;AAC1CC,cAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEA,kBAAIG,OAAO,GACN,CAACL,UAAU,CAACM,QAAX,CAAoBC,aAArB,EACGP,UAAU,CAACM,QAAX,CAAoBE,aADvB,EAEGR,UAAU,CAACM,QAAX,CAAoBG,aAFvB,EAGGT,UAAU,CAACM,QAAX,CAAoBI,aAHvB,CADL;AAMAZ,cAAAA,QAAQ,GAAG,IAAIC,IAAI,CAACY,OAAT,CAAiB;AACxBC,gBAAAA,KAAK,EAAEP,OADiB;AAExBQ,gBAAAA,WAAW,EAAE,QAFW;AAGxBC,gBAAAA,aAAa,EAAE,GAHS;AAIxBC,gBAAAA,YAAY,EAAE,CAJU;AAKxBC,gBAAAA,SAAS,EAAE,aALa;AAMxBC,gBAAAA,WAAW,EAAE;AANW,eAAjB,CAAX;AAQH,aAjBD;AAkBAnB,YAAAA,QAAQ,CAACoB,WAAT,CAAqB,OAArB,EAA+BC,KAAD,IAAW;AACrChB,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,UAAnB;AACAT,cAAAA,YAAY,CAAC;AACT6B,gBAAAA,QAAQ,EAAE,KADD;AAETC,gBAAAA,QAAQ,EAAE,IAFD;AAGTC,gBAAAA,YAAY,EAAE,KAHL;AAITC,gBAAAA,OAAO,EAAEvB;AAJA,eAAD,CAAZ;AAMH,aARD;AASAF,YAAAA,QAAQ,CAAC0B,MAAT,CAAgB5B,GAAhB;AACAP,YAAAA,oBAAoB,CAACoC,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAc3B,QAAd,CAAb,CAApB;AACC,WA9BL;AA+BC;;AACD,eAAO;AAACV,UAAAA,iBAAD;AAAoBE,UAAAA;AAApB,SAAP;AAGP,OAzCD,CAyCE,OAAOoC,KAAP,EAAc;AACZvB,QAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;AACH;AAEZ;AACA,GAjDY,EAiDV,EAjDU,CAAT;AAqDH,CA1DD;;GAAMxC,qB;;AA2DN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n\tconst [PopupInfo, setPopupInfo] = useState(\"\");\n\n    let res;\n    useEffect(async () =>  {\n        if(!res || res.length === 0){\n            let res = await Api.getAllCitys();\n            try {\n                if (res !== null && mapRef.current.map !== undefined) {\n                    var cityname;\n                    const map = mapRef.current.map;\n                    const maps = mapRef.current.maps;\n\n                    res.map(cityCoords => {\n                        cityCoords.charging_posts.map(loadStations => {\n                            console.log(loadStations)\n            \n                            let polyGon = \n                                ([cityCoords.position.polygonePart1,\n                                    cityCoords.position.polygonePart2,\n                                    cityCoords.position.polygonePart3,\n                                    cityCoords.position.polygonePart4\n                                ]);\n                            cityname = new maps.Polygon({\n                                paths: polyGon,\n                                strokeColor: \"yellow\",\n                                strokeOpacity: 0.9,\n                                strokeWeight: 2,\n                                fillColor: \"transparent\",\n                                fillOpacity: 0.35,\n                                });\n                        })\n                        cityname.addListener('click', (event) => {\n                            console.log(\"HEJ\", cityCoords)\n                            setPopupInfo({\t\n                                showBike: false,\n                                showCity: true,\n                                showLocation: false,\n                                content: cityCoords\n                            })\n                        });\n                        cityname.setMap(map);\n                        setLoadStationObject(oldArray => [...oldArray, cityname]);\n                        })\n                    }\n                    return {LoadStationObject, PopupInfo};\n\n\n            } catch (error) {\n                console.log(error)\n            }\n\n}\n}, []);\n\n    \n\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}