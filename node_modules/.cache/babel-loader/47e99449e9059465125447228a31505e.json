{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../Api';\nlet initalValue = {\n  showParkingZone: false,\n  loadParkingZone: []\n};\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\n\nconst useDisplayPolyParkZone = (mapRef, _ref) => {\n  _s();\n\n  let {\n    ifToShowParkingZone\n  } = _ref;\n  const [parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n\n  const [parkingZoneError, setParkingZoneError] = useState(false); // håller content för onClick\n  // funktion som togglar state, från andra komponenter\n\n  const showInfoForParkingZone = trueOrFalse => {\n    setParkingZoneContent({\n      showParkingZone: trueOrFalse\n    });\n  }; //körs vid mount och förändring av prop om poly för städer ska visas = hämtar,\n  // annars tar bort med removeCitysFromMap\n\n\n  useEffect(() => {\n    /* \n    Tar emot res från getData. Loopar igenom. Skapar poly av\n    alla koordinater som tillhör städer. Lägger på onclickevent.\n    Sparar objekten i state, så de senare kan tas bort.\n    */\n    const handleSucces = res => {\n      var parkingZoneName;\n      const map = mapRef.current.map;\n      const maps = mapRef.current.maps;\n      res.forEach(cityCoords => {\n        cityCoords.parking_zones.forEach(parking_zone => {\n          let polyGon = [parking_zone.position.polygonePart1, parking_zone.position.polygonePart2, parking_zone.position.polygonePart3, parking_zone.position.polygonePart4];\n          parkingZoneName = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: parking_zone.color,\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35\n          });\n          parkingZoneName.addListener('click', () => {\n            setParkingZoneContent(prevState => ({\n              showParkingZone: !prevState.showParkingZone,\n              loadParkingZone: parking_zone\n            }));\n          });\n          parkingZoneName.setMap(map);\n          var holdArr = parkingZoneObject;\n          holdArr.push(parkingZoneName);\n          setParkingZoneObject(holdArr);\n        });\n      });\n    }; // tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\n\n\n    function removeParkingZonesFromMap() {\n      parkingZoneObject !== null && parkingZoneObject.forEach(parkingZone => {\n        parkingZone.setMap(null);\n      });\n    }\n\n    const getData = async () => {\n      try {\n        setParkingZoneError(false);\n        let res = await Api.getAllCitys();\n        handleSucces(res);\n      } catch (error) {\n        setParkingZoneError(true);\n      }\n    };\n\n    if (ifToShowParkingZone.loadParkingZone) {\n      getData();\n      const interval = setInterval(() => {\n        getData();\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n\n    ifToShowParkingZone.loadParkingZone === false && removeParkingZonesFromMap();\n  }, [ifToShowParkingZone.loadParkingZone]);\n  return {\n    parkingZoneObject,\n    parkingZoneContent,\n    parkingZoneError,\n    showInfoForParkingZone\n  };\n};\n\n_s(useDisplayPolyParkZone, \"UcT5Yxgvvq5xbYtIAr9jtcVLzjE=\");\n\nexport default useDisplayPolyParkZone;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyParkZone.js"],"names":["useState","useEffect","Api","initalValue","showParkingZone","loadParkingZone","useDisplayPolyParkZone","mapRef","ifToShowParkingZone","parkingZoneObject","setParkingZoneObject","parkingZoneContent","setParkingZoneContent","parkingZoneError","setParkingZoneError","showInfoForParkingZone","trueOrFalse","handleSucces","res","parkingZoneName","map","current","maps","forEach","cityCoords","parking_zones","parking_zone","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","removeParkingZonesFromMap","parkingZone","getData","getAllCitys","error","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowParkingZone: false,\n\tloadParkingZone: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyParkZone = (mapRef, {ifToShowParkingZone}) => {\n    const[parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n    const[parkingZoneError, setParkingZoneError] = useState(false); // håller content för onClick\n    \n    // funktion som togglar state, från andra komponenter\n    const showInfoForParkingZone = (trueOrFalse) => {\n        setParkingZoneContent({ showParkingZone: trueOrFalse});\n    }\n\n    //körs vid mount och förändring av prop om poly för städer ska visas = hämtar,\n    // annars tar bort med removeCitysFromMap\n    useEffect(() => {\n        /* \n        Tar emot res från getData. Loopar igenom. Skapar poly av\n        alla koordinater som tillhör städer. Lägger på onclickevent.\n        Sparar objekten i state, så de senare kan tas bort.\n        */\n        const handleSucces = (res) => {\n            var parkingZoneName;\n            const map = mapRef.current.map;\n            const maps = mapRef.current.maps;\n        \n            res.forEach(cityCoords => {\n                cityCoords.parking_zones.forEach(parking_zone => {         \n                    let polyGon = \n                        ([\n                            parking_zone.position.polygonePart1,\n                            parking_zone.position.polygonePart2,\n                            parking_zone.position.polygonePart3,\n                            parking_zone.position.polygonePart4,\n                        ]);\n                    parkingZoneName = new maps.Polygon({\n                        paths: polyGon,\n                        strokeColor: parking_zone.color,\n                        strokeOpacity: 0.9,\n                        strokeWeight: 2,\n                        fillColor: \"transparent\",\n                        fillOpacity: 0.35,\n                        });\n                    \n                    parkingZoneName.addListener('click', () => {\n                        setParkingZoneContent(prevState => ({\n                            showParkingZone: !prevState.showParkingZone,\n                            loadParkingZone: parking_zone\n                        }));\n                    });\n                parkingZoneName.setMap(map);\n                var holdArr = parkingZoneObject;\n                holdArr.push(parkingZoneName);\n                setParkingZoneObject(holdArr);\n        \n                })\n        \n            })\n        };\n\n\n        // tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\n        function removeParkingZonesFromMap() { \n            parkingZoneObject !== null && parkingZoneObject.forEach(parkingZone => {\n                parkingZone.setMap(null);\n            })\n        }\n\n\n        const getData = async () => {\n            try {\n                setParkingZoneError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res);\n            } catch (error) {\n                setParkingZoneError(true)\n            }\n        }\n\n        if(ifToShowParkingZone.loadParkingZone) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowParkingZone.loadParkingZone === false && removeParkingZonesFromMap();\n    }, [ifToShowParkingZone.loadParkingZone])\n    \n    return {parkingZoneObject, parkingZoneContent, parkingZoneError, showInfoForParkingZone};\n};\nexport default useDisplayPolyParkZone;\n\n"]},"metadata":{},"sourceType":"module"}