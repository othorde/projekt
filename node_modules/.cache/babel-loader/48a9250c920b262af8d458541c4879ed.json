{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useLoadParkingZones from \"../../Hooks/loadParkingZoneToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\"; //styles & img\n\nimport { Container, StyleMap, Main } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\n/* Denna komponent är kartan till admin. Den kan nyttjas via mapref.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props(Admin route). För att kunna lägga till polygons hämtas dessa med \n   Hooks, se mappen hooks.\n*/\n\nexport default function MapContainer(props) {\n  _s();\n\n  //hooks\n  const mapRef = useRef();\n  const {\n    loadStationContent,\n    showInfoForLoadStation\n  } = useLoadStationsToMap(mapRef, props);\n  const {\n    cityContent,\n    showInfoForCity\n  } = useCityToMap(mapRef, props);\n  const {\n    parkingZoneContent,\n    showInfoForParkingZone\n  } = useLoadParkingZones(mapRef, props);\n  const {\n    location\n  } = useCurrentLocation(options); //State\n\n  const [scooter, setScooter] = useState([]);\n  const [PopupInfo, setPopupInfo] = useState(null); ///Variabel\n\n  const loadScooters = props.ifToShowScooter;\n  const ScooterArray = props.ifToShowScooter.content;\n  const ScooterError = props.ifToShowScooter.error;\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 35\n    }, this);\n  };\n\n  console.log(props); // Dessa useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll\n  //fundera på om det finns något bättre/snyggare sätt om man ska kunna toggla mellan de olika\n  // Alternativ är att ladda in allt här, men då blir index.js kladdig \n  // Har flera fetch vilket är ganska onödigt men om vi ska använda graphql senare så är strukturen m hooks att föredra.\n  // Om vi inte använder graphQl så hämta allt på en gång kanske och spara i state => populera\n\n  useEffect(() => {\n    if (scooter.showScooter === true) {\n      showInfoForCity(false);\n      showInfoForLoadStation(false);\n      showInfoForParkingZone(false);\n      setPopupInfo({\n        content: scooter.scooter,\n        whatToShow: \"Scooter\"\n      });\n    }\n  }, [scooter.showScooter, scooter, setScooter]);\n  useEffect(() => {\n    if (loadStationContent.showLoadStations === true) {\n      setScooter(prevState => ({\n        scooter: prevState.scooter,\n        showScooter: false\n      }));\n      showInfoForCity(false);\n      showInfoForParkingZone(false);\n      setPopupInfo({\n        content: loadStationContent.loadStations,\n        whatToShow: \"LoadStation\"\n      });\n    }\n  }, [loadStationContent.showLoadStations]);\n  useEffect(() => {\n    if (cityContent.showLoadCitys === true) {\n      setScooter(prevState => ({\n        scooter: prevState.scooter,\n        showScooter: false\n      }));\n      showInfoForLoadStation(false);\n      showInfoForParkingZone(false);\n      setPopupInfo({\n        content: cityContent.city,\n        whatToShow: \"City\"\n      });\n    }\n  }, [cityContent.showLoadCitys]);\n  useEffect(() => {\n    if (parkingZoneContent.showParkingZone === true) {\n      setScooter(prevState => ({\n        scooter: prevState.scooter,\n        showScooter: false\n      }));\n      showInfoForCity(false);\n      showInfoForLoadStation(false);\n      setPopupInfo({\n        content: parkingZoneContent.loadParkingZone,\n        whatToShow: \"ParkingZone\"\n      });\n    }\n  }, [parkingZoneContent.showParkingZone]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(StyleMap, {\n        children: location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n          },\n          defaultCenter: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          defaultZoom: 10,\n          yesIWantToUseGoogleMapApiInternals: true,\n          onGoogleApiLoaded: _ref2 => {\n            let {\n              map,\n              maps\n            } = _ref2;\n            mapRef.current = {\n              map,\n              maps\n            };\n          },\n          children: [/*#__PURE__*/_jsxDEV(Marker, {\n            lat: location.latitude,\n            lng: location.longitude,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"crime-marker\",\n                src: personimg,\n                alt: \"person\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 7\n            }, this)\n          }, 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 6\n          }, this), loadScooters.loadScooters && !ScooterError && ScooterArray.map(scooter => {\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              lat: scooter.position.lat,\n              lng: scooter.position.lng,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => setScooter({\n                  scooter,\n                  showScooter: true\n                }),\n                className: \"crime-marker\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"scooter\",\n                  src: bikeimg,\n                  alt: \"scooter\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 8\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 8\n              }, this)\n            }, scooter._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 7\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 5\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 4\n      }, this), scooter || cityContent || loadStationContent ? /*#__PURE__*/_jsxDEV(PopUp, {\n        PopupInfo: PopupInfo\n      }, \"popupkey\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Logg, {\n      scooter: scooter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"SsGipLt+OgQlDenOtfxp0hTryJI=\", false, function () {\n  return [useLoadStationsToMap, useCityToMap, useLoadParkingZones, useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","useLoadStationsToMap","useLoadParkingZones","useCityToMap","PopUp","Logg","Container","StyleMap","Main","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","MapContainer","props","mapRef","loadStationContent","showInfoForLoadStation","cityContent","showInfoForCity","parkingZoneContent","showInfoForParkingZone","location","scooter","setScooter","PopupInfo","setPopupInfo","loadScooters","ifToShowScooter","ScooterArray","content","ScooterError","error","Marker","children","console","log","showScooter","whatToShow","showLoadStations","prevState","loadStations","showLoadCitys","city","showParkingZone","loadParkingZone","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","map","maps","current","position","_id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useLoadParkingZones from \"../../Hooks/loadParkingZoneToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\";\n//styles & img\nimport {Container,StyleMap, Main} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n/* Denna komponent är kartan till admin. Den kan nyttjas via mapref.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props(Admin route). För att kunna lägga till polygons hämtas dessa med \n   Hooks, se mappen hooks.\n*/\nexport default function MapContainer(props) {\n\t//hooks\n\tconst mapRef = useRef();\n\tconst { loadStationContent, showInfoForLoadStation } = useLoadStationsToMap(mapRef, props);\n\tconst { cityContent, showInfoForCity } = useCityToMap(mapRef, props);\n\tconst { parkingZoneContent, showInfoForParkingZone } = useLoadParkingZones(mapRef, props);\n\tconst { location } = useCurrentLocation(options);\n\t//State\n\tconst [scooter, setScooter] = useState([]);\n\tconst [PopupInfo, setPopupInfo] = useState(null);\n\t///Variabel\n\tconst loadScooters = props.ifToShowScooter;\n\tconst ScooterArray = props.ifToShowScooter.content;\n\tconst ScooterError = props.ifToShowScooter.error;\n\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\tconsole.log(props)\n\n\n\t// Dessa useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll\n\t//fundera på om det finns något bättre/snyggare sätt om man ska kunna toggla mellan de olika\n\t// Alternativ är att ladda in allt här, men då blir index.js kladdig \n\t// Har flera fetch vilket är ganska onödigt men om vi ska använda graphql senare så är strukturen m hooks att föredra.\n\t// Om vi inte använder graphQl så hämta allt på en gång kanske och spara i state => populera\n\tuseEffect(() => {\n\t\tif (scooter.showScooter === true) {\n\t\t\tshowInfoForCity(false);\n\t\t\tshowInfoForLoadStation(false);\n\t\t\tshowInfoForParkingZone(false);\n\t\t\tsetPopupInfo({content: scooter.scooter, whatToShow: \"Scooter\"});\n\t\t}\n\t},[scooter.showScooter, scooter, setScooter])\n\n\n\tuseEffect(() => {\n\t\tif (loadStationContent.showLoadStations === true) {\n\t\t\tsetScooter(prevState => ({\n\t\t\t\tscooter: prevState.scooter,\n\t\t\t\tshowScooter: false\n\t\t\t}));\n\t\t\tshowInfoForCity(false);\n\t\t\tshowInfoForParkingZone(false);\n\t\t\tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n\t\t}\n\t},[loadStationContent.showLoadStations])\n\n\n\tuseEffect(() => {\n\t\tif (cityContent.showLoadCitys === true) {\n\t\t\tsetScooter(prevState => ({\n\t\t\t\tscooter: prevState.scooter,\n\t\t\t\tshowScooter: false\n\t\t\t}));\n\t\t\tshowInfoForLoadStation(false);\n\t\t\tshowInfoForParkingZone(false);\n\t\t\tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n\t\t}\n\t},[cityContent.showLoadCitys])\n\n\tuseEffect(() => {\n\t\tif (parkingZoneContent.showParkingZone === true) {\n\t\t\tsetScooter(prevState => ({\n\t\t\t\tscooter: prevState.scooter,\n\t\t\t\tshowScooter: false\n\t\t\t}));\n\t\t\tshowInfoForCity(false);\n\t\t\tshowInfoForLoadStation(false);\n\t\t\tsetPopupInfo({content: parkingZoneContent.loadParkingZone, whatToShow: \"ParkingZone\"});\n\t\t}\n\t},[parkingZoneContent.showParkingZone])\n\n\n\n\treturn (\n\n\t\t<Container>\n\t\t\t<Main> \n\t\t\t<StyleMap>\n\t\t\t\t{/*KARTA*/}\n\t\t\t\t{location ? (\n\t\t\t\t<GoogleMapReact \n\t\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\t\tdefaultZoom={10}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{/*1 Person*/}\n\t\t\t\t\t<Marker \n\t\t\t\t\t\tkey={1} \n\t\t\t\t\t\tlat={location.latitude} \n\t\t\t\t\t\tlng={location.longitude}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</Marker>\n\n\t\t\t\t\t{/*Alla scootrar*/}\n\t\t\t\t\t{(loadScooters.loadScooters && !ScooterError) && (\n\t\t\t\t\tScooterArray.map(scooter => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t<Marker \n\t\t\t\t\t\t\tkey={scooter._id} \n\t\t\t\t\t\t\tlat={scooter.position.lat} \n\t\t\t\t\t\t\tlng={scooter.position.lng}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div onClick={() => setScooter({scooter, showScooter: true})}className=\"crime-marker\">\n\t\t\t\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Marker>)\n\t\t\t\t\t\t})\n\t\t\t\t\t)}\n\t\t\t\t</GoogleMapReact>\n\t\t\t\t):(<p>Loading...</p> )}\n\t\t\t</StyleMap>\n\t\t\t\n\t\t\t{/*POPUP fönster*/}\n\t\t\t{scooter || cityContent || loadStationContent ? (\n\t\t\t\t<PopUp key={\"popupkey\"} PopupInfo={PopupInfo}></PopUp>\n\t\t\t): (null) }\n\t\t\t</Main>\n\t\t\t<Logg scooter= {scooter}/>\t\n\n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}