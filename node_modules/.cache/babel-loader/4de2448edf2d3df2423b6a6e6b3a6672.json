{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n     */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.forEach(elem => {\n      setCharging_posts([elem]);\n    });\n  } // Vad behöver uppdateras?\n  // Scooterns plats ny long lat\n  // Uppdatera hur många som finns i föregående zon\n  // uppdatera hur många som finns i den nya zonen\n  // Fortsätt här när backend är klar\n  // glöm ej att hantera fail och error\n  // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n  // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = async () => {\n    console.log(moveBikeToColor);\n\n    if (moveBikeToColor !== null) {// let position = props.position;\n      // let newPosition;\n      // let movedBy = myContext.user.username;\n      // let today = new Date();\n      // let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n      // let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      // let dateTime = date+' '+time;\n      // charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n      // if ( position !== null) {\n      //     var lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n      //     var lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n      //     newPosition = {lat: lat, lng: lng}\n      //     var logg = `${dateTime} \\n \n      //         Moved(update) this bike (bikeId:${props.id}) \n      //         from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n      //         New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n      //         Speed is now 0 and battery is charged from ${props.battery} to 100%.\n      //         This was carried out by ${movedBy}.\n      //     `;\n      //     let speed = \"0\";\n      //     let battery = \"100\";\n      //     let response = await Api.updateAScooter(props.id, speed, battery, newPosition, logg);\n      // }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        \"data-testid\": \"dropdown\",\n        onChange: e => {\n          setMoveBikeToColor(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: '',\n          children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n          value: elem.color,\n          children: elem.color + \"zon\"\n        }, elem.color, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSubmit(),\n        children: \" F\\xF6rflytta cykel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"rAQ8KNInSwdi1OJKD7UV8rDC6iY=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","getLoadStationsForMovingBike","city","getACity","forEach","elem","handleSubmit","console","log","e","target","value","map","color"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;;AACA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,QAAMC,SAAS,GAAGN,UAAU,CAACE,UAAD,CAA5B;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AAGA;AACJ;AACA;AACA;AACA;;AACI,iBAAeY,4BAAf,GAA8C;AAC1C,QAAIC,IAAI,GAAG,MAAMX,GAAG,CAACY,QAAJ,CAAaR,KAAK,CAACO,IAAnB,CAAjB;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQL,cAAR,CAAuBO,OAAvB,CAA+BC,IAAI,IAAI;AACnCP,MAAAA,iBAAiB,CAAC,CAACO,IAAD,CAAD,CAAjB;AACH,KAFD;AAGH,GAhBmC,CAkBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACI,QAAMC,YAAY,GAAG,YAAY;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYT,eAAZ;;AACA,QAAIA,eAAe,KAAK,IAAxB,EAA8B,CAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,GA7BD;;AA+BH,sBACO,QAAC,aAAD;AAAe,IAAA,OAAO,EAAIE,4BAA1B;AAAA,iCAEI;AAAU,MAAA,SAAS,EAAG,UAAtB;AAAA,8BACI;AACI,uBAAY,UADhB;AAC2B,QAAA,QAAQ,EAAGQ,CAAD,IAAO;AACxCT,UAAAA,kBAAkB,CAAES,CAAC,CAACC,MAAF,CAASC,KAAX,CAAlB;AAEH,SAJD;AAAA,gCAKI;AAAQ,UAAA,KAAK,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,EAMKd,cAAc,CAACe,GAAf,CAAmBP,IAAI,IAAIA,IAAI,KAAK,IAAT,iBACxB;AAEI,UAAA,KAAK,EAAEA,IAAI,CAACQ,KAFhB;AAAA,oBAGKR,IAAI,CAACQ,KAAL,GAAa;AAHlB,WACSR,IAAI,CAACQ,KADd;AAAA;AAAA;AAAA;AAAA,gBADH,CANL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAeI;AAAQ,QAAA,OAAO,EAAE,MAAMP,YAAY,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADP;AAuBA;;GArFuBZ,Q;;KAAAA,Q","sourcesContent":["import {React, useState, useContext} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n       */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.forEach(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    // Vad behöver uppdateras?\n    // Scooterns plats ny long lat\n    // Uppdatera hur många som finns i föregående zon\n    // uppdatera hur många som finns i den nya zonen\n    // Fortsätt här när backend är klar\n    // glöm ej att hantera fail och error\n    // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n    // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = async () => {\n        console.log(moveBikeToColor)\n        if (moveBikeToColor !== null) {\n            // let position = props.position;\n            // let newPosition;\n            // let movedBy = myContext.user.username;\n            // let today = new Date();\n            // let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n            // let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            // let dateTime = date+' '+time;\n            \n            // charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            // if ( position !== null) {\n            //     var lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n            //     var lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n            //     newPosition = {lat: lat, lng: lng}\n\n            //     var logg = `${dateTime} \\n \n            //         Moved(update) this bike (bikeId:${props.id}) \n            //         from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n            //         New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n            //         Speed is now 0 and battery is charged from ${props.battery} to 100%.\n            //         This was carried out by ${movedBy}.\n            //     `;\n            //     let speed = \"0\";\n            //     let battery = \"100\";\n            //     let response = await Api.updateAScooter(props.id, speed, battery, newPosition, logg);\n            // }\n        }\n    }\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n\n            <fieldset className = \"register\">\n                <select \n                    data-testid=\"dropdown\" onChange={(e) => {\n                    setMoveBikeToColor((e.target.value))\n\n                }}>\n                    <option value={''}>-- Välj vart cykeln ska förflyttas --</option>\n                    {charging_posts.map(elem => elem !== null  &&\n                        <option \n                            key={elem.color} \n                            value={elem.color}>\n                            {elem.color + \"zon\"}\n\n                        </option> )}\n                </select>\n                <button onClick={() => handleSubmit()}> Förflytta cykel </button>\n\n            </fieldset>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}