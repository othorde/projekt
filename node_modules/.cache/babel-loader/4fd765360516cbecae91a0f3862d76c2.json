{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Invoice\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Pdf from \"react-to-pdf\";\nimport { React, useEffect, useState } from \"react\"; //components\n\nimport Api from '../../api'; //styles & img\n\nimport { Container } from './Form.styles'; //other\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar pointInPolygon = require('point-in-polygon');\n\nconst userInvoiceInitialValue = {\n  tripId: \"\",\n  endedAtChargePoint: false,\n  endedAtLoadStation: \"\",\n  timeOfTrip: \"\",\n  startFee: 10,\n  discountStartFee: \"\",\n  fromFreePark2Defined: \"\"\n};\nexport default function Invoice(props) {\n  _s();\n\n  //hooks\n  // måste ha resan och koordinaterna\n  // måste senare räkna ut var koordinaterna ligger och jmföra\n  const [allCharging_posts, setAllCharging_posts] = useState([]); //parkering och laddstationer\n\n  const [allParkingZones, setAllParkingZones] = useState([]);\n  const [userTrips, setUserTrips] = useState([]);\n  const [userInvoice, setUserInvoice] = useState([userInvoiceInitialValue]);\n  /* Sparara alla laddning och parkeringszoner i state */\n\n  console.log(userInvoice);\n  useEffect(() => {\n    const getAllCities = async () => {\n      let allCities = await Api.getAllCitys();\n      allCities.forEach(element => {\n        setAllCharging_posts(element.charging_posts);\n        setAllParkingZones(element.parking_zones);\n      });\n    };\n\n    getAllCities();\n    setUserTrips(props);\n  }, [props]);\n\n  function checkAllUsersTrips() {\n    let arrayOfTrips = [];\n    userTrips.props.forEach(trip => {\n      var startFee = 10;\n      let timeFee = 2.5;\n      var discountStartFee = false;\n      let time = getTimeOfTrip(trip.start.time, trip.stop.time);\n      var tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n      var tripStarted = [trip.start.position.lat, trip.start.position.lng];\n      var startAtParkingZone = checkIfCoordInParkingZone(tripStarted);\n      var endedAtParkingZone = checkIfCoordInParkingZone(tripEnded);\n      var startChargePoint = checkIfCoordInChargingPost(tripStarted);\n      var endedAtChargePoint = checkIfCoordInChargingPost(tripEnded);\n      /* Om en resa börjar i fri parkering och slutar på en definerad blir startavg lägre */\n\n      if (startAtParkingZone === undefined || startChargePoint === undefined) {\n        if (endedAtParkingZone === true || endedAtChargePoint === true) {\n          startFee = startFee * 0.88;\n          discountStartFee = true;\n        }\n      }\n\n      const atrip = {\n        tripId: trip.id,\n        date: trip.date,\n        startAtParkingZone: startAtParkingZone,\n        endedAtParkingZone: endedAtParkingZone,\n        startChargePoint: startChargePoint,\n        endedAtChargePoint: endedAtChargePoint,\n        timeOfTrip: time,\n        startFee: startFee,\n        timeFee: time * timeFee,\n        discountStartFee: discountStartFee\n      };\n      arrayOfTrips.push(atrip);\n    });\n    setUserInvoice(arrayOfTrips);\n  }\n  /*  loopara igenom alla chargingposts, \n      ser om koordinaterna finns inuti polygon,\n      retunerar endast true */\n\n\n  function checkIfCoordInParkingZone(tripEnded) {\n    let res;\n\n    for (var elem of allParkingZones) {\n      let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n      res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n      if (res === true) {\n        return true;\n      }\n    }\n  }\n  /*  loopara igenom alla chargingposts,\n      ser om koordinaterna finns inuti polygon,\n      retunerar endast true */\n\n\n  function checkIfCoordInChargingPost(tripEnded) {\n    let res;\n\n    for (var elem of allCharging_posts) {\n      let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n      res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n      if (res === true) {\n        return true;\n      }\n    }\n  }\n  /* Räknar ut tiden för resan, gör om till sekunder \n      subtraherar och dividerar för att få ut minuter\n  */\n\n\n  function getTimeOfTrip(starttime, stoptime) {\n    var arrStarttime = starttime.split(\".\");\n    var arrStoptime = stoptime.split(\".\");\n    arrStarttime[0] = arrStarttime[0] * 60 * 60;\n    arrStarttime[1] = arrStarttime[1] * 60;\n    arrStoptime[0] = arrStoptime[0] * 60 * 60;\n    arrStoptime[1] = arrStoptime[1] * 60;\n    var stopTime = arrStoptime[0] + arrStoptime[1];\n    var startTime = arrStarttime[0] + arrStarttime[1];\n    var time = (stopTime - startTime) / 60;\n    return time;\n  }\n\n  function checkIfPointInPolyGon(point, polygone) {\n    return pointInPolygon(point, polygone);\n  }\n\n  async function calculateCost() {\n    checkAllUsersTrips();\n  }\n\n  const ref = React.createRef();\n  const myHTML = userInvoice;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Post\",\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pdf, {\n      targetRef: ref,\n      filename: \"new.pdf\",\n      children: _ref => {\n        let {\n          toPdf\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: calculateCost,\n          children: \"Spara som PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 33\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true) // <button onClick={calculateCost}>Faktura</button>\n  ;\n}\n\n_s(Invoice, \"T3Qm/KWOkE+ohdeV589GLCKLJtg=\");\n\n_c = Invoice;\n\nvar _c;\n\n$RefreshReg$(_c, \"Invoice\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Invoice/index.js"],"names":["Pdf","React","useEffect","useState","Api","Container","pointInPolygon","require","userInvoiceInitialValue","tripId","endedAtChargePoint","endedAtLoadStation","timeOfTrip","startFee","discountStartFee","fromFreePark2Defined","Invoice","props","allCharging_posts","setAllCharging_posts","allParkingZones","setAllParkingZones","userTrips","setUserTrips","userInvoice","setUserInvoice","console","log","getAllCities","allCities","getAllCitys","forEach","element","charging_posts","parking_zones","checkAllUsersTrips","arrayOfTrips","trip","timeFee","time","getTimeOfTrip","start","stop","tripEnded","position","lat","lng","tripStarted","startAtParkingZone","checkIfCoordInParkingZone","endedAtParkingZone","startChargePoint","checkIfCoordInChargingPost","undefined","atrip","id","date","push","res","elem","polyGon","polygonePart1","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","starttime","stoptime","arrStarttime","split","arrStoptime","stopTime","startTime","point","polygone","calculateCost","ref","createRef","myHTML","toPdf"],"mappings":"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","sourcesContent":["import Pdf from \"react-to-pdf\";\nimport {React, useEffect, useState } from \"react\";\n\n//components\nimport Api from '../../api'\n//styles & img\nimport {Container} from './Form.styles'\n//other\nvar pointInPolygon = require('point-in-polygon');\n\n\nconst userInvoiceInitialValue = {\n    tripId: \"\",\n    endedAtChargePoint: false,\n    endedAtLoadStation: \"\",\n    timeOfTrip: \"\",\n    startFee: 10,\n    discountStartFee: \"\",\n    fromFreePark2Defined: \"\"\n}\n\n\nexport default function Invoice(props) {\n\t//hooks\n    // måste ha resan och koordinaterna\n    // måste senare räkna ut var koordinaterna ligger och jmföra\n\n    const [allCharging_posts, setAllCharging_posts] = useState([]) //parkering och laddstationer\n    const [allParkingZones, setAllParkingZones] = useState([])\n    const [userTrips, setUserTrips] = useState([]);\n    const [userInvoice, setUserInvoice] = useState([userInvoiceInitialValue])\n    /* Sparara alla laddning och parkeringszoner i state */\n    \n    console.log(userInvoice)\n\n    useEffect(() => {\n        const getAllCities = async () => {\n\n        let allCities = await Api.getAllCitys();\n        allCities.forEach(element => {\n            setAllCharging_posts(element.charging_posts)\n            setAllParkingZones(element.parking_zones)\n            });\n        }\n        getAllCities()\n        setUserTrips(props)\n        \n    }, [props])\n\n\n    function checkAllUsersTrips() {\n        let arrayOfTrips = []\n        \n        userTrips.props.forEach(trip => {\n            var startFee = 10;\n            let timeFee = 2.5;\n            var discountStartFee = false;\n\n            let time = getTimeOfTrip(trip.start.time, trip.stop.time)\n            var tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n            var tripStarted = [trip.start.position.lat, trip.start.position.lng];\n            var startAtParkingZone = checkIfCoordInParkingZone(tripStarted);\n            var endedAtParkingZone = checkIfCoordInParkingZone(tripEnded);\n            var startChargePoint = checkIfCoordInChargingPost(tripStarted);\n            var endedAtChargePoint = checkIfCoordInChargingPost(tripEnded);\n\n            /* Om en resa börjar i fri parkering och slutar på en definerad blir startavg lägre */\n            if(startAtParkingZone === undefined || startChargePoint === undefined) {\n                if (endedAtParkingZone === true || endedAtChargePoint === true) {\n                    startFee = startFee * 0.88;\n                    discountStartFee = true;\n                }\n            }\n\n            const atrip = { \n\t\t\t\ttripId: trip.id,\n                date: trip.date,\n                startAtParkingZone: startAtParkingZone,\n                endedAtParkingZone: endedAtParkingZone,\n                startChargePoint: startChargePoint,\n                endedAtChargePoint: endedAtChargePoint,\n                timeOfTrip: time,\n                startFee: startFee,\n                timeFee: time * timeFee,\n                discountStartFee: discountStartFee,\n            }\n            arrayOfTrips.push(atrip);\n        })\n        setUserInvoice(arrayOfTrips)\n    }\n\n    \n    /*  loopara igenom alla chargingposts, \n        ser om koordinaterna finns inuti polygon,\n        retunerar endast true */\n    function checkIfCoordInParkingZone(tripEnded) {\n        let res;\n        for (var elem of allParkingZones) {\n            let polyGon = [\n                [elem.position.polygonePart1.lat,\n                elem.position.polygonePart1.lng],\n                [elem.position.polygonePart2.lat,\n                elem.position.polygonePart2.lng],\n                [elem.position.polygonePart3.lat,\n                elem.position.polygonePart3.lng],\n                [elem.position.polygonePart4.lat,\n                elem.position.polygonePart4.lng]\n            ]\n            res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n            if(res === true) {\n                return true\n            }\n        }\n    }\n\n    /*  loopara igenom alla chargingposts,\n        ser om koordinaterna finns inuti polygon,\n        retunerar endast true */\n    function checkIfCoordInChargingPost(tripEnded) {\n        let res;\n        for (var elem of allCharging_posts) {\n            let polyGon = [\n                [elem.position.polygonePart1.lat,\n                elem.position.polygonePart1.lng],\n                [elem.position.polygonePart2.lat,\n                elem.position.polygonePart2.lng],\n                [elem.position.polygonePart3.lat,\n                elem.position.polygonePart3.lng],\n                [elem.position.polygonePart4.lat,\n                elem.position.polygonePart4.lng]\n            ]\n            res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n            if(res === true) {\n                return true\n            }\n       } \n    }\n\n    /* Räknar ut tiden för resan, gör om till sekunder \n        subtraherar och dividerar för att få ut minuter\n    */\n    function getTimeOfTrip(starttime, stoptime) {\n\n        var arrStarttime = starttime.split(\".\");\n        var arrStoptime = stoptime.split(\".\"); \n\n        arrStarttime[0] = arrStarttime[0] * 60 * 60;\n        arrStarttime[1] = arrStarttime[1] * 60;\n        arrStoptime[0] = arrStoptime[0] * 60 * 60;\n        arrStoptime[1] = arrStoptime[1] * 60;\n        \n        var stopTime = arrStoptime[0] + arrStoptime[1];\n        var startTime = arrStarttime[0] + arrStarttime[1];\n        var time = (stopTime - startTime) / 60;\n\n        return time\n    }\n\n\n\n\n\n\n    function checkIfPointInPolyGon(point, polygone) {\n\n        return pointInPolygon(point, polygone);\n    }\n\n    async function calculateCost() {\n        checkAllUsersTrips()\n    }\n    const ref = React.createRef();\n\n    const myHTML = userInvoice;\n\n\treturn (\n        <>\n            <div className=\"Post\" ref={ref}>\n                </div>\n            <Pdf targetRef={ref} filename=\"new.pdf\">\n                {({ toPdf }) => <button onClick={calculateCost}>Spara som PDF</button>}\n            </Pdf>\n        </>\n\n        // <button onClick={calculateCost}>Faktura</button>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}