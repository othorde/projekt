{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getAllCitys } from '../Api';\nlet initalValue = {\n  showLoadStations: false,\n  loadStations: []\n};\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\n\nconst useDisplayPolyChargeStation = (mapRef, _ref) => {\n  _s();\n\n  let {\n    ifToShowLoadStations\n  } = _ref;\n  const [loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n\n  const [loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n\n  const [loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n  // funktion som kan toggla state, används från map\n\n  const showInfoForLoadStation = trueOrFalse => {\n    setLoadStationContent({\n      showLoadStations: trueOrFalse\n    });\n  }; // Om props ändras samt vid mount.\n  // Är props true hämta data. Om false ta bort från karta\n\n\n  useEffect(() => {\n    // Hämta data\n    const getData = async () => {\n      try {\n        setLoadStationError(false);\n        let res = await getAllCitys();\n        handleSucces(res);\n      } catch (error) {\n        setLoadStationError(true);\n      }\n    }; // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n\n\n    const removeLoadingStationsFromMap = () => {\n      loadStationContent !== null && loadStationObject.forEach(loadStation => {\n        loadStation.setMap(null);\n      });\n    };\n    /* \n    loopar igenom res från db, tar ut alla koordinatera som\n    är laddstationer, skapar sedan ny polygon med dessa\n    och lägger på ett klickevent. Sparar obj i state\n    så att det senare kan tas bort\n    */\n\n\n    const handleSucces = res => {\n      var loadStationName;\n      const map = mapRef.current.map;\n      const maps = mapRef.current.maps;\n      res.forEach(cityCoords => {\n        cityCoords.charging_posts.forEach(loadStations => {\n          let polyGon = [loadStations.position.polygonePart1, loadStations.position.polygonePart2, loadStations.position.polygonePart3, loadStations.position.polygonePart4];\n          loadStationName = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: loadStations.color,\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35\n          });\n          loadStationName.addListener('click', () => {\n            setLoadStationContent(prevState => ({\n              showLoadStations: !prevState.showLoadStations,\n              loadStations\n            }));\n          });\n          loadStationName.setMap(map); // Kopierar tidigare state + lägger in nytt element sedan sätter state\n\n          var holdArr = loadStationObject;\n          holdArr.push(loadStationName);\n          setLoadStationObject(holdArr);\n        });\n      });\n    };\n\n    if (ifToShowLoadStations.loadStation) {\n      getData();\n      const interval = setInterval(() => {\n        getData();\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n\n    ifToShowLoadStations.loadStation === false && removeLoadingStationsFromMap();\n  }, [ifToShowLoadStations.loadStation, loadStationContent, loadStationObject, mapRef]);\n  return {\n    loadStationObject,\n    loadStationContent,\n    loadStationError,\n    showInfoForLoadStation\n  };\n};\n\n_s(useDisplayPolyChargeStation, \"AVzT48Wg0hJquwML8FgwtjqT1z4=\");\n\nexport default useDisplayPolyChargeStation;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyChargeStation.js"],"names":["useState","useEffect","getAllCitys","initalValue","showLoadStations","loadStations","useDisplayPolyChargeStation","mapRef","ifToShowLoadStations","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","showInfoForLoadStation","trueOrFalse","getData","res","handleSucces","error","removeLoadingStationsFromMap","forEach","loadStation","setMap","loadStationName","map","current","maps","cityCoords","charging_posts","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","holdArr","push","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport {getAllCitys} from '../Api';\n\nlet initalValue = {\n\tshowLoadStations: false,\n\tloadStations: []\n}\n\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\nconst useDisplayPolyChargeStation = (mapRef, {ifToShowLoadStations}) => {\n    const[loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n    const[loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n    const[loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n\n    \n    // funktion som kan toggla state, används från map\n    const showInfoForLoadStation = (trueOrFalse) => {\n        setLoadStationContent({ showLoadStations: trueOrFalse});\n\t}\n    // Om props ändras samt vid mount.\n    // Är props true hämta data. Om false ta bort från karta\n    useEffect(()=>{\n            \n        // Hämta data\n        const getData = async () => {\n            try {\n                setLoadStationError(false)\n                let res = await getAllCitys();\n                handleSucces(res)\n            } catch (error) {\n                setLoadStationError(true)\n            }\n        }\n\n        // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n        const removeLoadingStationsFromMap = () => {\n            loadStationContent !== null && loadStationObject.forEach(loadStation => {\n                loadStation.setMap(null);\n            })\n        }\n\n        /* \n        loopar igenom res från db, tar ut alla koordinatera som\n        är laddstationer, skapar sedan ny polygon med dessa\n        och lägger på ett klickevent. Sparar obj i state\n        så att det senare kan tas bort\n        */\n       const handleSucces = (res) => {\n        var loadStationName;\n        const map = mapRef.current.map;\n        const maps = mapRef.current.maps;\n    \n        res.forEach(cityCoords => {\n            cityCoords.charging_posts.forEach(loadStations => {         \n                let polyGon = \n                    ([\n                        loadStations.position.polygonePart1,\n                        loadStations.position.polygonePart2,\n                        loadStations.position.polygonePart3,\n                        loadStations.position.polygonePart4,\n                    ]);\n                loadStationName = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: loadStations.color,\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                loadStationName.addListener('click', () => {\n                    setLoadStationContent(prevState => ({\n                        showLoadStations: !prevState.showLoadStations,\n                        loadStations\n                    }));\n                });\n                loadStationName.setMap(map);\n                // Kopierar tidigare state + lägger in nytt element sedan sätter state\n                var holdArr = loadStationObject;\n                holdArr.push(loadStationName);\n                setLoadStationObject(holdArr);\n                })\n\n            })\n        };\n\n        if(ifToShowLoadStations.loadStation) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowLoadStations.loadStation === false && removeLoadingStationsFromMap()  \n    },[ifToShowLoadStations.loadStation, loadStationContent, loadStationObject, mapRef])\n\n    return {loadStationObject, loadStationContent, loadStationError, showInfoForLoadStation};\n}\nexport default useDisplayPolyChargeStation;\n\n"]},"metadata":{},"sourceType":"module"}