{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { checkIfCoordInChargingPost, checkIfCoordInParkingZone } from '../../helperfunction/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [allParkingZones, setAllParkingZones] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [city, setCity] = useState([]); //parkering och laddstationer\n\n  /* hämtar alla ladd/parkeringszoner sparar i state \n      KONTROLLERA SÅ att denna fungerar med flera städer\n  */\n\n  async function getLoadStationsForMovingBike() {\n    try {\n      let city = await Api.getACity(props.city);\n      setCity(city[0].city);\n      setCharging_posts(city[0].charging_posts);\n      setAllParkingZones(city[0].parking_zones);\n    } catch (error) {\n      setMessage(\"Något gick fel vid hämtningen från servern\");\n    }\n  }\n  /* När admin förflyttar cykel \n      Behöver uppdatera en del, alla är beroende av varandra\n      så måste kolla först att det går igenom innan nästa\n  */\n\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor === '' || moveBikeToColor === null) {\n      // Om inget val görs\n      setMessage(\"Välj först vart du vill förflytta cykeln\");\n    } else {\n      let newPosition = calculateScooterNewPosition();\n\n      if (newPosition) {\n        updateScooter(newPosition);\n        updateScootersUser();\n        updateScooterLogg(newPosition);\n        updateZon();\n      }\n    }\n  };\n  /* Uppdaterar själva scootern */\n\n\n  async function updateScooter(newPosition) {\n    var position = props.position;\n    var speed = \"0\";\n    var battery = \"100\";\n\n    if (position !== null) {\n      var response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n      console.log(response, \"SCOOTER\");\n\n      if (response === false) {\n        setMessage(\"Kunde ej uppdatera scootern\");\n      }\n    }\n  }\n  /* uppdaterar scooterns användare */\n\n\n  async function updateScootersUser() {\n    var response = await Api.updateAScootersUser(props.id);\n    console.log(response, \"SCOOTERUSER\");\n\n    if (response === false) {\n      setMessage(\"Kunde ej uppdatera användaren\");\n    }\n  }\n\n  async function updateScooterLogg(newPosition) {\n    var active_user = \"null\";\n    var event = getEventString(newPosition);\n    var {\n      time\n    } = getTime();\n    const varForUpdate = {\n      id: props.id,\n      active_user: active_user,\n      event: event,\n      start_lat: props.position.lat,\n      start_lng: props.position.lng,\n      time: time,\n      end_lat: newPosition.lat,\n      end_lng: newPosition.lng\n    };\n    var response = await Api.updateAScootersLogg(varForUpdate);\n    console.log(response, \"SCOOTERLOGG\");\n\n    if (response) {\n      setMessage(\"Cykel förflyttad, logg uppdaterad\");\n    } else {\n      setMessage(\"Något gick fel, kunde ej uppdatera logg\");\n    }\n  }\n  /* UPPDATERA ZONER */\n\n  /* Tid för eventet (loggen) +1 i månad, så blir det rätt\n      Lägger även till en nolla om minuter är under 10. \n      annars blir det 18.5 istför 18.05\n  */\n\n\n  function getTime() {\n    var today = new Date();\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    var min = today.getMinutes();\n\n    if (min < 10) {\n      min = `0${min}`;\n    }\n\n    var time = today.getHours() + \":\" + min;\n    var dateTime = date + ' ' + time;\n    return {\n      time,\n      dateTime\n    };\n  }\n  /* String för event (loggen) */\n\n\n  function getEventString(newPosition) {\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var movedBy = myContext.userHook.value.user;\n    var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n    return event;\n  }\n  /* Räknar ut ny position inom den zon som scootern ska flyttas till\n      Om den nya zonen ej är inom området så anropas denna funktionen igen\n      för att hitta en ny position som stämmer. Matten är inte exakt.\n  */\n\n\n  function calculateScooterNewPosition() {\n    let newPosition;\n    let position = props.position;\n    var insidePoly = false;\n    charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n    let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n    let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n    var polygone = [[newPosition.polygonePart1.lat, newPosition.polygonePart1.lng], [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng], [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng], [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]];\n    newPosition = {\n      lat: lat,\n      lng: lng\n    };\n    var newPositionArr = [newPosition.lat, newPosition.lng];\n\n    var pointInPolygon = require('point-in-polygon');\n\n    var insidePoly = pointInPolygon(newPositionArr, polygone);\n\n    if (!insidePoly) {\n      return calculateScooterNewPosition();\n    }\n\n    if (insidePoly) {\n      return newPosition;\n    }\n  }\n  /* Kontrollerar om start pos för cykel finns i en zon mha helper function\n     OM, uppdatera den zonen med minus 1. uppdaterar alltid zonen för slutposition med +1\n  */\n\n\n  async function updateZon() {\n    let res;\n    let startCoords = props.position;\n    let amount_of_bikes;\n    let color;\n    startCoords = [startCoords.lat, startCoords.lng];\n    let coordInParkingZone = checkIfCoordInParkingZone(startCoords, allParkingZones);\n    let coordInChargingPost = checkIfCoordInChargingPost(startCoords, charging_posts); //Uppdaterar zon med -1 OM cykel tidigare fanns i en parkeringszon\n\n    if (coordInParkingZone && coordInParkingZone.returned === true) {\n      amount_of_bikes = coordInParkingZone.amount_of_bikes_zone - 1;\n      color = coordInParkingZone.color;\n      res = await Api.updateNrBikesParkZone(city, amount_of_bikes, color);\n      console.log(res, \"updateZon1\");\n\n      if (res === false) {\n        setMessage(\"Kund ej uppdatera parkeringszonen\");\n      }\n    } //Uppdaterar zon med -1 OM cykel tidigare fanns i en laddstation\n\n\n    if (coordInChargingPost && coordInChargingPost.returned === true) {\n      amount_of_bikes = coordInChargingPost.amount_of_bikes_post - 1;\n      color = coordInChargingPost.color;\n      res = await Api.updateNrBikesChargePost(city, amount_of_bikes, color);\n      console.log(res, \"updateZon1\");\n\n      if (res === false) {\n        setMessage(\"Kund ej uppdatera laddstationen\");\n      }\n    } //Kollar alltid hur många cyklar som finns i station\n\n\n    res = await Api.getAllChargePost(city, moveBikeToColor);\n\n    if (res === false) {\n      setMessage(\"Kund ej hämta antal cyklar i laddstation\");\n    }\n\n    let amount_of_bikes_in_new_zone = res[0].amount_of_bikes_post + 1; // Uppdaterar alltid den nya zonen(laddstation) med +1\n\n    res = await Api.updateNrBikesChargePost(city, amount_of_bikes_in_new_zone, moveBikeToColor);\n\n    if (res === false) {\n      setMessage(\"Kund ej uppdatera laddstationen\");\n    }\n  }\n  /* timer för meddelande */\n\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 8000);\n    setMoveBikeToColor(\"\");\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        \"paddingLeft\": \"1em\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: '',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"l7cnJjY3ovzACaghjtp2Nu855Fk=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","checkIfCoordInChargingPost","checkIfCoordInParkingZone","MoveBike","props","myContext","charging_posts","setCharging_posts","allParkingZones","setAllParkingZones","moveBikeToColor","setMoveBikeToColor","message","setMessage","city","setCity","getLoadStationsForMovingBike","getACity","parking_zones","error","handleSubmit","newPosition","calculateScooterNewPosition","updateScooter","updateScootersUser","updateScooterLogg","updateZon","position","speed","battery","response","updateAScooter","id","console","log","updateAScootersUser","active_user","event","getEventString","time","getTime","varForUpdate","start_lat","lat","start_lng","lng","end_lat","end_lng","updateAScootersLogg","today","Date","date","getFullYear","getMonth","getDate","min","getMinutes","getHours","dateTime","movedBy","userHook","value","user","insidePoly","filter","elem","color","includes","polygonePart1","Math","random","polygonePart4","polygone","polygonePart2","polygonePart3","newPositionArr","pointInPolygon","require","res","startCoords","amount_of_bikes","coordInParkingZone","coordInChargingPost","returned","amount_of_bikes_zone","updateNrBikesParkZone","amount_of_bikes_post","updateNrBikesChargePost","getAllChargePost","amount_of_bikes_in_new_zone","setTimeout","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\nimport {checkIfCoordInChargingPost, checkIfCoordInParkingZone} from '../../helperfunction/helpers'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [allParkingZones, setAllParkingZones] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState(null)\n    const [message, setMessage] = useState(\"\")\n    const [city, setCity] = useState([]) //parkering och laddstationer\n    \n    /* hämtar alla ladd/parkeringszoner sparar i state \n        KONTROLLERA SÅ att denna fungerar med flera städer\n    */\n    async function getLoadStationsForMovingBike() {\n        try {\n            let city = await Api.getACity(props.city);\n            setCity(city[0].city);\n            setCharging_posts(city[0].charging_posts);\n            setAllParkingZones(city[0].parking_zones);\n        } catch (error) {\n            setMessage(\"Något gick fel vid hämtningen från servern\")\n        }\n    }\n    /* När admin förflyttar cykel \n        Behöver uppdatera en del, alla är beroende av varandra\n        så måste kolla först att det går igenom innan nästa\n    */\n    const handleSubmit = async () => {\n        if (moveBikeToColor === '' || moveBikeToColor === null) { // Om inget val görs\n            setMessage(\"Välj först vart du vill förflytta cykeln\")\n        } else {\n            let newPosition = calculateScooterNewPosition();\n            if (newPosition) {\n                updateScooter(newPosition);\n                updateScootersUser();\n                updateScooterLogg(newPosition);\n                updateZon();\n            }\n        }\n    }\n\n    /* Uppdaterar själva scootern */\n    async function updateScooter(newPosition) {\n        var position = props.position;\n        var speed = \"0\";\n        var battery = \"100\";\n\n        if (position !== null) {\n            var response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n            console.log(response, \"SCOOTER\")\n            if(response === false) {\n                setMessage(\"Kunde ej uppdatera scootern\");\n            }\n        }\n    }\n    /* uppdaterar scooterns användare */\n    async function updateScootersUser() {\n        var response = await Api.updateAScootersUser(props.id);\n        console.log(response, \"SCOOTERUSER\")\n\n        if(response === false) {\n            setMessage(\"Kunde ej uppdatera användaren\");\n        }\n    }\n\n    async function updateScooterLogg(newPosition) {\n\n        var active_user = \"null\";\n        var event = getEventString(newPosition);\n        var {time} = getTime();\n\n        const varForUpdate = {\n            id: props.id,\n            active_user: active_user,\n            event: event,\n            start_lat: props.position.lat,\n            start_lng: props.position.lng,\n            time: time,\n            end_lat: newPosition.lat,\n            end_lng: newPosition.lng,\n        }\n        var response = await Api.updateAScootersLogg(varForUpdate);\n        console.log(response, \"SCOOTERLOGG\")\n\n        if(response) {\n            setMessage(\"Cykel förflyttad, logg uppdaterad\")\n        } else {\n            setMessage(\"Något gick fel, kunde ej uppdatera logg\")\n        }  \n    }\n\n    /* UPPDATERA ZONER */\n\n    /* Tid för eventet (loggen) +1 i månad, så blir det rätt\n        Lägger även till en nolla om minuter är under 10. \n        annars blir det 18.5 istför 18.05\n    */\n    function getTime() {\n        var today = new Date();\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n        var min = today.getMinutes();\n        if(min < 10) {\n            min = `0${min}`\n        }\n        var time = today.getHours() + \":\" + min;\n        var dateTime = date+' '+time;\n        return {time, dateTime}\n    }\n\n    /* String för event (loggen) */\n    function getEventString(newPosition) {\n        var {time, dateTime} = getTime();\n        var movedBy = myContext.userHook.value.user;\n        var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n        return event\n    }\n\n    /* Räknar ut ny position inom den zon som scootern ska flyttas till\n        Om den nya zonen ej är inom området så anropas denna funktionen igen\n        för att hitta en ny position som stämmer. Matten är inte exakt.\n    */\n    function calculateScooterNewPosition() {\n        let newPosition;\n        let position = props.position;\n        var insidePoly = false;\n\n        charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n        let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n        let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n        var polygone= [\n            [newPosition.polygonePart1.lat, newPosition.polygonePart1.lng],\n            [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng],\n            [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng],\n            [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]\n        ]\n        newPosition = {lat: lat, lng: lng}\n\n        var newPositionArr = [newPosition.lat, newPosition.lng]\n        var pointInPolygon = require('point-in-polygon');\n        var insidePoly = pointInPolygon(newPositionArr, polygone);\n\n        if(!insidePoly) {\n            return calculateScooterNewPosition()\n        } \n        if(insidePoly) {\n            return newPosition\n        }\n    }\n\n\n    /* Kontrollerar om start pos för cykel finns i en zon mha helper function\n       OM, uppdatera den zonen med minus 1. uppdaterar alltid zonen för slutposition med +1\n    */\n    async function updateZon() {\n        let res;\n        let startCoords = props.position;\n        let amount_of_bikes;\n        let color;\n        startCoords = [startCoords.lat, startCoords.lng];\n        let coordInParkingZone = checkIfCoordInParkingZone(startCoords, allParkingZones);\n        let coordInChargingPost = checkIfCoordInChargingPost(startCoords, charging_posts);\n        \n        //Uppdaterar zon med -1 OM cykel tidigare fanns i en parkeringszon\n        if(coordInParkingZone && coordInParkingZone.returned === true) {\n\n            amount_of_bikes = coordInParkingZone.amount_of_bikes_zone - 1;\n            color = coordInParkingZone.color;\n            res = await Api.updateNrBikesParkZone(city, amount_of_bikes, color);\n            console.log(res, \"updateZon1\")\n\n            if(res === false){\n                setMessage(\"Kund ej uppdatera parkeringszonen\")\n            }\n        }\n        //Uppdaterar zon med -1 OM cykel tidigare fanns i en laddstation\n        if (coordInChargingPost && coordInChargingPost.returned === true) {\n\n            amount_of_bikes = coordInChargingPost.amount_of_bikes_post - 1;\n            color = coordInChargingPost.color;\n            res = await Api.updateNrBikesChargePost(city, amount_of_bikes, color);\n            console.log(res, \"updateZon1\")\n\n            if(res === false){\n                setMessage(\"Kund ej uppdatera laddstationen\")\n            }\n        }\n        //Kollar alltid hur många cyklar som finns i station\n        res = await Api.getAllChargePost(city, moveBikeToColor);\n\n        if(res === false) {\n            setMessage(\"Kund ej hämta antal cyklar i laddstation\")\n        }\n        let amount_of_bikes_in_new_zone = res[0].amount_of_bikes_post + 1;\n\n        // Uppdaterar alltid den nya zonen(laddstation) med +1\n        res = await Api.updateNrBikesChargePost(city, amount_of_bikes_in_new_zone, moveBikeToColor);\n        if(res === false) {\n            setMessage(\"Kund ej uppdatera laddstationen\")\n        }\n    }\n\n    /* timer för meddelande */\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 8000);\n        setMoveBikeToColor(\"\")\n    }, [message])\n\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {/* meddelande om det går bra/dåligt med uppdatering */}\n            {message && <p style={{color:\"red\", \"paddingLeft\": \"1em\"}}> {message} </p>} \n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                    setMoveBikeToColor(e.target.value)\n            }}\n            value={moveBikeToColor}\n            >\n            {/* Options för vart cyklen ska flyttas */}\n            <option value={''}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}