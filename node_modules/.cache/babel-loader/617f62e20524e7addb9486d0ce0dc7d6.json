{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showParkingZone: false,\n  loadParkingZone: []\n};\n\nconst useLoadParkingZones = (mapRef, props) => {\n  _s();\n\n  const [parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n  // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n\n  const [resFromApi, setResFromApi] = useState(null);\n  const [error1, setError1] = useState();\n\n  const handleSucces = res => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(loadParkingZone => {\n      console.log(loadParkingZone.parking_zones);\n      cityCoords.parking_zones.forEach(parking_zone => {\n        let polyGon = [parking_zone.position.polygonePart1, parking_zone.position.polygonePart2, parking_zone.position.polygonePart3, parking_zone.position.polygonePart4];\n        parkingZoneName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: parking_zone.color,\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        parkingZoneName.addListener('click', event => {\n          setParkingZoneContent(prevState => ({\n            showParkingZone: !prevState.showParkingZone,\n            loadParkingZone\n          }));\n        });\n        parkingZoneName.setMap(map);\n        setParkingZoneObject(oldArray => [...oldArray, parkingZoneName]);\n      });\n    });\n  }; // funktion som kan toggla state, från andra komponenter\n\n\n  const showInfoForParkingZone = trueOrFalse => {\n    setParkingZoneContent({\n      showParkingZone: trueOrFalse\n    });\n  };\n\n  const handleError = error => {\n    setError1(error.message);\n  }; // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n  // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\n\n  function removeParkingZonesFromMap() {\n    if (parkingZoneObject !== null) {\n      parkingZoneObject.forEach(parkingZone => {\n        console.log(parkingZoneObject);\n        parkingZone.setMap(null);\n      });\n    }\n\n    return;\n  }\n\n  useEffect(async () => {\n    // Om loadParkingZone ska tas bort från kartan\n    if (props.ifToshowParkingZone.parkingZone === false) {\n      removeParkingZonesFromMap(mapRef);\n      return;\n    } // Om state är null == ej hämtat från backend ännu\n\n\n    if (resFromApi === null) {\n      let res = await Api.getAllCitys();\n      setResFromApi(res);\n      handleSucces(res); // Annars använd det som är sparat i state\n    } else if (resFromApi != null) {\n      handleSucces(resFromApi);\n    } else {\n      handleError(\"Error\");\n      return;\n    } // geolocation.getCurrentPosition(handleSucces, handleError, options)\n\n  }, [mapRef, props.ifToshowParkingZone.parkingZone]);\n  return {\n    parkingZoneObject,\n    parkingZoneContent,\n    error1,\n    showInfoForParkingZone\n  };\n};\n\n_s(useLoadParkingZones, \"L3fASfXIA2+IIUjCsDa01rBIJ2M=\");\n\nexport default useLoadParkingZones;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadParkingZoneToMap.js"],"names":["useState","useEffect","Api","initalValue","showParkingZone","loadParkingZone","useLoadParkingZones","mapRef","props","parkingZoneObject","setParkingZoneObject","parkingZoneContent","setParkingZoneContent","resFromApi","setResFromApi","error1","setError1","handleSucces","res","parkingZoneName","map","current","maps","forEach","console","log","parking_zones","cityCoords","parking_zone","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","prevState","setMap","oldArray","showInfoForParkingZone","trueOrFalse","handleError","error","message","removeParkingZonesFromMap","parkingZone","ifToshowParkingZone","getAllCitys"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowParkingZone: false,\n\tloadParkingZone: []\n}\n\nconst useLoadParkingZones = (mapRef, props) => {\n    const[parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n    // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n    const[resFromApi, setResFromApi] = useState(null); \n    const [error1, setError1] = useState();\n    const handleSucces = (res) => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.forEach(loadParkingZone => {\n        console.log(loadParkingZone.parking_zones)\n        cityCoords.parking_zones.forEach(parking_zone => {         \n            let polyGon = \n                ([\n                    parking_zone.position.polygonePart1,\n                    parking_zone.position.polygonePart2,\n                    parking_zone.position.polygonePart3,\n                    parking_zone.position.polygonePart4,\n                ]);\n            parkingZoneName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: parking_zone.color,\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35,\n                });\n            \n            parkingZoneName.addListener('click', (event) => {\n                setParkingZoneContent(prevState => ({\n                    showParkingZone: !prevState.showParkingZone,\n                    loadParkingZone\n                }));\n            });\n        parkingZoneName.setMap(map);\n        setParkingZoneObject(oldArray => [...oldArray, parkingZoneName]);\n        })\n\n    })\n};\n\n    // funktion som kan toggla state, från andra komponenter\n    const showInfoForParkingZone = (trueOrFalse) => {\n        setParkingZoneContent({ showParkingZone: trueOrFalse});\n\t}\n\n    const handleError = (error) => {\n        setError1(error.message);\n    };\n\n    // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n    // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\tfunction removeParkingZonesFromMap() { \n\t\tif (parkingZoneObject !== null) {\n\t\t\tparkingZoneObject.forEach(parkingZone => {\n                console.log(parkingZoneObject)\n\t\t\t\tparkingZone.setMap(null);\n\t\t\t})\n\t\t}\n        return\n\t}\n\n    useEffect(async () => {\n        // Om loadParkingZone ska tas bort från kartan\n        if (props.ifToshowParkingZone.parkingZone === false ) {\n            removeParkingZonesFromMap(mapRef)\n            return\n        }\n        // Om state är null == ej hämtat från backend ännu\n        if (resFromApi === null) {\n            let res = await Api.getAllCitys();\n            setResFromApi(res);\n            handleSucces(res)\n        // Annars använd det som är sparat i state\n        } else if (resFromApi != null) {\n            handleSucces(resFromApi);\n        } else {\n            handleError(\"Error\")\n            return;\n        }\n        // geolocation.getCurrentPosition(handleSucces, handleError, options)\n    },[mapRef, props.ifToshowParkingZone.parkingZone])\n    \n    return {parkingZoneObject, parkingZoneContent, error1, showInfoForParkingZone};\n};\nexport default useLoadParkingZones;\n\n"]},"metadata":{},"sourceType":"module"}