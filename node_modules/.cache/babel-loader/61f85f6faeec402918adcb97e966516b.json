{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{useState,useEffect}from'react';import Api from'../Api';/* Hämtar alla städer */export var useFetchAllCities=function useFetchAllCities(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),cities=_useState2[0],setCities=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),loadingCities=_useState4[0],setLoadingCities=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),messageCities=_useState6[0],setMessageCities=_useState6[1];var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var allCities;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setLoadingCities(true);_context.next=4;return Api.getAllCitys();case 4:allCities=_context.sent;allCities.length>0?setCities(allCities):setMessageCities(\"Städerna kunde ej läsas in\");_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);setMessageCities(\"Något gick fel med hämtningen från servern\");case 11:setLoadingCities(false);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function fetchData(){return _ref.apply(this,arguments);};}();/* Kör funktionen endast vid mount */useEffect(function(){fetchData();},[]);return{cities:cities,loadingCities:loadingCities,messageCities:messageCities};};// /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n// }, [user, state, loading, error, message])","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useFetchAllCities.js"],"names":["useState","useEffect","Api","useFetchAllCities","cities","setCities","loadingCities","setLoadingCities","messageCities","setMessageCities","fetchData","getAllCitys","allCities","length"],"mappings":"8bAAA,OAAQA,QAAR,CAAkBC,SAAlB,KAAmC,OAAnC,CACA,MAAOC,CAAAA,GAAP,KAAgB,QAAhB,CAEA,wBACA,MAAO,IAAOC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAEvC,cAA4BH,QAAQ,EAApC,wCAAOI,MAAP,eAAeC,SAAf,eACA,eAA0CL,QAAQ,EAAlD,yCAAOM,aAAP,eAAsBC,gBAAtB,eACA,eAA0CP,QAAQ,EAAlD,yCAAOQ,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,SAAS,0FAAG,iKAEPH,gBAAgB,CAAC,IAAD,CAAhB,CAFO,sBAGiBL,CAAAA,GAAG,CAACS,WAAJ,EAHjB,QAGDC,SAHC,eAIPA,SAAS,CAACC,MAAV,CAAmB,CAAnB,CAAuBR,SAAS,CAACO,SAAD,CAAhC,CAA8CH,gBAAgB,CAAC,4BAAD,CAA9D,CAJO,+EAOPA,gBAAgB,CAAC,4CAAD,CAAhB,CAPO,QASXF,gBAAgB,CAAC,KAAD,CAAhB,CATW,oEAAH,kBAATG,CAAAA,SAAS,0CAAf,CAYA,qCACAT,SAAS,CAAC,UAAM,CACfS,SAAS,GACT,CAFQ,CAEN,EAFM,CAAT,CAIA,MAAO,CAACN,MAAM,CAANA,MAAD,CAASE,aAAa,CAAbA,aAAT,CAAwBE,aAAa,CAAbA,aAAxB,CAAP,CACA,CAxBM,CAiCP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import {useState, useEffect } from 'react'\nimport Api from '../Api';\n\n/* Hämtar alla städer */\nexport const  useFetchAllCities = () => {\n\n\tconst [cities, setCities] = useState();\n\tconst [loadingCities, setLoadingCities] = useState();\n\tconst [messageCities, setMessageCities] = useState();\n\n\tconst fetchData = async () => {\n        try {\n            setLoadingCities(true)\n            const allCities = await Api.getAllCitys()\n            allCities.length > 0 ? setCities(allCities) : setMessageCities(\"Städerna kunde ej läsas in\");\n            \n        } catch (error) {\n            setMessageCities(\"Något gick fel med hämtningen från servern\")\n        }\n        setLoadingCities(false)\n    }\n    \n\t/* Kör funktionen endast vid mount */\n\tuseEffect(() => {\n\t\tfetchData()\n\t}, [])\n\n\treturn {cities, loadingCities, messageCities}\n}\n\n\n\n\n\n\n\n\n// /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n\n// }, [user, state, loading, error, message])"]},"metadata":{},"sourceType":"module"}