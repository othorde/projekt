{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Payment\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\"; //components\n\nimport User from \"../../components/User/index.js\";\nimport Api from \"../../api.js\";\nimport AppContext from \"../../AppContext.js\"; //styles\n\nimport { Content, Delimiter, StylePayment, StylePayment2, Subscription } from \"./Form.styles.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  showMsgSubs: false,\n  showMsgOnePay: false,\n  msg: \"\"\n};\n\nconst Payment = props => {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [msgForUser, setMsgForUser] = useState(initialValue);\n  const [onePayment, setOnePayment] = useState(0);\n  let userName = myContext.user.username; // KOLLA vad meddelandena blir från backend\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let showMsgSubs = false;\n    let showMsgOnePay = false;\n    let msg = \"\";\n    let result;\n    let id;\n\n    if (onePayment && props.userDetails.data._id) {\n      showMsgOnePay = true;\n      id = props.userDetails.data._id;\n\n      if (onePayment) {\n        result = await Api.updateUserFunds(onePayment, id);\n        msg = \"Din insättning har gått igenom\";\n      }\n    } else {\n      msg = \"Något gick fel... testa igen senare (id)\";\n    }\n\n    if (result != \"OK\") {\n      msg = \"Något gick fel... testa igen senare\";\n    }\n\n    setMsgForUser({\n      showMsgSubs: showMsgSubs,\n      showMsgOnePay: showMsgOnePay,\n      msg: msg\n    });\n    setOnePayment(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Content, {\n    children: /*#__PURE__*/_jsxDEV(StylePayment, {\n      children: [msgForUser.showMsgOnePay ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msgForUser.msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"Minsta möjliga insättning (100:-) \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 68\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Belopp att s\\xE4tta in\",\n            type: \"number\",\n            name: \"onepayment\",\n            required: true,\n            value: onePayment || \"\",\n            onChange: e => setOnePayment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Delimiter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"S\\xE4tt in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Payment, \"TkUhd8Rct6RL+8uiYL9P7atX1NY=\");\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Payment/index.js"],"names":["React","useState","useContext","useEffect","User","Api","AppContext","Content","Delimiter","StylePayment","StylePayment2","Subscription","initialValue","showMsgSubs","showMsgOnePay","msg","Payment","props","myContext","msgForUser","setMsgForUser","onePayment","setOnePayment","userName","user","username","handleSubmit","event","preventDefault","result","id","userDetails","data","_id","updateUserFunds","e","target","value"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\n//components\nimport User from \"../../components/User/index.js\";\nimport Api from \"../../api.js\";\nimport AppContext from \"../../AppContext.js\";\n//styles\nimport { Content, Delimiter, StylePayment, StylePayment2, Subscription} from \"./Form.styles.js\";\n\nconst initialValue = {\n    showMsgSubs: false,\n    showMsgOnePay: false,\n    msg: \"\"\n}\n\nconst Payment = (props) => {\n    const myContext = useContext(AppContext);\n    const [msgForUser, setMsgForUser] = useState(initialValue);\n    const [onePayment, setOnePayment] = useState(0);\n\n    let userName = myContext.user.username;\n\n    // KOLLA vad meddelandena blir från backend\n    const handleSubmit = async (event)  => {\n        event.preventDefault();\n\n        let showMsgSubs = false;\n        let showMsgOnePay = false;\n        let msg = \"\";\n        let result;\n        let id;\n\n        if (onePayment && props.userDetails.data._id) {\n            showMsgOnePay = true;\n            id = props.userDetails.data._id\n            if (onePayment) {\n                result = await Api.updateUserFunds(onePayment, id);\n                msg = \"Din insättning har gått igenom\";\n            }\n        } else {\n            msg = \"Något gick fel... testa igen senare (id)\"\n        } \n        if (result != \"OK\") {\n            msg = \"Något gick fel... testa igen senare\"\n        } \n        setMsgForUser({ \n            showMsgSubs: showMsgSubs,\n            showMsgOnePay: showMsgOnePay,\n            msg: msg,\n        })\n        setOnePayment(0);\n    }\n\n\treturn (\n        <Content>\n            <StylePayment>\n            {msgForUser.showMsgOnePay ? <p>{msgForUser.msg}</p> : (<p> {\"Minsta möjliga insättning (100:-) \"}</p>)}\n            <form onSubmit={handleSubmit} className = \"register\">\n                <label>\n                <input\n                    placeholder=\"Belopp att sätta in\"\n                    type=\"number\" \n                    name=\"onepayment\"\n                    required\n                    value={onePayment || \"\"} \n                    onChange={(e) => setOnePayment(e.target.value)}\n                />\n                </label>\n                <Delimiter></Delimiter>\n                <input type=\"submit\" value=\"Sätt in\" />\n            </form>\n            </StylePayment>\n\n        </Content>\n\t);\n}\n\nexport default Payment\n\n"]},"metadata":{},"sourceType":"module"}