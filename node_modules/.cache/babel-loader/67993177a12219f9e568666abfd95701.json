{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\";\nimport Api from \"../../api\"; //styles & img\n\nimport { Style } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\nlet initalValueCitys = {\n  getStations: false,\n  content: []\n};\nexport default function MapContainer(props) {\n  _s();\n\n  const {\n    location,\n    err\n  } = useCurrentLocation(options);\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null);\n  const [citys, setCitys] = useState();\n  const [citysObject, setCitysObject] = useState([]);\n  const showBikesOrNot = props.bikes.getbike;\n  var bikeArray = props.bikes.content;\n  bikeArray = bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const [popupInfo, setPopupInfo] = useState(\"\");\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 35\n    }, this);\n  };\n\n  if (props.ifToShowCity.loadCity === true) {\n    loadCitys(mapRef.current);\n  } else {\n    removeCitys(mapRef.current);\n  }\n\n  function removeCitys() {\n    if (citysObject !== undefined) {\n      citysObject.map(city => {\n        city.setMap(null);\n      });\n    }\n  }\n\n  async function loadCitys(mapRef) {\n    try {\n      let res = await Api.getAllCitys();\n      setCitys(res); // if (res !== null && mapRef.current !== null) {\n      // \tif (props.loadingSta)\n      // \tvar cityname;\n      // \tconst map = mapRef.map;\n      // \tconst maps = mapRef.maps;\n      // \tres.map(cityCoords =>\n      // \t\t{\n      // \t\tcityname = cityCoords.city\n      // \t\tlet polyGon = \n      // \t\t\t([cityCoords.position.polygonePart1,\n      // \t\t\t\tcityCoords.position.polygonePart2,\n      // \t\t\t\tcityCoords.position.polygonePart3,\n      // \t\t\t\tcityCoords.position.polygonePart4\n      // \t\t\t]);\n      // \t\tcityname = new maps.Polygon({\n      // \t\t\tpaths: polyGon,\n      // \t\t\tstrokeColor: \"#FF0000\",\n      // \t\t\tstrokeOpacity: 0.9,\n      // \t\t\tstrokeWeight: 2,\n      // \t\t\tfillColor: \"transparent\",\n      // \t\t\tfillOpacity: 0.35,\n      // \t\t\t});\n      // \t\tconsole.log(\"Setmap\")\n      // \t\tcityname.setMap(map);\n      // \t\tsetCitysObject(oldArray => [...oldArray, cityname]);\n      // \t\tconsole.log(\"Setmap\")\n      // \t\t})\n      // \t}\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Style, {\n    children: [location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      defaultZoom: 3,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: _ref2 => {\n        let {\n          map,\n          maps\n        } = _ref2;\n        mapRef.current = {\n          map,\n          maps\n        };\n      },\n      onChange: _ref3 => {\n        let {\n          zoom,\n          bounds,\n          map,\n          maps\n        } = _ref3;\n        setZoom(zoom);\n        setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        lat: location.latitude,\n        lng: location.longitude,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"crime-marker\",\n            src: personimg,\n            alt: \"scooter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 5\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 4\n      }, this), showBikesOrNot ? bikeArray.map(bike => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: bike.location.latitude,\n          lng: bike.location.longitude,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setPopupInfo(bike),\n            className: \"crime-marker\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"scooter\",\n              src: bikeimg,\n              alt: \"scooter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 5\n          }, this)\n        }, bike.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 4\n        }, this);\n      }) : console.log(\"HE\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), popupInfo ? /*#__PURE__*/_jsxDEV(PopUp, {\n      store: popupInfo\n    }, \"popupkey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 4\n    }, this) : console.log(\"EJ POPUP\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"zABkjTXpJD8tMcPUCqL+3pUPepI=\", false, function () {\n  return [useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","PopUp","LoadCitys","Api","Style","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","initalValueCitys","getStations","content","MapContainer","props","location","err","mapRef","zoom","setZoom","bounds","setBounds","citys","setCitys","citysObject","setCitysObject","showBikesOrNot","bikes","getbike","bikeArray","slice","popupInfo","setPopupInfo","Marker","children","ifToShowCity","loadCity","loadCitys","current","removeCitys","undefined","map","city","setMap","res","getAllCitys","error","console","log","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","maps","nw","se","bike","id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\"\nimport Api from \"../../api\";\n//styles & img\nimport {Style} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n\nlet initalValueCitys = {\n\tgetStations: false,\n\tcontent: []\n};\n\nexport default function MapContainer(props) {\n\tconst { location, err } = useCurrentLocation(options);\n\tconst mapRef = useRef();\n\tconst [zoom, setZoom] = useState(10);\n\tconst [bounds, setBounds] = useState(null);\n\tconst [citys, setCitys] = useState();\n\tconst [citysObject, setCitysObject] = useState([]);\n\tconst showBikesOrNot = props.bikes.getbike;\n\tvar bikeArray = props.bikes.content;\n\tbikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\tconst [popupInfo , setPopupInfo] = useState(\"\");\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\t\n\tif(props.ifToShowCity.loadCity === true ) {\n\t\tloadCitys(mapRef.current) \n\t} else {\n\t\tremoveCitys(mapRef.current)\n\t}\n\n\tfunction removeCitys() {\n\t\tif (citysObject !== undefined) {\n\t\t\tcitysObject.map(city => {\n\t\t\t\tcity.setMap(null)\n\t\t\t})\n\t\t}\n\t}\n\n\tasync function loadCitys(mapRef) {\n\t\ttry {\n            let res = await Api.getAllCitys();\n\t\t\tsetCitys(res);\n\n\t\t\t// if (res !== null && mapRef.current !== null) {\n\n\t\t\t// \tif (props.loadingSta)\n\t\t\t// \tvar cityname;\n\t\t\t// \tconst map = mapRef.map;\n\t\t\t// \tconst maps = mapRef.maps;\n\t\t\t// \tres.map(cityCoords =>\n\t\t\t// \t\t{\n\t\t\t// \t\tcityname = cityCoords.city\n\t\t\t// \t\tlet polyGon = \n\t\t\t// \t\t\t([cityCoords.position.polygonePart1,\n\t\t\t// \t\t\t\tcityCoords.position.polygonePart2,\n\t\t\t// \t\t\t\tcityCoords.position.polygonePart3,\n\t\t\t// \t\t\t\tcityCoords.position.polygonePart4\n\t\t\t// \t\t\t]);\n\t\t\t// \t\tcityname = new maps.Polygon({\n\t\t\t// \t\t\tpaths: polyGon,\n\t\t\t// \t\t\tstrokeColor: \"#FF0000\",\n\t\t\t// \t\t\tstrokeOpacity: 0.9,\n\t\t\t// \t\t\tstrokeWeight: 2,\n\t\t\t// \t\t\tfillColor: \"transparent\",\n\t\t\t// \t\t\tfillOpacity: 0.35,\n\t\t\t// \t\t\t});\n\t\t\t// \t\tconsole.log(\"Setmap\")\n\t\n\t\t\t// \t\tcityname.setMap(map);\n\t\t\t// \t\tsetCitysObject(oldArray => [...oldArray, cityname]);\n\t\t\t// \t\tconsole.log(\"Setmap\")\n\t\t\t// \t\t})\n\t\t\t// \t}\n\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n\t}\n\n\treturn (\n\t\t<Style>\n\t\t\t{/* \t\tKARTA\t\t */}\n\t\t\t{location ? (\n\t\t\t<GoogleMapReact \n\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\tdefaultZoom={3}\n\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t}}\n\t\t\t\tonChange={({zoom, bounds, map, maps}) => {\n\t\t\t\t\tsetZoom(zoom)\n\t\t\t\t\tsetBounds([\n\t\t\t\t\t\tbounds.nw.lng,\n\t\t\t\t\t\tbounds.se.lat,\n\t\t\t\t\t\tbounds.se.lng,\n\t\t\t\t\t\tbounds.nw.lat\n\t\t\t\t\t])\n\t\t\t\t}}\n\t\t\t>\n\t\t\t{/* \t\t1 Person \t\t*/}\n\t\t\t<Marker \n\t\t\t\tkey={1} \n\t\t\t\tlat={location.latitude} \n\t\t\t\tlng={location.longitude}\n\t\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"scooter\" />\n\t\t\t\t</div>\t\n\t\t\t</Marker>\n\t\t\t{/* \t\tAlla cyklar\t\t */}\n\t\t\t{showBikesOrNot ? (\n\t\t\tbikeArray.map(bike => {\n\t\t\treturn (\n\t\t\t<Marker \n\t\t\t\tkey={bike.id} \n\t\t\t\tlat={bike.location.latitude} \n\t\t\t\tlng={bike.location.longitude}\n\t\t\t\t>\n\t\t\t\t<div onClick={() => setPopupInfo(bike)}className=\"crime-marker\">\n\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t</div>\n\t\t\t</Marker>\n\t\t\t)\n\t\t\t})\n\t\t\t) : (console.log(\"HE\"))}\n\t\t\t</GoogleMapReact>\n\t\t\t):(<p>Loading...</p> )}\n\t\t\t{/*\t\t\t\t POPUP\t\t\t\t */}\n\t\t\t{popupInfo ? (\n\t\t\t<PopUp\n\t\t\t\tkey={\"popupkey\"}\n\t\t\t\tstore={popupInfo} \n\t\t\t\t>\n\t\t\t</PopUp>\n\t\t\t): (console.log(\"EJ POPUP\"))}\n\t\t</Style>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}