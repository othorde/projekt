{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n     */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.forEach(elem => {\n      setCharging_posts([elem]);\n    });\n  } // Vad behöver uppdateras?\n  // Scooterns plats ny long lat\n  // Uppdatera hur många som finns i föregående zon\n  // uppdatera hur många som finns i den nya zonen\n  // Fortsätt här när backend är klar\n  // glöm ej att hantera fail och error\n  // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n  // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (moveBikeToColor !== null) {\n      let position = props.position;\n      let newPosition;\n      let movedBy = myContext.user.username;\n      let today = new Date();\n      let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + ' ' + time;\n      charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n\n      if (position !== null) {\n        var lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n        var lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n        newPosition = {\n          lat: lat,\n          lng: lng\n        };\n        var logg = `${dateTime} \\n \n                    Moved(update) this bike (bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    This was carried out by ${movedBy}.\n                `;\n        let speed = \"0\";\n        let battery = \"100\";\n        let response = await Api.updateAScooter(props.id, speed, battery, newPosition, logg);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleSubmit(event),\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"rAQ8KNInSwdi1OJKD7UV8rDC6iY=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","getLoadStationsForMovingBike","city","getACity","forEach","elem","handleSubmit","e","preventDefault","position","newPosition","movedBy","user","username","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","filter","color","includes","lat","polygonePart1","Math","random","polygonePart4","lng","logg","id","battery","speed","response","updateAScooter","target","value","map","event"],"mappings":"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","sourcesContent":["import {React, useState, useContext} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n       */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.forEach(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    // Vad behöver uppdateras?\n    // Scooterns plats ny long lat\n    // Uppdatera hur många som finns i föregående zon\n    // uppdatera hur många som finns i den nya zonen\n    // Fortsätt här när backend är klar\n    // glöm ej att hantera fail och error\n    // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n    // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (moveBikeToColor !== null) {\n            let position = props.position;\n            let newPosition;\n            let movedBy = myContext.user.username;\n            let today = new Date();\n            let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n            let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            let dateTime = date+' '+time;\n            \n            charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            if ( position !== null) {\n                var lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n                var lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n                newPosition = {lat: lat, lng: lng}\n\n                var logg = `${dateTime} \\n \n                    Moved(update) this bike (bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    This was carried out by ${movedBy}.\n                `;\n                let speed = \"0\";\n                let battery = \"100\";\n                let response = await Api.updateAScooter(props.id, speed, battery, newPosition, logg);\n                \n            }\n        }\n    }\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}>\n                <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n                {charging_posts.map(elem => elem !== null  &&\n                    <option key={elem.color}value={elem.color}>\n                    {elem.color + \" zon\"}\n                    </option> )}\n            </select>\n            <button onClick={() => handleSubmit(event)}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}