{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showLoadCitys: false,\n  city: []\n};\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\n\nconst useDisplayPolyCities = (mapRef, props) => {\n  _s();\n\n  const [cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n\n  const [cityError, setCityError] = useState(false);\n  /* Tar emot res från getData. Loopar igenom. Skapar poly av\n     alla koordinater som tillhör städer. Lägger på onclickevent.\n     Sparar objekten i state, så de senare kan tas bort.\n  */\n\n  const handleSucces = res => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(city => {\n      cityname = city.city;\n      let polyGon = [city.position.polygonePart1, city.position.polygonePart2, city.position.polygonePart3, city.position.polygonePart4];\n      cityname = new maps.Polygon({\n        paths: polyGon,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.9,\n        strokeWeight: 2,\n        fillColor: \"transparent\",\n        fillOpacity: 0.35\n      });\n      cityname.addListener('click', () => {\n        setCityContent(prevState => ({\n          showLoadCitys: !prevState.showLoadCitys,\n          city\n        }));\n      });\n      cityname.setMap(map);\n      var holdArr = cityObject;\n      holdArr.push(cityname);\n      setcityObject(holdArr);\n    });\n  }; // funktion som togglar state, från andra Map komponent\n\n\n  const showInfoForCity = trueOrFalse => {\n    setCityContent({\n      showLoadCitys: trueOrFalse\n    });\n  }; // tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\n\n\n  function removeCitysFromMap() {\n    cityObject !== null && cityObject.forEach(city => {\n      city.setMap(null);\n    });\n  } //körs vid mount och förändring av prop om poly för städer ska visas = hämtar, annars tar bort med removeCitysFromMap\n\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setCityError(false);\n        let res = await Api.getAllCitys();\n        handleSucces(res);\n      } catch (error) {\n        setCityError(true);\n      }\n    };\n\n    !props.ifToShowCity.loadCity ? removeCitysFromMap() : getData();\n  }, [props.ifToShowCity.loadCity]);\n  /* \n      useEffect(() => {\n          async function fetchData() {\n              // Om loadStations ska tas bort från kartan\n              if (props.ifToShowCity.loadCity === false ) {\n                  removeCitysFromMap(mapRef)\n                  return\n              }\n              // Om state är null == ej hämtat från backend ännu\n              if (resFromApi === null) {\n                  let res = await Api.getAllCitys();\n                  setResFromApi(res);\n                  handleSucces(res)\n              // Annars använd det som är sparat i state\n              } else if (resFromApi !== null) {\n                  handleSucces(resFromApi);\n              } else {\n                  console.log(\"Error\")\n              }\n          }\n          fetchData();\n      },[mapRef, props.ifToShowCity.loadCity]) */\n\n  return {\n    cityContent,\n    cityError,\n    showInfoForCity\n  };\n};\n\n_s(useDisplayPolyCities, \"MKVggHDjb5Tm1wwHW6YYtAFolhY=\");\n\nexport default useDisplayPolyCities;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyCities.js"],"names":["useState","useEffect","Api","initalValue","showLoadCitys","city","useDisplayPolyCities","mapRef","props","cityObject","setcityObject","cityContent","setCityContent","cityError","setCityError","handleSucces","res","cityname","map","current","maps","forEach","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","showInfoForCity","trueOrFalse","removeCitysFromMap","getData","getAllCitys","error","ifToShowCity","loadCity"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowLoadCitys: false,\n\tcity: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyCities = (mapRef, props) => {\n    const[cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n    const[cityError, setCityError] = useState(false); \n\n    /* Tar emot res från getData. Loopar igenom. Skapar poly av\n       alla koordinater som tillhör städer. Lägger på onclickevent.\n       Sparar objekten i state, så de senare kan tas bort.\n    */\n    const handleSucces = (res) => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.forEach(city => {\n        cityname = city.city\n        let polyGon = \n            ([city.position.polygonePart1,\n                city.position.polygonePart2,\n                city.position.polygonePart3,\n                city.position.polygonePart4\n            ]);\n        cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35,\n            });\n        \n        cityname.addListener('click', () => {\n            setCityContent(prevState => ({\n                showLoadCitys: !prevState.showLoadCitys,\n                city\n            }));\n        });\n\n        cityname.setMap(map);\n        var holdArr = cityObject;\n        holdArr.push(cityname);\n        setcityObject(holdArr);\n        })\n    };\n    // funktion som togglar state, från andra Map komponent\n    const showInfoForCity = (trueOrFalse) => {\n        setCityContent({showLoadCitys: trueOrFalse });\n\t}\n\n    // tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\n\tfunction removeCitysFromMap() { \n        cityObject !== null && \n        cityObject.forEach(city => {\n            city.setMap(null);\n        })\n\t}\n\n    //körs vid mount och förändring av prop om poly för städer ska visas = hämtar, annars tar bort med removeCitysFromMap\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                setCityError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res)\n            } catch (error) {\n                setCityError(true)\n            }\n        }\n        !props.ifToShowCity.loadCity ? removeCitysFromMap() : getData()\n        \n    }, [props.ifToShowCity.loadCity])\n\n\n\n/* \n    useEffect(() => {\n        async function fetchData() {\n            // Om loadStations ska tas bort från kartan\n            if (props.ifToShowCity.loadCity === false ) {\n                removeCitysFromMap(mapRef)\n                return\n            }\n            // Om state är null == ej hämtat från backend ännu\n            if (resFromApi === null) {\n                let res = await Api.getAllCitys();\n                setResFromApi(res);\n                handleSucces(res)\n            // Annars använd det som är sparat i state\n            } else if (resFromApi !== null) {\n                handleSucces(resFromApi);\n            } else {\n                console.log(\"Error\")\n            }\n        }\n        fetchData();\n    },[mapRef, props.ifToShowCity.loadCity]) */\n    return {cityContent, cityError, showInfoForCity};\n};\nexport default useDisplayPolyCities;\n\n"]},"metadata":{},"sourceType":"module"}