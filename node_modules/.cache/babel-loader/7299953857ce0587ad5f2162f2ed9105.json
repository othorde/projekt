{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showLoadCitys: false,\n  city: []\n};\n\nconst useDisplayPolyCities = (mapRef, props, changePopUpInfo) => {\n  _s();\n\n  const [cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n  //sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n\n  const [resFromApi, setResFromApi] = useState(null);\n\n  const handleSucces = res => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(city => {\n      cityname = city.city;\n      let polyGon = [city.position.polygonePart1, city.position.polygonePart2, city.position.polygonePart3, city.position.polygonePart4];\n      cityname = new maps.Polygon({\n        paths: polyGon,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.9,\n        strokeWeight: 2,\n        fillColor: \"transparent\",\n        fillOpacity: 0.35\n      });\n      cityname.addListener('click', event => {\n        setCityContent(prevState => ({\n          showLoadCitys: !prevState.showLoadCitys,\n          city\n        }));\n      });\n      cityname.setMap(map);\n      var holdArr = cityObject;\n      holdArr.push(cityname);\n      setcityObject(holdArr);\n    });\n  }; // funktion som kan toggla state, från andra komponenter\n\n\n  const showInfoForCity = trueOrFalse => {\n    setCityContent({\n      showLoadCitys: trueOrFalse\n    });\n  }; // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n  // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\n\n  function removeCitysFromMap() {\n    if (cityObject !== null) {\n      cityObject.forEach(city => {\n        city.setMap(null);\n      });\n    }\n\n    return;\n  }\n\n  useEffect(() => {}, [props.ifToShowCity.loadCity]);\n  /* \n      useEffect(() => {\n          async function fetchData() {\n              // Om loadStations ska tas bort från kartan\n              if (props.ifToShowCity.loadCity === false ) {\n                  removeCitysFromMap(mapRef)\n                  return\n              }\n              // Om state är null == ej hämtat från backend ännu\n              if (resFromApi === null) {\n                  let res = await Api.getAllCitys();\n                  setResFromApi(res);\n                  handleSucces(res)\n              // Annars använd det som är sparat i state\n              } else if (resFromApi !== null) {\n                  handleSucces(resFromApi);\n              } else {\n                  console.log(\"Error\")\n              }\n          }\n          fetchData();\n      },[mapRef, props.ifToShowCity.loadCity]) */\n\n  return {\n    cityContent,\n    showInfoForCity\n  };\n};\n\n_s(useDisplayPolyCities, \"iVkYXCULVPYgwblyvCTwBAmeowM=\");\n\nexport default useDisplayPolyCities;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyCities.js"],"names":["useState","useEffect","Api","initalValue","showLoadCitys","city","useDisplayPolyCities","mapRef","props","changePopUpInfo","cityObject","setcityObject","cityContent","setCityContent","resFromApi","setResFromApi","handleSucces","res","cityname","map","current","maps","forEach","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","prevState","setMap","holdArr","push","showInfoForCity","trueOrFalse","removeCitysFromMap","ifToShowCity","loadCity"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowLoadCitys: false,\n\tcity: []\n}\n\nconst useDisplayPolyCities = (mapRef, props, changePopUpInfo) => {\n    const[cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n    //sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n    const[resFromApi, setResFromApi] = useState(null); \n    \n    const handleSucces = (res) => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.forEach(city => {\n        cityname = city.city\n        let polyGon = \n            ([city.position.polygonePart1,\n                city.position.polygonePart2,\n                city.position.polygonePart3,\n                city.position.polygonePart4\n            ]);\n        cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35,\n            });\n        \n        cityname.addListener('click', (event) => {\n\n            setCityContent(prevState => ({\n                showLoadCitys: !prevState.showLoadCitys,\n                city\n            }));\n        });\n\n        cityname.setMap(map);\n        var holdArr = cityObject;\n        holdArr.push(cityname);\n        setcityObject(holdArr);\n\n        })\n    };\n    // funktion som kan toggla state, från andra komponenter\n    const showInfoForCity = (trueOrFalse) => {\n        setCityContent({showLoadCitys: trueOrFalse });\n\t}\n\n\n\n    // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n    // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\tfunction removeCitysFromMap() { \n\t\tif (cityObject !== null) {\n\t\t\tcityObject.forEach(city => {\n\t\t\t\tcity.setMap(null);\n\t\t\t})\n\t\t}\n        return\n\t}\n\n\n    useEffect(() => {\n        \n    }, [props.ifToShowCity.loadCity])\n\n\n\n/* \n    useEffect(() => {\n        async function fetchData() {\n            // Om loadStations ska tas bort från kartan\n            if (props.ifToShowCity.loadCity === false ) {\n                removeCitysFromMap(mapRef)\n                return\n            }\n            // Om state är null == ej hämtat från backend ännu\n            if (resFromApi === null) {\n                let res = await Api.getAllCitys();\n                setResFromApi(res);\n                handleSucces(res)\n            // Annars använd det som är sparat i state\n            } else if (resFromApi !== null) {\n                handleSucces(resFromApi);\n            } else {\n                console.log(\"Error\")\n            }\n        }\n        fetchData();\n    },[mapRef, props.ifToShowCity.loadCity]) */\n    return {cityContent, showInfoForCity};\n};\nexport default useDisplayPolyCities;\n\n"]},"metadata":{},"sourceType":"module"}