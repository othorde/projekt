{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [loadStationObject, setLoadStationObject] = useState(\"\");\n  let res;\n  useEffect(async () => {\n    if (!res || res.length === 0) {\n      let res = await Api.getAllCitys();\n\n      try {\n        if (res !== null && mapRef.current.map !== undefined) {\n          var loadStationName;\n          const map = mapRef.current.map;\n          const maps = mapRef.current.maps;\n          res.map(cityCoords => {\n            cityCoords.charging_posts.map(loadStations => {\n              let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n              loadStationName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: \"yellow\",\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35\n              });\n              loadStationName.addListener('click', event => {\n                setLoadStationObject(oldArray => [...oldArray, loadStations]);\n                console.log(loadStationObject);\n              });\n            });\n            loadStationName.setMap(map);\n            setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, []);\n  console.log(loadStationObject);\n  return {\n    loadStationObject\n  };\n};\n\n_s(useLoadStationsForMap, \"5vw0j0lcng9vKtFtFRvuWFftHms=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","loadStationObject","setLoadStationObject","res","length","getAllCitys","current","map","undefined","loadStationName","maps","cityCoords","charging_posts","loadStations","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","oldArray","console","log","setMap","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAClD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AAEG,MAAIO,GAAJ;AACAN,EAAAA,SAAS,CAAC,YAAa;AACnB,QAAG,CAACM,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,CAA1B,EAA4B;AACxB,UAAID,GAAG,GAAG,MAAML,GAAG,CAACO,WAAJ,EAAhB;;AACA,UAAI;AACA,YAAIF,GAAG,KAAK,IAAR,IAAgBH,MAAM,CAACM,OAAP,CAAeC,GAAf,KAAuBC,SAA3C,EAAsD;AAClD,cAAIC,eAAJ;AACA,gBAAMF,GAAG,GAAGP,MAAM,CAACM,OAAP,CAAeC,GAA3B;AACA,gBAAMG,IAAI,GAAGV,MAAM,CAACM,OAAP,CAAeI,IAA5B;AAEAP,UAAAA,GAAG,CAACI,GAAJ,CAAQI,UAAU,IAAI;AAClBA,YAAAA,UAAU,CAACC,cAAX,CAA0BL,GAA1B,CAA8BM,YAAY,IAAI;AAC1C,kBAAIC,OAAO,GACN,CAACH,UAAU,CAACI,QAAX,CAAoBC,aAArB,EACGL,UAAU,CAACI,QAAX,CAAoBE,aADvB,EAEGN,UAAU,CAACI,QAAX,CAAoBG,aAFvB,EAGGP,UAAU,CAACI,QAAX,CAAoBI,aAHvB,CADL;AAMAV,cAAAA,eAAe,GAAG,IAAIC,IAAI,CAACU,OAAT,CAAiB;AAC/BC,gBAAAA,KAAK,EAAEP,OADwB;AAE/BQ,gBAAAA,WAAW,EAAE,QAFkB;AAG/BC,gBAAAA,aAAa,EAAE,GAHgB;AAI/BC,gBAAAA,YAAY,EAAE,CAJiB;AAK/BC,gBAAAA,SAAS,EAAE,aALoB;AAM/BC,gBAAAA,WAAW,EAAE;AANkB,eAAjB,CAAlB;AASJjB,cAAAA,eAAe,CAACkB,WAAhB,CAA4B,OAA5B,EAAsCC,KAAD,IAAW;AAC5C1B,gBAAAA,oBAAoB,CAAC2B,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAchB,YAAd,CAAb,CAApB;AACAiB,gBAAAA,OAAO,CAACC,GAAR,CAAY9B,iBAAZ;AAEH,eAJD;AAKH,aArBG;AAsBJQ,YAAAA,eAAe,CAACuB,MAAhB,CAAuBzB,GAAvB;AACAL,YAAAA,oBAAoB,CAAC2B,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcpB,eAAd,CAAb,CAApB;AACC,WAzBD;AA0BH;AAEJ,OAlCD,CAkCE,OAAOwB,KAAP,EAAc;AACZH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH;AACJ;AACJ,GAzCQ,EAyCN,EAzCM,CAAT;AA2CJH,EAAAA,OAAO,CAACC,GAAR,CAAY9B,iBAAZ;AACA,SAAO;AAACA,IAAAA;AAAD,GAAP;AAIC,CApDD;;GAAMF,qB;;AAqDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n\n    let res;\n    useEffect(async () =>  {\n        if(!res || res.length === 0){\n            let res = await Api.getAllCitys();\n            try {\n                if (res !== null && mapRef.current.map !== undefined) {\n                    var loadStationName;\n                    const map = mapRef.current.map;\n                    const maps = mapRef.current.maps;\n\n                    res.map(cityCoords => {\n                        cityCoords.charging_posts.map(loadStations => {            \n                            let polyGon = \n                                ([cityCoords.position.polygonePart1,\n                                    cityCoords.position.polygonePart2,\n                                    cityCoords.position.polygonePart3,\n                                    cityCoords.position.polygonePart4\n                                ]);\n                            loadStationName = new maps.Polygon({\n                                paths: polyGon,\n                                strokeColor: \"yellow\",\n                                strokeOpacity: 0.9,\n                                strokeWeight: 2,\n                                fillColor: \"transparent\",\n                                fillOpacity: 0.35,\n                                });\n                       \n                        loadStationName.addListener('click', (event) => {\n                            setLoadStationObject(oldArray => [...oldArray, loadStations]);\n                            console.log(loadStationObject)\n\n                        }); \n                    })\n                    loadStationName.setMap(map);\n                    setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n                    })\n                }\n\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }, []);\n\nconsole.log(loadStationObject)\nreturn {loadStationObject};\n\n    \n\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}