{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getAllUsers } from \"../Api\"; // hämtar alla användare som finns registrerade vid mount\n// retunerar alla och error\n\nexport const useFetchAllCustomers = () => {\n  _s();\n\n  const [allCustomers, setAllCustomers] = useState([]);\n  const [errorAllCustomers, setErrorAllCustomers] = useState(false); // hämtar, sparar till state\n\n  const fetchData = async () => {\n    try {\n      setErrorAllCustomers(false);\n      let res = await getAllUsers();\n      console.log(res, \"HÄÄÄÄÄÄÄR1111111111\");\n      res.data && setAllCustomers(res.data);\n    } catch (error) {\n      setErrorAllCustomers(true);\n    }\n  };\n  /* Hämtar endast vid mount */\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    allCustomers,\n    errorAllCustomers\n  };\n};\n\n_s(useFetchAllCustomers, \"x6bvjdcFzGun+tfDB2Pngj0KQZE=\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useFetchAllCustomers.js"],"names":["useState","useEffect","getAllUsers","useFetchAllCustomers","allCustomers","setAllCustomers","errorAllCustomers","setErrorAllCustomers","fetchData","res","console","log","data","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,WAAR,QAA0B,QAA1B,C,CAEA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AAEtC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC,KAAD,CAA1D,CAHsC,CAKtC;;AACA,QAAMQ,SAAS,GAAG,YAAY;AAC1B,QAAI;AACAD,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACA,UAAIE,GAAG,GAAG,MAAMP,WAAW,EAA3B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,qBAAjB;AACAA,MAAAA,GAAG,CAACG,IAAJ,IAAYP,eAAe,CAACI,GAAG,CAACG,IAAL,CAA3B;AACH,KALD,CAKE,OAAOC,KAAP,EAAc;AACZN,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH;AACJ,GATD;AAWA;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACJ,IAAAA,YAAD;AAAeE,IAAAA;AAAf,GAAP;AACH,CAvBM;;GAAMH,oB","sourcesContent":["import {useState, useEffect} from 'react';\nimport {getAllUsers} from \"../Api\";\n\n// hämtar alla användare som finns registrerade vid mount\n// retunerar alla och error\nexport const useFetchAllCustomers = () => {\n\n    const [allCustomers, setAllCustomers] = useState([]);\n    const [errorAllCustomers, setErrorAllCustomers] = useState(false);\n\n    // hämtar, sparar till state\n    const fetchData = async () => {\n        try {\n            setErrorAllCustomers(false)\n            let res = await getAllUsers();\n            console.log(res, \"HÄÄÄÄÄÄÄR1111111111\")\n            res.data && setAllCustomers(res.data);\n        } catch (error) {\n            setErrorAllCustomers(true)\n        }\n    }\n\n    /* Hämtar endast vid mount */\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    return {allCustomers, errorAllCustomers}\n}"]},"metadata":{},"sourceType":"module"}