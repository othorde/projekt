{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\"; //styles & img\n\nimport { Style } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n}; // const handleApiLoaded = (map, maps) => {\n// \t var bermudaTriangle = new maps.Polygon({\n// \t  paths: triangleCoords,\n// \t  strokeColor: \"#FF0000\",\n// \t  strokeOpacity: 0.8,\n// \t  strokeWeight: 2,\n// \t  fillColor: \"#FF0000\",\n// \t  fillOpacity: 0.35\n// \t});\n// \tbermudaTriangle.setMap(map);\n// }\n\nexport default function MapContainer(props) {\n  _s();\n\n  const {\n    location,\n    err\n  } = useCurrentLocation(options);\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null);\n  const showBikesOrNot = props.bikes.getbike;\n  var bikeArray = props.bikes.content;\n  bikeArray = bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const [popupInfo, setPopupInfo] = useState(\"\");\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 35\n    }, this);\n  };\n\n  const LoadingStations = _ref2 => {\n    let {\n      children\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 44\n    }, this);\n  };\n\n  console.log(props.loadingCoordinates);\n  console.log(mapRef.current);\n\n  const handleApiLoaded = () => {\n    if (props.loadingCoordinates !== null && mapRef.current !== null) {\n      const map = mapRef.current.map;\n      const maps = mapRef.current.maps;\n      console.log(mapRef.current);\n      props.loadingCoordinates.map(coords => {\n        const polyGon = [coords.position.polygonePart1, coords.position.polygonePart2, coords.position.polygonePart3, coords.position.polygonePart4];\n        var bermudaTriangle = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35,\n          text: \"HEJ\"\n        });\n        bermudaTriangle.setMap(map);\n      });\n    }\n  }; // BÖRJA HÄR, SE OM DU KAN MAPPA IGENOM DEN. SKRIV OM FUNKTIONEN, MAP. ANVÄND SEDAN FÖR ATT RITA UPP\n  // VET KOLLA I LOADINGSTATIONS.JS FÖR ATT SE HUR DET SKA GÖRAS. SE OM MAN KAN LÄGGA TILL KLICKEVENT \n  // SE OCKSÅ OM MAN KAN LÄSA UPP INFORMATIONEN FRÅN ARRAYN AV OBJEKT\n  //problemet är att om jag nu trycker på knappen, så laddas endast handleApiLoaded, propsen är redan skickade\n  // Vilket innebär att jag måste hämta infon på något annat sätt.\n\n\n  return /*#__PURE__*/_jsxDEV(Style, {\n    children: [location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      defaultZoom: 3,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: _ref3 => {\n        let {\n          map,\n          maps\n        } = _ref3;\n        mapRef.current = {\n          map,\n          maps\n        };\n        console.log(mapRef.current); // handleApiLoaded(map, maps)\n      },\n      onChange: _ref4 => {\n        let {\n          zoom,\n          bounds,\n          map,\n          maps\n        } = _ref4;\n        setZoom(zoom);\n        setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n        handleApiLoaded(mapRef.current);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        lat: location.latitude,\n        lng: location.longitude,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"crime-marker\",\n            src: personimg,\n            alt: \"scooter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 5\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 4\n      }, this), showBikesOrNot ? bikeArray.map(bike => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: bike.location.latitude,\n          lng: bike.location.longitude,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setPopupInfo(bike),\n            className: \"crime-marker\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"scooter\",\n              src: bikeimg,\n              alt: \"scooter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 5\n          }, this)\n        }, bike.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 4\n        }, this);\n      }) : console.log(\"HE\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingStations, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 4\n    }, this), popupInfo ? /*#__PURE__*/_jsxDEV(PopUp, {\n      store: popupInfo\n    }, \"popupkey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 4\n    }, this) : console.log(\"EJ POPUP\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"FjUY3q5psQWsGht+RXfWHmLXO6Y=\", false, function () {\n  return [useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","PopUp","Style","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","MapContainer","props","location","err","mapRef","zoom","setZoom","bounds","setBounds","showBikesOrNot","bikes","getbike","bikeArray","content","slice","popupInfo","setPopupInfo","Marker","children","LoadingStations","console","log","loadingCoordinates","current","handleApiLoaded","map","maps","coords","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","bermudaTriangle","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","text","setMap","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","nw","se","bike","id"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAkD,OAAlD,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,SAAQC,KAAR,QAAoB,eAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAGA;;;AACA,MAAMC,OAAO,GAAG;AACfC,EAAAA,kBAAkB,EAAE,IADL;AAEfC,EAAAA,OAAO,EAAE,OAAO,EAAP,GAAY,CAFN;AAES;AACxBC,EAAAA,UAAU,EAAE,OAAO,EAAP,GAAY,EAHT,CAGa;;AAHb,CAAhB,C,CAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAoBZ,kBAAkB,CAACK,OAAD,CAA5C;AACA,QAAMQ,MAAM,GAAGf,MAAM,EAArB;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMqB,cAAc,GAAGR,KAAK,CAACS,KAAN,CAAYC,OAAnC;AACA,MAAIC,SAAS,GAAGX,KAAK,CAACS,KAAN,CAAYG,OAA5B;AACAD,EAAAA,SAAS,GAAIA,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmB,GAAnB,CAAb,CAP2C,CAOL;;AAEtC,QAAM,CAACC,SAAD,EAAaC,YAAb,IAA6B5B,QAAQ,CAAC,EAAD,CAA3C;;AACA,QAAM6B,MAAM,GAAG;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,wBAAkB;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAlB;AAAA,GAAf;;AACA,QAAMC,eAAe,GAAG;AAAA,QAAC;AAAED,MAAAA;AAAF,KAAD;AAAA,wBAAkB;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAlB;AAAA,GAAxB;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAK,CAACqB,kBAAlB;AAGAF,EAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,CAACmB,OAAnB;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC7B,QAAIvB,KAAK,CAACqB,kBAAN,KAA6B,IAA7B,IAAqClB,MAAM,CAACmB,OAAP,KAAmB,IAA5D,EAAkE;AACjE,YAAME,GAAG,GAAGrB,MAAM,CAACmB,OAAP,CAAeE,GAA3B;AACA,YAAMC,IAAI,GAAGtB,MAAM,CAACmB,OAAP,CAAeG,IAA5B;AAEAN,MAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,CAACmB,OAAnB;AAEAtB,MAAAA,KAAK,CAACqB,kBAAN,CAAyBG,GAAzB,CAA6BE,MAAM,IAClC;AACA,cAAMC,OAAO,GACX,CAACD,MAAM,CAACE,QAAP,CAAgBC,aAAjB,EACAH,MAAM,CAACE,QAAP,CAAgBE,aADhB,EAEAJ,MAAM,CAACE,QAAP,CAAgBG,aAFhB,EAGAL,MAAM,CAACE,QAAP,CAAgBI,aAHhB,CADF;AAOC,YAAIC,eAAe,GAAG,IAAIR,IAAI,CAACS,OAAT,CAAiB;AACvCC,UAAAA,KAAK,EAAER,OADgC;AAEvCS,UAAAA,WAAW,EAAE,SAF0B;AAGvCC,UAAAA,aAAa,EAAE,GAHwB;AAIvCC,UAAAA,YAAY,EAAE,CAJyB;AAKvCC,UAAAA,SAAS,EAAE,SAL4B;AAMvCC,UAAAA,WAAW,EAAE,IAN0B;AAOvCC,UAAAA,IAAI,EAAE;AAPiC,SAAjB,CAAtB;AAUDR,QAAAA,eAAe,CAACS,MAAhB,CAAuBlB,GAAvB;AACA,OApBD;AAsBA;AACD,GA9BD,CAjB2C,CAkD3C;AACA;AACA;AACA;AACA;;;AAEA,sBACC,QAAC,KAAD;AAAA,eACEvB,QAAQ,gBACT,QAAC,cAAD;AACC,MAAA,gBAAgB,EAAE;AAAC0C,QAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAlB,OADnB;AAEC,MAAA,aAAa,EAAE;AAAEC,QAAAA,GAAG,EAAE9C,QAAQ,CAAC+C,QAAhB;AAA0BC,QAAAA,GAAG,EAAEhD,QAAQ,CAACiD;AAAxC,OAFhB;AAGC,MAAA,WAAW,EAAE,CAHd;AAIC,MAAA,kCAAkC,MAJnC;AAKC,MAAA,iBAAiB,EAAG,SAAiB;AAAA,YAAhB;AAAC1B,UAAAA,GAAD;AAAMC,UAAAA;AAAN,SAAgB;AACpCtB,QAAAA,MAAM,CAACmB,OAAP,GAAiB;AAACE,UAAAA,GAAD;AAAMC,UAAAA;AAAN,SAAjB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,CAACmB,OAAnB,EAFoC,CAGpC;AACA,OATF;AAUC,MAAA,QAAQ,EAAE,SAA+B;AAAA,YAA9B;AAAClB,UAAAA,IAAD;AAAOE,UAAAA,MAAP;AAAekB,UAAAA,GAAf;AAAoBC,UAAAA;AAApB,SAA8B;AACxCpB,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,SAAS,CAAC,CACTD,MAAM,CAAC6C,EAAP,CAAUF,GADD,EAET3C,MAAM,CAAC8C,EAAP,CAAUL,GAFD,EAGTzC,MAAM,CAAC8C,EAAP,CAAUH,GAHD,EAIT3C,MAAM,CAAC6C,EAAP,CAAUJ,GAJD,CAAD,CAAT;AAMAxB,QAAAA,eAAe,CAACpB,MAAM,CAACmB,OAAR,CAAf;AAEA,OApBF;AAAA,8BAuBA,QAAC,MAAD;AAEC,QAAA,GAAG,EAAErB,QAAQ,CAAC+C,QAFf;AAGC,QAAA,GAAG,EAAE/C,QAAQ,CAACiD,SAHf;AAAA,+BAKC;AAAA,iCACC;AAAK,YAAA,SAAS,EAAG,cAAjB;AAAgC,YAAA,GAAG,EAAExD,SAArC;AAAgD,YAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AALD,SACM,CADN;AAAA;AAAA;AAAA;AAAA,cAvBA,EAiCCc,cAAc,GACfG,SAAS,CAACa,GAAV,CAAc6B,IAAI,IAAI;AACtB,4BACA,QAAC,MAAD;AAEC,UAAA,GAAG,EAAEA,IAAI,CAACpD,QAAL,CAAc+C,QAFpB;AAGC,UAAA,GAAG,EAAEK,IAAI,CAACpD,QAAL,CAAciD,SAHpB;AAAA,iCAKC;AAAK,YAAA,OAAO,EAAE,MAAMnC,YAAY,CAACsC,IAAD,CAAhC;AAAuC,YAAA,SAAS,EAAC,cAAjD;AAAA,mCACA;AAAK,cAAA,SAAS,EAAG,SAAjB;AAA2B,cAAA,GAAG,EAAE5D,OAAhC;AAAyC,cAAA,GAAG,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AALD,WACM4D,IAAI,CAACC,EADX;AAAA;AAAA;AAAA;AAAA,gBADA;AAWC,OAZD,CADe,GAcVnC,OAAO,CAACC,GAAR,CAAY,IAAZ,CA/CL;AAAA;AAAA;AAAA;AAAA;AAAA,YADS,gBAkDN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnDJ,eAsDC,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAtDD,EA2DEN,SAAS,gBACV,QAAC,KAAD;AAEC,MAAA,KAAK,EAAEA;AAFR,OACM,UADN;AAAA;AAAA;AAAA;AAAA,YADU,GAMNK,OAAO,CAACC,GAAR,CAAY,UAAZ,CAjEL;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqEA;;GA7HuBrB,Y;UACGT,kB;;;KADHS,Y","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\";\n//styles & img\nimport {Style} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n// const handleApiLoaded = (map, maps) => {\n\n  \n// \t var bermudaTriangle = new maps.Polygon({\n// \t  paths: triangleCoords,\n// \t  strokeColor: \"#FF0000\",\n// \t  strokeOpacity: 0.8,\n// \t  strokeWeight: 2,\n// \t  fillColor: \"#FF0000\",\n// \t  fillOpacity: 0.35\n// \t});\n// \tbermudaTriangle.setMap(map);\n// }\n\nexport default function MapContainer(props) {\n\tconst { location, err } = useCurrentLocation(options);\n\tconst mapRef = useRef();\n\tconst [zoom, setZoom] = useState(10);\n\tconst [bounds, setBounds] = useState(null);\n\tconst showBikesOrNot = props.bikes.getbike;\n\tvar bikeArray = props.bikes.content;\n\tbikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n\tconst [popupInfo , setPopupInfo] = useState(\"\");\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\tconst LoadingStations = ({ children }) => <div>{children}</div>;\n\tconsole.log(props.loadingCoordinates)\n\n\n\tconsole.log(mapRef.current)\n\n\tconst handleApiLoaded = () => {\n\t\tif (props.loadingCoordinates !== null && mapRef.current !== null) {\n\t\t\tconst map = mapRef.current.map;\n\t\t\tconst maps = mapRef.current.maps;\n\n\t\t\tconsole.log(mapRef.current)\n\n\t\t\tprops.loadingCoordinates.map(coords => \n\t\t\t\t{\n\t\t\t\tconst polyGon = \n\t\t\t\t\t([coords.position.polygonePart1,\n\t\t\t\t\t\tcoords.position.polygonePart2,\n\t\t\t\t\t\tcoords.position.polygonePart3,\n\t\t\t\t\t\tcoords.position.polygonePart4\n\t\t\t\t\t]);\n\n\t\t\t\t\tvar bermudaTriangle = new maps.Polygon({\n\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\tstrokeColor: \"#FF0000\",\n\t\t\t\t\tstrokeOpacity: 0.8,\n\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\tfillColor: \"#FF0000\",\n\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\ttext: \"HEJ\"\n\t\t\t\t\t});\n\n\t\t\t\tbermudaTriangle.setMap(map);\n\t\t\t})\n\t\t\t\t\n\t\t}\n\t}\n\n\n\t// BÖRJA HÄR, SE OM DU KAN MAPPA IGENOM DEN. SKRIV OM FUNKTIONEN, MAP. ANVÄND SEDAN FÖR ATT RITA UPP\n\t// VET KOLLA I LOADINGSTATIONS.JS FÖR ATT SE HUR DET SKA GÖRAS. SE OM MAN KAN LÄGGA TILL KLICKEVENT \n\t// SE OCKSÅ OM MAN KAN LÄSA UPP INFORMATIONEN FRÅN ARRAYN AV OBJEKT\n\t//problemet är att om jag nu trycker på knappen, så laddas endast handleApiLoaded, propsen är redan skickade\n\t// Vilket innebär att jag måste hämta infon på något annat sätt.\n\n\treturn (\n\t\t<Style>\n\t\t\t{location ? (\n\t\t\t<GoogleMapReact \n\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\tdefaultZoom={3}\n\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t\tconsole.log(mapRef.current)\n\t\t\t\t\t// handleApiLoaded(map, maps)\n\t\t\t\t}}\n\t\t\t\tonChange={({zoom, bounds, map, maps}) => {\n\t\t\t\t\tsetZoom(zoom)\n\t\t\t\t\tsetBounds([\n\t\t\t\t\t\tbounds.nw.lng,\n\t\t\t\t\t\tbounds.se.lat,\n\t\t\t\t\t\tbounds.se.lng,\n\t\t\t\t\t\tbounds.nw.lat\n\t\t\t\t\t])\n\t\t\t\t\thandleApiLoaded(mapRef.current)\n\n\t\t\t\t}}\n\t\t\t>\t\t\t\n\t\t\t{/* \t\t1 Person \t\t*/}\n\t\t\t<Marker \n\t\t\t\tkey={1} \n\t\t\t\tlat={location.latitude} \n\t\t\t\tlng={location.longitude}\n\t\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"scooter\" />\n\t\t\t\t</div>\t\n\t\t\t</Marker>\n\t\t\t{/* \t\tAlla cyklar\t\t */}\n\t\t\t{showBikesOrNot ? (\n\t\t\tbikeArray.map(bike => {\n\t\t\treturn (\n\t\t\t<Marker \n\t\t\t\tkey={bike.id} \n\t\t\t\tlat={bike.location.latitude} \n\t\t\t\tlng={bike.location.longitude}\n\t\t\t\t>\n\t\t\t\t<div onClick={() => setPopupInfo(bike)}className=\"crime-marker\">\n\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t</div>\n\t\t\t</Marker>\n\t\t\t)\n\t\t\t})\n\t\t\t) : (console.log(\"HE\"))}\n\t\t\t</GoogleMapReact>\n\t\t\t):(<p>Loading...</p> )}\n\t\t\t{/* \t\tPOLYGON\t\t\t */}\n\t\t\t\n\t\t\t<LoadingStations \n\n\t\t\t>\n\t\t\t</LoadingStations>\n\t\t\t{/*\t\t\t\t POPUP\t\t\t\t */}\n\t\t\t{popupInfo ? (\n\t\t\t<PopUp\n\t\t\t\tkey={\"popupkey\"}\n\t\t\t\tstore={popupInfo} \n\t\t\t\t>\n\t\t\t</PopUp>\n\t\t\t): (console.log(\"EJ POPUP\"))}\n\t\t</Style>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}