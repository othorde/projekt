{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{React,useState,useEffect,useContext}from\"react\";//components\nimport Api from\"../../Api.js\";import AppContext from\"../../AppContext\";//styles\nimport{Content,Delimiter,StylePayment}from\"./Form.styles.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var initialValue={showMsg:false,msg:\"\"};/* Denna komponent används på två ställen,\n   hantera kunder och konto.\n   Tar props för att hämta info om användare\n*/var Payment=function Payment(_ref){var customer=_ref.customer,userDetails=_ref.userDetails;var _useState=useState(initialValue),_useState2=_slicedToArray(_useState,2),msgForUser=_useState2[0],setMsgForUser=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),onePayment=_useState4[0],setOnePayment=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),adminOrNot=_useState6[0],setAdminOrNot=_useState6[1];// Om det är admin som ska ändra eller ej\nvar myContext=useContext(AppContext);/* Om det är admin som ska göra justeringen på saldot */useEffect(function(){customer&&setAdminOrNot(true);},[customer]);/* När användaren/admin klickar på uppdatera Nytt saldo/Ändra saldo \n       Kollar om state är satt dvs vilket belopp som ska sättas in/ändras till.\n       Om admin ändrar blir det det belopp man skriver in.\n       Om användaren sätter in blir det belopp man har plus insättningen\n    */var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var showMsg,msg,result,id,currentBalance,newBalance,token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();showMsg=false;msg=\"\";if(!onePayment){_context.next=19;break;}if(adminOrNot){id=customer.id;newBalance=onePayment;}else{//Annars måste det vara en användare\nid=userDetails.data._id;currentBalance=userDetails.data.balance;newBalance=parseInt(currentBalance)+parseInt(onePayment);}/* Uppdaterar användarens kontobalans */_context.prev=5;showMsg=true;token=myContext.userHook.value.token;console.log(token);_context.next=11;return Api.updateUserFunds(newBalance,id,token);case 11:result=_context.sent;if(result===true){msg=adminOrNot?\"Saldot är justerat\":\"Din insättning har gått igenom\";}_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](5);console.log(_context.t0);msg=\"Något gick fel. Beror på servern.\";case 19:setMsgForUser({showMsg:showMsg,msg:msg});setOnePayment(0);// nollställer\ncase 21:case\"end\":return _context.stop();}}},_callee,null,[[5,15]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();/* Tennary operator används för att justera texten beroende på vem det är som ska göra förändringen */return/*#__PURE__*/_jsx(Content,{children:/*#__PURE__*/_jsxs(StylePayment,{children:[/*#__PURE__*/_jsxs(\"div\",{\"data-testid\":\"payment-element\",children:[\" \",msgForUser.showMsg?/*#__PURE__*/_jsx(\"p\",{\"data-testid\":\"payment-element\",children:msgForUser.msg}):/*#__PURE__*/_jsxs(\"p\",{children:[\" \",adminOrNot?\"VARNING! \\n Du justerar kunds saldo\":\"Sätt in valfritt belopp \"]})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"register\",children:[/*#__PURE__*/_jsx(\"label\",{children:/*#__PURE__*/_jsx(\"input\",{placeholder:adminOrNot?\"Nytt saldo\":\"Belopp att sätta in\",type:\"number\",name:\"onepayment\",required:true,value:onePayment||\"\",onChange:function onChange(e){return setOnePayment(e.target.value);}})}),/*#__PURE__*/_jsx(Delimiter,{}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:adminOrNot?\"Ändra saldo\":\"Sätt in\"})]})]})});};export default Payment;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Payment/index.js"],"names":["React","useState","useEffect","useContext","Api","AppContext","Content","Delimiter","StylePayment","initialValue","showMsg","msg","Payment","customer","userDetails","msgForUser","setMsgForUser","onePayment","setOnePayment","adminOrNot","setAdminOrNot","myContext","handleSubmit","event","preventDefault","id","newBalance","data","_id","currentBalance","balance","parseInt","token","userHook","value","console","log","updateUserFunds","result","e","target"],"mappings":"8bAAA,OAAQA,KAAR,CAAeC,QAAf,CAAyBC,SAAzB,CAAoCC,UAApC,KAAqD,OAArD,CACA;AACA,MAAOC,CAAAA,GAAP,KAAgB,cAAhB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA;AACA,OAASC,OAAT,CAAkBC,SAAlB,CAA6BC,YAA7B,KAAgD,kBAAhD,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,OAAO,CAAE,KADQ,CAEjBC,GAAG,CAAE,EAFY,CAArB,CAKA;AACA;AACA;AACA,EACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAA6B,IAA3BC,CAAAA,QAA2B,MAA3BA,QAA2B,CAAjBC,WAAiB,MAAjBA,WAAiB,CACzC,cAAoCb,QAAQ,CAACQ,YAAD,CAA5C,wCAAOM,UAAP,eAAmBC,aAAnB,eACA,eAAoCf,QAAQ,CAAC,CAAD,CAA5C,yCAAOgB,UAAP,eAAmBC,aAAnB,eACA,eAAoCjB,QAAQ,CAAC,KAAD,CAA5C,yCAAOkB,UAAP,eAAmBC,aAAnB,eAAqD;AACrD,GAAMC,CAAAA,SAAS,CAAGlB,UAAU,CAACE,UAAD,CAA5B,CACA,wDACAH,SAAS,CAAC,UAAM,CACZW,QAAQ,EAAIO,aAAa,CAAC,IAAD,CAAzB,CACH,CAFQ,CAEN,CAACP,QAAD,CAFM,CAAT,CAKA;AACJ;AACA;AACA;AACA,MACI,GAAMS,CAAAA,YAAY,2FAAG,iBAAOC,KAAP,4KACjBA,KAAK,CAACC,cAAN,GACId,OAFa,CAEH,KAFG,CAGbC,GAHa,CAGP,EAHO,KASbM,UATa,0BAUb,GAAGE,UAAH,CAAe,CACXM,EAAE,CAAGZ,QAAQ,CAACY,EAAd,CACAC,UAAU,CAAGT,UAAb,CACH,CAHD,IAGO,CAAE;AACLQ,EAAE,CAAGX,WAAW,CAACa,IAAZ,CAAiBC,GAAtB,CACAC,cAAc,CAAGf,WAAW,CAACa,IAAZ,CAAiBG,OAAlC,CACAJ,UAAU,CAAGK,QAAQ,CAACF,cAAD,CAAR,CAA2BE,QAAQ,CAACd,UAAD,CAAhD,CACH,CACD,wCAlBa,gBAoBTP,OAAO,CAAG,IAAV,CACIsB,KArBK,CAqBGX,SAAS,CAACY,QAAV,CAAmBC,KAAnB,CAAyBF,KArB5B,CAsBTG,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAtBS,uBAuBM5B,CAAAA,GAAG,CAACiC,eAAJ,CAAoBX,UAApB,CAAgCD,EAAhC,CAAoCO,KAApC,CAvBN,SAuBTM,MAvBS,eAwBT,GAAGA,MAAM,GAAK,IAAd,CAAoB,CAChB3B,GAAG,CAAGQ,UAAU,CAAG,oBAAH,CAA0B,gCAA1C,CACH,CA1BQ,iFA4BTgB,OAAO,CAACC,GAAR,cACAzB,GAAG,CAAG,mCAAN,CA7BS,QAgCjBK,aAAa,CAAC,CACVN,OAAO,CAAEA,OADC,CAEVC,GAAG,CAAEA,GAFK,CAAD,CAAb,CAIAO,aAAa,CAAC,CAAD,CAAb,CAAkB;AApCD,qEAAH,kBAAZI,CAAAA,YAAY,6CAAlB,CAuCA,sGACH,mBACO,KAAC,OAAD,wBACI,MAAC,YAAD,yBACI,aAAK,cAAY,iBAAjB,eAAqCP,UAAU,CAACL,OAAX,cAAqB,UAAG,cAAY,iBAAf,UAAkCK,UAAU,CAACJ,GAA7C,EAArB,cAA8E,yBAAMQ,UAAU,uCAA8C,0BAA9D,GAAnH,GADJ,cAEA,cAAM,QAAQ,CAAEG,YAAhB,CAA8B,SAAS,CAAG,UAA1C,wBACI,oCACA,cACI,WAAW,CAAEH,UAAU,CAAI,YAAJ,CAAqB,qBADhD,CAEI,IAAI,CAAC,QAFT,CAGI,IAAI,CAAC,YAHT,CAII,QAAQ,KAJZ,CAKI,KAAK,CAAEF,UAAU,EAAI,EALzB,CAMI,QAAQ,CAAE,kBAACsB,CAAD,QAAOrB,CAAAA,aAAa,CAACqB,CAAC,CAACC,MAAF,CAASN,KAAV,CAApB,EANd,EADA,EADJ,cAWI,KAAC,SAAD,IAXJ,cAYI,cAAO,IAAI,CAAC,QAAZ,CAAqB,KAAK,CAAEf,UAAU,CAAI,aAAJ,CAAsB,SAA5D,EAZJ,GAFA,GADJ,EADP,CAqBA,CA7ED,CA+EA,cAAeP,CAAAA,OAAf","sourcesContent":["import {React, useState, useEffect, useContext} from \"react\";\n//components\nimport Api from \"../../Api.js\";\nimport AppContext from \"../../AppContext\";\n//styles\nimport { Content, Delimiter, StylePayment} from \"./Form.styles.js\";\n\nconst initialValue = {\n    showMsg: false,\n    msg: \"\"\n}\n\n/* Denna komponent används på två ställen,\n   hantera kunder och konto.\n   Tar props för att hämta info om användare\n*/\nconst Payment = ({customer, userDetails}) => {\n    const [msgForUser, setMsgForUser] = useState(initialValue);\n    const [onePayment, setOnePayment] = useState(0);\n    const [adminOrNot, setAdminOrNot] = useState(false); // Om det är admin som ska ändra eller ej\n    const myContext = useContext(AppContext);\n    /* Om det är admin som ska göra justeringen på saldot */\n    useEffect(() => { \n        customer && setAdminOrNot(true)\n    }, [customer])\n\n\n    /* När användaren/admin klickar på uppdatera Nytt saldo/Ändra saldo \n       Kollar om state är satt dvs vilket belopp som ska sättas in/ändras till.\n       Om admin ändrar blir det det belopp man skriver in.\n       Om användaren sätter in blir det belopp man har plus insättningen\n    */\n    const handleSubmit = async (event)  => {\n        event.preventDefault();\n        let showMsg = false;\n        let msg = \"\";\n        let result;\n        let id;\n        let currentBalance;\n        let newBalance;\n\n        if (onePayment) { \n            if(adminOrNot) { \n                id = customer.id; \n                newBalance = onePayment;\n            } else { //Annars måste det vara en användare\n                id = userDetails.data._id;\n                currentBalance = userDetails.data.balance;\n                newBalance = parseInt(currentBalance) + parseInt(onePayment); \n            }\n            /* Uppdaterar användarens kontobalans */\n            try {\n                showMsg = true;\n                let token = myContext.userHook.value.token;\n                console.log(token)\n                result = await Api.updateUserFunds(newBalance, id, token);\n                if(result === true) {\n                    msg = adminOrNot ? \"Saldot är justerat\" : \"Din insättning har gått igenom\";\n                }\n            } catch (error) {\n                console.log(error)\n                msg = \"Något gick fel. Beror på servern.\";\n            }\n        } \n        setMsgForUser({ \n            showMsg: showMsg,\n            msg: msg,\n        })\n        setOnePayment(0); // nollställer\n    }\n\n    /* Tennary operator används för att justera texten beroende på vem det är som ska göra förändringen */\n\treturn (\n        <Content>\n            <StylePayment>\n                <div data-testid=\"payment-element\"> {msgForUser.showMsg ? <p data-testid=\"payment-element\">{msgForUser.msg}</p> : (<p > {adminOrNot ? (`VARNING! \\n Du justerar kunds saldo`) : (\"Sätt in valfritt belopp \")}</p>)}</div>\n            <form onSubmit={handleSubmit} className = \"register\">\n                <label>\n                <input\n                    placeholder={adminOrNot ? (\"Nytt saldo\") : (\"Belopp att sätta in\")}\n                    type=\"number\" \n                    name=\"onepayment\"\n                    required\n                    value={onePayment || \"\"} \n                    onChange={(e) => setOnePayment(e.target.value)}\n                />\n                </label>\n                <Delimiter></Delimiter>\n                <input type=\"submit\" value={adminOrNot ? (\"Ändra saldo\") : (\"Sätt in\")} />\n            </form>\n            </StylePayment>\n        </Content>\n\t);\n}\n\nexport default Payment\n\n"]},"metadata":{},"sourceType":"module"}