{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showParkingZone: false,\n  loadParkingZone: []\n};\n\nconst useDisplayPolyParkZone = (mapRef, props) => {\n  _s();\n\n  const [parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n  // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n\n  const [resFromApi, setResFromApi] = useState(null);\n\n  const handleSucces = res => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(cityCoords => {\n      cityCoords.parking_zones.forEach(parking_zone => {\n        let polyGon = [parking_zone.position.polygonePart1, parking_zone.position.polygonePart2, parking_zone.position.polygonePart3, parking_zone.position.polygonePart4];\n        parkingZoneName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: parking_zone.color,\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        parkingZoneName.addListener('click', event => {\n          setParkingZoneContent(prevState => ({\n            showParkingZone: !prevState.showParkingZone,\n            loadParkingZone: parking_zone\n          }));\n        });\n        parkingZoneName.setMap(map);\n        var holdArr = parkingZoneObject;\n        holdArr.push(parkingZoneName);\n        setParkingZoneObject(holdArr);\n      });\n    });\n  }; // funktion som togglar state, från andra komponenter\n\n\n  const showInfoForParkingZone = trueOrFalse => {\n    setParkingZoneContent({\n      showParkingZone: trueOrFalse\n    });\n  }; // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n  // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\n\n  function removeParkingZonesFromMap() {\n    parkingZoneObject.forEach(parkingZone => {\n      parkingZone.setMap(null);\n    });\n    return;\n  }\n\n  useEffect(() => {\n    const fetchData = () => {\n      try {} catch (error) {}\n    };\n  }, [props.ifToShowParkingZone.loadParkingZone]); // useEffect(async () => {\n  //     // Om loadParkingZone ska tas bort från kartan\n  //     if (props.ifToShowParkingZone.loadParkingZone === false ) {\n  //         removeParkingZonesFromMap()\n  //         return\n  //     }\n  //     // Om state är null == ej hämtat från backend ännu\n  //     if (resFromApi === null) {\n  //         let res = await Api.getAllCitys();\n  //         setResFromApi(res);\n  //         handleSucces(res)\n  //     // Annars använd det som är sparat i state\n  //     } else if (resFromApi != null) {\n  //         handleSucces(resFromApi);\n  //     } else {\n  //         console.log(\"Error\")\n  //         return;\n  //     }\n  // },[mapRef, props.ifToShowParkingZone.loadParkingZone])\n\n  return {\n    parkingZoneObject,\n    parkingZoneContent,\n    showInfoForParkingZone\n  };\n};\n\n_s(useDisplayPolyParkZone, \"zEgb8Nz4iTwXCfZdtqHEbl2N3K4=\");\n\nexport default useDisplayPolyParkZone;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyParkZone.js"],"names":["useState","useEffect","Api","initalValue","showParkingZone","loadParkingZone","useDisplayPolyParkZone","mapRef","props","parkingZoneObject","setParkingZoneObject","parkingZoneContent","setParkingZoneContent","resFromApi","setResFromApi","handleSucces","res","parkingZoneName","map","current","maps","forEach","cityCoords","parking_zones","parking_zone","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","prevState","setMap","holdArr","push","showInfoForParkingZone","trueOrFalse","removeParkingZonesFromMap","parkingZone","fetchData","error","ifToShowParkingZone"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowParkingZone: false,\n\tloadParkingZone: []\n}\n\nconst useDisplayPolyParkZone = (mapRef, props) => {\n    const[parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n    // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n    const[resFromApi, setResFromApi] = useState(null); \n\n    const handleSucces = (res) => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.forEach(cityCoords => {\n        cityCoords.parking_zones.forEach(parking_zone => {         \n            let polyGon = \n                ([\n                    parking_zone.position.polygonePart1,\n                    parking_zone.position.polygonePart2,\n                    parking_zone.position.polygonePart3,\n                    parking_zone.position.polygonePart4,\n                ]);\n            parkingZoneName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: parking_zone.color,\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35,\n                });\n            \n            parkingZoneName.addListener('click', (event) => {\n                setParkingZoneContent(prevState => ({\n                    showParkingZone: !prevState.showParkingZone,\n                    loadParkingZone: parking_zone\n                }));\n            });\n        parkingZoneName.setMap(map);\n        var holdArr = parkingZoneObject;\n        holdArr.push(parkingZoneName);\n        setParkingZoneObject(holdArr);\n\n        })\n\n    })\n};\n\n    // funktion som togglar state, från andra komponenter\n    const showInfoForParkingZone = (trueOrFalse) => {\n        setParkingZoneContent({ showParkingZone: trueOrFalse});\n\t}\n\n    // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n    // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\tfunction removeParkingZonesFromMap() { \n\t\t\n\t\t\tparkingZoneObject.forEach(parkingZone => {\n\t\t\t\tparkingZone.setMap(null);\n\t\t\t})\n\t\t\n        return\n\t}\n\n    useEffect(() => {\n        const fetchData = () => {\n            try {\n                \n            } catch (error) {\n                \n            }\n        }\n\n    }, [props.ifToShowParkingZone.loadParkingZone])\n\n    // useEffect(async () => {\n    //     // Om loadParkingZone ska tas bort från kartan\n    //     if (props.ifToShowParkingZone.loadParkingZone === false ) {\n    //         removeParkingZonesFromMap()\n    //         return\n    //     }\n    //     // Om state är null == ej hämtat från backend ännu\n    //     if (resFromApi === null) {\n    //         let res = await Api.getAllCitys();\n    //         setResFromApi(res);\n    //         handleSucces(res)\n    //     // Annars använd det som är sparat i state\n    //     } else if (resFromApi != null) {\n    //         handleSucces(resFromApi);\n    //     } else {\n    //         console.log(\"Error\")\n    //         return;\n    //     }\n    // },[mapRef, props.ifToShowParkingZone.loadParkingZone])\n    \n    return {parkingZoneObject, parkingZoneContent, showInfoForParkingZone};\n};\nexport default useDisplayPolyParkZone;\n\n"]},"metadata":{},"sourceType":"module"}