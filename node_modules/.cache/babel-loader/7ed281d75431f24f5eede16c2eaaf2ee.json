{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [newPosCoord, setNewPosCoord] = useState({});\n  /* hämtar alla laddstationer sparar i state */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    setCharging_posts(city[0].charging_posts);\n  }\n  /* När admin förflyttar cykel */\n\n\n  const handleSubmit = async () => {\n    console.log(moveBikeToColor);\n\n    if (moveBikeToColor === '') {\n      setMessage(\"Välj först vart du vill förflytta cykeln\");\n    } else {\n      calculateScooterNewPosition();\n      updateScooter();\n      updateScootersUser();\n      updateScooterLogg();\n      updateZon();\n    }\n  };\n\n  async function updateScooter() {\n    var position = props.position;\n    var newPosition;\n    var speed = \"0\";\n    var battery = \"100\";\n    var response;\n    newPosition = calculateScooterNewPosition();\n\n    if (position !== null) {\n      response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n      if (response === `Object: ${props.id} updated`) {\n        return true;\n      }\n    }\n  }\n\n  async function updateScootersUser() {\n    var response = await Api.updateAScootersUser(props.id); //uppdaterar scooterns användare\n\n    if (response === `Object: ${props.id} updated`) {\n      return true;\n    }\n  }\n\n  async function updateScooterLogg() {\n    var active_user = \"null\";\n    var event = getEventString();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var newPosition = calculateScooterNewPosition();\n    const varForUpdate = {\n      id: props.id,\n      active_user: active_user,\n      event: event,\n      start_lat: props.position.lat,\n      start_lng: props.position.lng,\n      time: time,\n      end_lat: newPosition.lat,\n      end_lng: newPosition.lng\n    };\n    var response = await Api.updateAScootersLogg(varForUpdate);\n\n    if (response && response.data.result === `Object: ${props.id} updated`) {\n      setMessage(\"Cykel förflyttad, logg uppdaterad\");\n    } else {\n      setMessage(\"Något gick fel\");\n    }\n  }\n  /* UPPDATERA ZONER */\n\n  /* Tid för eventet (loggen) +1 i månad, så blir det rätt*/\n\n\n  function getTime() {\n    var today = new Date();\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    var time = today.getHours() + \":\" + (today.getMinutes() < 10 ? '0' : '' + today.getMinutes());\n    console.log(time);\n    var dateTime = date + ' ' + time;\n    return {\n      time,\n      dateTime\n    };\n  }\n  /* String för event (loggen) */\n\n\n  function getEventString() {\n    var newPosition = calculateScooterNewPosition();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var movedBy = myContext.userHook.value.user;\n    var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n    return event;\n  }\n  /* Räknar ut ny position inom den zon som scootern ska flyttas till\n      Om den nya zonen ej är inom området så anropas denna funktionen igen\n      för att hitta en ny position som stämmer. Matten är inte exakt.\n  */\n\n\n  function calculateScooterNewPosition() {\n    let newPosition;\n    let position = props.position;\n    var insidePoly = false;\n    charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n    let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n    let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n    var polygone = [[newPosition.polygonePart1.lat, newPosition.polygonePart1.lng], [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng], [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng], [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]];\n    newPosition = {\n      lat: lat,\n      lng: lng\n    };\n    var newPositionArr = [newPosition.lat, newPosition.lng];\n\n    var pointInPolygon = require('point-in-polygon');\n\n    var insidePoly = pointInPolygon(newPositionArr, polygone);\n\n    if (!insidePoly) {\n      calculateScooterNewPosition();\n    }\n\n    setNewPosCoord(newPosition);\n  }\n  /* uppdaterar zonen */\n\n\n  async function updateZon() {\n    let res = await Api.updateZone(props.city, 1, moveBikeToColor);\n  }\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 5000);\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: '',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"t5Oask+eOMbIIzH+yYFYxe6BHTQ=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","message","setMessage","newPosCoord","setNewPosCoord","getLoadStationsForMovingBike","city","getACity","handleSubmit","console","log","calculateScooterNewPosition","updateScooter","updateScootersUser","updateScooterLogg","updateZon","position","newPosition","speed","battery","response","updateAScooter","id","updateAScootersUser","active_user","event","getEventString","time","dateTime","getTime","varForUpdate","start_lat","lat","start_lng","lng","end_lat","end_lng","updateAScootersLogg","data","result","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","movedBy","userHook","value","user","insidePoly","filter","elem","color","includes","polygonePart1","Math","random","polygonePart4","polygone","polygonePart2","polygonePart3","newPositionArr","pointInPolygon","require","res","updateZone","setTimeout","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n    const [message, setMessage] = useState(\"\")\n    const [newPosCoord, setNewPosCoord] = useState({})\n\n\n    /* hämtar alla laddstationer sparar i state */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);    \n        setCharging_posts(city[0].charging_posts)\n    }\n    /* När admin förflyttar cykel */\n    const handleSubmit = async () => {\n        console.log(moveBikeToColor)\n        if (moveBikeToColor === '') {\n            setMessage(\"Välj först vart du vill förflytta cykeln\")\n        } else {\n            calculateScooterNewPosition()\n            updateScooter();\n            updateScootersUser();\n            updateScooterLogg();\n            updateZon();\n        }\n    }\n\n    async function updateScooter() {\n\n        var position = props.position;\n        var newPosition;\n        var speed = \"0\";\n        var battery = \"100\";\n        var response;\n        newPosition = calculateScooterNewPosition()\n        if (position !== null) {\n            response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n            if(response === `Object: ${props.id} updated`) {\n                return true;\n            }\n       }\n    }\n\n    async function updateScootersUser() {\n\n        var response = await Api.updateAScootersUser(props.id);  //uppdaterar scooterns användare\n        if(response === `Object: ${props.id} updated`) {\n            return true;\n        }\n    }\n\n    async function updateScooterLogg() {\n\n        var active_user = \"null\";\n        var event = getEventString();\n        var {time, dateTime} = getTime();\n        var newPosition = calculateScooterNewPosition();\n\n        const varForUpdate = {\n            id: props.id,\n            active_user: active_user,\n            event: event,\n            start_lat: props.position.lat,\n            start_lng: props.position.lng,\n            time: time,\n            end_lat: newPosition.lat,\n            end_lng: newPosition.lng,\n        }\n        var response = await Api.updateAScootersLogg(varForUpdate);\n        if(response && response.data.result === `Object: ${props.id} updated`) {\n            setMessage(\"Cykel förflyttad, logg uppdaterad\")\n        } else {\n            setMessage(\"Något gick fel\")\n        }  \n    }\n\n    /* UPPDATERA ZONER */\n\n    /* Tid för eventet (loggen) +1 i månad, så blir det rätt*/\n    function getTime() {\n        var today = new Date();\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n        var time = today.getHours() + \":\" + (today.getMinutes()<10?'0':'' + today.getMinutes())\n        console.log(time)\n        var dateTime = date+' '+time;\n        return {time, dateTime}\n    }\n\n    /* String för event (loggen) */\n    function getEventString() {\n        var newPosition = calculateScooterNewPosition();\n        var {time, dateTime} = getTime();\n        var movedBy = myContext.userHook.value.user;\n        var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n        return event\n    }\n\n    /* Räknar ut ny position inom den zon som scootern ska flyttas till\n        Om den nya zonen ej är inom området så anropas denna funktionen igen\n        för att hitta en ny position som stämmer. Matten är inte exakt.\n    */\n    function calculateScooterNewPosition() {\n        let newPosition;\n        let position = props.position;\n        var insidePoly = false;\n\n        charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n        let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n        let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n        var polygone= [\n            [newPosition.polygonePart1.lat, newPosition.polygonePart1.lng],\n            [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng],\n            [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng],\n            [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]\n        ]\n        newPosition = {lat: lat, lng: lng}\n\n        var newPositionArr = [newPosition.lat, newPosition.lng]\n        var pointInPolygon = require('point-in-polygon');\n        var insidePoly = pointInPolygon(newPositionArr, polygone);\n\n        if(!insidePoly) {\n            calculateScooterNewPosition()\n        }\n        setNewPosCoord(newPosition)\n    }\n\n   \n\n\n    /* uppdaterar zonen */\n    async function updateZon() {\n        let res = await Api.updateZone(props.city, 1, moveBikeToColor);\n    }\n\n\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 5000);\n    }, [message])\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {message && <p style={{color:\"red\"}}> {message} </p>} {/* meddelande om det går bra/dåligt med uppdatering */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}\n            value = {moveBikeToColor}\n            >\n            <option value={''}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}