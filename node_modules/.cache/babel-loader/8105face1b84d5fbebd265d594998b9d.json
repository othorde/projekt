{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMaps = async mapRef => {\n  _s();\n\n  const [loadStationObject, setLoadStationObject] = useState(\"[]\");\n  const [loadStationContent, setLoadStationContent] = useState(\"\");\n  const [loadStationError, setLoadStationError] = useState(\"\");\n  let res;\n  useEffect(() => {\n    getCitys();\n  }, [mapRef]);\n\n  const getCitys = async () => {\n    let res = await Api.getAllCitys();\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.map(cityCoords => {\n      cityCoords.charging_posts.map(loadStations => {\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        loadStationName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"yellow\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        loadStationName.addListener('click', event => {//setLoadStationContent({loadStations});\n        });\n        loadStationName.setMap(map);\n        setLoadStationObject(loadStationName);\n      });\n    });\n  };\n\n  return {\n    loadStationObject\n  };\n};\n\n_s(useLoadStationsForMaps, \"8lLsoQS+VgBohVEZqkRwVfkRMLI=\");\n\nexport default useLoadStationsForMaps; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMaps","mapRef","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","res","getCitys","getAllCitys","loadStationName","map","current","maps","cityCoords","charging_posts","loadStations","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","setMap"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,MAAP,IAAmB;AAAA;;AACjD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,EAAD,CAAxD;AAEG,MAAIW,GAAJ;AACAV,EAAAA,SAAS,CAAC,MAAO;AACbW,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACR,MAAD,CAFM,CAAT;;AAKA,QAAMQ,QAAQ,GAAG,YAAY;AAEzB,QAAID,GAAG,GAAG,MAAMT,GAAG,CAACW,WAAJ,EAAhB;AAEA,QAAIC,eAAJ;AACA,UAAMC,GAAG,GAAGX,MAAM,CAACY,OAAP,CAAeD,GAA3B;AACA,UAAME,IAAI,GAAGb,MAAM,CAACY,OAAP,CAAeC,IAA5B;AAEAN,IAAAA,GAAG,CAACI,GAAJ,CAAQG,UAAU,IAAI;AAClBA,MAAAA,UAAU,CAACC,cAAX,CAA0BJ,GAA1B,CAA8BK,YAAY,IAAI;AAC1C,YAAIC,OAAO,GACN,CAACH,UAAU,CAACI,QAAX,CAAoBC,aAArB,EACGL,UAAU,CAACI,QAAX,CAAoBE,aADvB,EAEGN,UAAU,CAACI,QAAX,CAAoBG,aAFvB,EAGGP,UAAU,CAACI,QAAX,CAAoBI,aAHvB,CADL;AAMAZ,QAAAA,eAAe,GAAG,IAAIG,IAAI,CAACU,OAAT,CAAiB;AAC/BC,UAAAA,KAAK,EAAEP,OADwB;AAE/BQ,UAAAA,WAAW,EAAE,QAFkB;AAG/BC,UAAAA,aAAa,EAAE,GAHgB;AAI/BC,UAAAA,YAAY,EAAE,CAJiB;AAK/BC,UAAAA,SAAS,EAAE,aALoB;AAM/BC,UAAAA,WAAW,EAAE;AANkB,SAAjB,CAAlB;AASJnB,QAAAA,eAAe,CAACoB,WAAhB,CAA4B,OAA5B,EAAsCC,KAAD,IAAW,CAC5C;AACH,SAFD;AAGArB,QAAAA,eAAe,CAACsB,MAAhB,CAAuBrB,GAAvB;AACAT,QAAAA,oBAAoB,CAACQ,eAAD,CAApB;AACC,OArBD;AAsBH,KAvBD;AAyBH,GAjCD;;AAmCA,SAAO;AAACT,IAAAA;AAAD,GAAP;AAGH,CAjDD;;GAAMF,sB;;AAkDN,eAAeA,sBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMaps = async (mapRef)  => {\n\tconst [loadStationObject, setLoadStationObject] = useState(\"[]\");\n\tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n\tconst [loadStationError, setLoadStationError] = useState(\"\");\n\n    let res;\n    useEffect(() =>  {\n        getCitys()\n    }, [mapRef])\n\n\n    const getCitys = async () => {\n\n        let res = await Api.getAllCitys();\n\n        var loadStationName;\n        const map = mapRef.current.map;\n        const maps = mapRef.current.maps;\n\n        res.map(cityCoords => {\n            cityCoords.charging_posts.map(loadStations => {            \n                let polyGon = \n                    ([cityCoords.position.polygonePart1,\n                        cityCoords.position.polygonePart2,\n                        cityCoords.position.polygonePart3,\n                        cityCoords.position.polygonePart4\n                    ]);\n                loadStationName = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"yellow\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n            \n            loadStationName.addListener('click', (event) => {\n                //setLoadStationContent({loadStations});\n            });\n            loadStationName.setMap(map);\n            setLoadStationObject(loadStationName);\n            })\n        })\n        \n    }\n    \n    return {loadStationObject}\n    \n\n};\nexport default useLoadStationsForMaps;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}