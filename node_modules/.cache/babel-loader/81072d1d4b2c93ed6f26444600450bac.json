{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Admin\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //components\n\nimport Map from '../Map/index'; //Styles\n\nimport { Wrapper, Content, Nav, MapContainer } from './Form.styles';\nimport Api from '../../api';\n/* link / navLinkto (to) prop använder invoice number för att ladda sidan med\n  rätt id\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet initalValue = {\n  getbike: false,\n  content: []\n};\nlet initalValueLoadCitys = {\n  loadCity: false\n};\n\nconst Admin = () => {\n  _s();\n\n  const [scooter, setScooter] = useState(initalValue);\n  const [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys); // hämtar ju alla scootrar här varje gång man trycker.\n  // Kanske onödigt? Samtidigt vill man få det uppdaterat?\n\n  const getScooters = async () => {\n    try {\n      let res = await Api.getAllScooters();\n      setBike(prevState => ({\n        getbike: !prevState.getbike,\n        content: res\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCitys = async () => {\n    try {\n      setIfToShowCity(prevState => ({\n        loadCity: !prevState.loadCity\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getBikes,\n          children: \" Ladda cyklar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getCitys,\n          children: \"  St\\xE4der \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          bikes: bikes,\n          ifToShowCity: ifToShowCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Admin, \"S64f5mCq0oPFSBZHPTuhjgpWrVI=\");\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Admin/index.js"],"names":["React","useState","useEffect","Map","Wrapper","Content","Nav","MapContainer","Api","initalValue","getbike","content","initalValueLoadCitys","loadCity","Admin","scooter","setScooter","ifToShowCity","setIfToShowCity","getScooters","res","getAllScooters","setBike","prevState","error","console","log","getCitys","getBikes","bikes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAA0BC,SAA1B,QAA0C,OAA1C,C,CACA;;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,SAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,GAA1B,EAA+BC,YAA/B,QAAkD,eAAlD;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA;AACA;AACA;;;AAEA,IAAIC,WAAW,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAAlB;AAKA,IAAIC,oBAAoB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE;AADgB,CAA3B;;AAIA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAACQ,WAAD,CAAtC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAACW,oBAAD,CAAhD,CAFmB,CAInB;AACA;;AACA,QAAMO,WAAW,GAAG,YAAW;AACxB,QAAI;AACA,UAAIC,GAAG,GAAG,MAAMZ,GAAG,CAACa,cAAJ,EAAhB;AACTC,MAAAA,OAAO,CAACC,SAAS,KAAK;AACrBb,QAAAA,OAAO,EAAE,CAACa,SAAS,CAACb,OADC;AAErBC,QAAAA,OAAO,EAAES;AAFY,OAAL,CAAV,CAAP;AAIM,KAND,CAME,OAAOI,KAAP,EAAc;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACM;AACJ,GAVJ;;AAYA,QAAMG,QAAQ,GAAG,YAAW;AAC3B,QAAI;AACHT,MAAAA,eAAe,CAACK,SAAS,KAAK;AAC7BV,QAAAA,QAAQ,EAAE,CAACU,SAAS,CAACV;AADQ,OAAL,CAAV,CAAf;AAGM,KAJP,CAIQ,OAAOW,KAAP,EAAc;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACM;AACP,GARD;;AAUD,sBACI,QAAC,OAAD;AAAA,2BACI,QAAC,OAAD;AAAA,8BACL,QAAC,GAAD;AAAA,gCACC;AAAQ,UAAA,OAAO,EAAGI,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAQ,UAAA,OAAO,EAAGD,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cADK,eAKL,QAAC,YAAD;AAAA,+BACC,QAAC,GAAD;AAAK,UAAA,KAAK,EAAEE,KAAZ;AAAmB,UAAA,YAAY,EAAEZ;AAAjC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cALK;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaC,CAzCD;;GAAMH,K;;KAAAA,K;AA2CN,eAAeA,KAAf","sourcesContent":["import React, {useState , useEffect} from \"react\";\n//components\nimport Map from '../Map/index'\n\n//Styles\nimport {Wrapper, Content, Nav, MapContainer} from './Form.styles'\nimport Api from '../../api'\n/* link / navLinkto (to) prop använder invoice number för att ladda sidan med\n  rätt id\n*/\n\nlet initalValue = {\n\tgetbike: false,\n\tcontent: []\n}\n\nlet initalValueLoadCitys = {\n\tloadCity: false,\n}\n\nconst Admin = () => {\n\tconst [scooter, setScooter] = useState(initalValue);\n\tconst [ifToShowCity, setIfToShowCity] = useState(initalValueLoadCitys);\n\n\t// hämtar ju alla scootrar här varje gång man trycker.\n\t// Kanske onödigt? Samtidigt vill man få det uppdaterat?\n\tconst getScooters = async() => {\n        try {\n            let res = await Api.getAllScooters();  \n\t\t\tsetBike(prevState => ({\n\t\t\t\tgetbike: !prevState.getbike,\n\t\t\t\tcontent: res\n\t\t\t  }));\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n    }\n\n\tconst getCitys = async() => {\n\t\ttry {\n\t\t\tsetIfToShowCity(prevState => ({\n\t\t\t\tloadCity: !prevState.loadCity,\n\t\t\t\t}));\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n\t}\n\nreturn (\n    <Wrapper>\n        <Content>\n\t\t\t<Nav>\n\t\t\t\t<button onClick= {getBikes} > Ladda cyklar </button>\n\t\t\t\t<button onClick= {getCitys} >  Städer </button>\n\t\t\t</Nav>\n\t\t\t<MapContainer>\n\t\t\t\t<Map bikes={bikes} ifToShowCity={ifToShowCity} ></Map>\n\t\t\t</MapContainer>\n        </Content>\n    </Wrapper>\n  )\n}\n\nexport default Admin\n\n"]},"metadata":{},"sourceType":"module"}