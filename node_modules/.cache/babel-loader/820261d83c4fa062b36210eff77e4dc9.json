{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport Api from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n     */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.map(elem => {\n      setCharging_posts([elem]);\n    });\n  } // Vad behöver uppdateras?\n  // Scooterns plats ny long lat\n  // Uppdatera hur många som finns i föregående zon\n  // uppdatera hur många som finns i den nya zonen\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = () => {\n    if (moveBikeToColor !== null) {\n      console.log(moveBikeToColor);\n      let bikeId = props.id;\n      let position = props.position;\n      let battery = props.battery;\n      let speed = props.speed;\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      var dateTime = date + ' ' + time;\n      let newPosition;\n      console.log(props);\n      charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n\n      if (position !== null) {\n        var lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n        var lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n        newPosition = {\n          lat: lat,\n          lng: lng\n        };\n        console.log(props.position); // var logg = `${dateTime} \\n \n        //     Moved(update) this bike (bikeId:${props.id}) \n        //     from position: ${props.position} to the ${moveBikeToColor} zon. \n        //     Exact position: ${newPosition}.\n        //     Speed is now 0 and battery is charged to 100%.\n        //     This was carried out by admin.\n        // ` \n        //console.log(logg)\n        //Api.updateAScooter(bikeId, newPosition, movedBy, battery, speed, logg)\n        // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n        // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \" F\\xF6rflytta cykel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"v3F1t0iaCax8Kg9kUJmPztAKqSs=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","Api","MoveBike","props","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","getLoadStationsForMovingBike","city","getACity","map","elem","handleSubmit","console","log","bikeId","id","position","battery","speed","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","newPosition","filter","color","includes","lat","polygonePart1","Math","random","polygonePart4","lng","e","target","value"],"mappings":"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","sourcesContent":["import {React, useState} from \"react\";\nimport Api from \"../../api\";\nexport default function MoveBike(props) {\n\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n       */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.map(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    // Vad behöver uppdateras?\n    // Scooterns plats ny long lat\n    // Uppdatera hur många som finns i föregående zon\n    // uppdatera hur många som finns i den nya zonen\n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = () => {\n\n        if (moveBikeToColor !== null) {\n            console.log((moveBikeToColor))\n            let bikeId = props.id;\n            let position = props.position;\n            let battery = props.battery;\n            let speed = props.speed;\n            var today = new Date();\n            var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n            var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            var dateTime = date+' '+time;\n            let newPosition;\n\n            console.log(props)\n            \n            charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            if ( position !== null) {\n            var lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n            var lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n            newPosition = {lat: lat, lng: lng}\n            console.log(props.position)\n            \n            // var logg = `${dateTime} \\n \n            //     Moved(update) this bike (bikeId:${props.id}) \n            //     from position: ${props.position} to the ${moveBikeToColor} zon. \n            //     Exact position: ${newPosition}.\n            //     Speed is now 0 and battery is charged to 100%.\n            //     This was carried out by admin.\n            // ` \n            //console.log(logg)\n\n            //Api.updateAScooter(bikeId, newPosition, movedBy, battery, speed, logg)\n            \n            // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n            // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n\n            }\n        }\n    }\n\n\treturn (\n        <div onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}>\n                <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n                {charging_posts.map(elem => elem !== null  &&\n                    <option key={elem.color}value={elem.color}>\n                    {elem.color + \" zon\"}\n                    </option> )}\n            </select>\n            <div> <button onClick={handleSubmit}> Förflytta cykel </button> </div>\n        </div>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}