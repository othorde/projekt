{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Oauth\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Styled from \"styled-components\";\nimport GithubIcon from \"mdi-react/GithubIcon\";\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst oauthClient = new ClientOAuth2({\n  clientId: process.env.REACT_APP_GITHUB_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n  accessTokenUri: `https://github.com/login/oauth/access_token`,\n\n  /* måste va rätt */\n  authorizationUri: \"https://github.com/login/oauth/authorize\",\n\n  /* måste ocksåva rätt */\n  redirectUri: \"http://localhost:3000/login/home\",\n  scopes: [\"identity\"]\n});\nexport default function Login() {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const [data, setData] = useState({\n    errorMessage: \"\",\n    isLoading: false\n  });\n  const {\n    client_id,\n    redirect_uri\n  } = state;\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\"); // If Github API returns the code parameter\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data,\n        isLoading: true\n      });\n      const requestData = {\n        code: newUrl[1]\n      };\n      const proxy_url = state.proxy_url; // Use code parameter and other parameters to make POST request to proxy_server\n\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData)\n      }).then(response => response.json()).then(data => {\n        dispatch({\n          type: \"LOGIN\",\n          payload: {\n            user: data,\n            isLoggedIn: true\n          }\n        });\n      }).catch(error => {\n        setData({\n          isLoading: false,\n          errorMessage: \"Sorry! Login failed\"\n        });\n      });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Super amazing app\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: data.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login-container\",\n          children: data.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loader\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"login-link\",\n              href: `https://github.com/login/oauth/authorize?scope=user&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}`,\n              onClick: () => {\n                setData({ ...data,\n                  errorMessage: \"\"\n                });\n              },\n              children: [/*#__PURE__*/_jsxDEV(GithubIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Login with GitHub\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Login, \"cRBYZQP+OoZd1eTh46pKE5WPS7Q=\");\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Oauth/index.js"],"names":["React","useState","useEffect","useContext","Redirect","Styled","GithubIcon","AppContext","require","config","oauthClient","ClientOAuth2","clientId","process","env","REACT_APP_GITHUB_CLIENT_ID","clientSecret","REACT_APP_GITHUB_CLIENT_SECRET","accessTokenUri","authorizationUri","redirectUri","scopes","Login","state","dispatch","AuthContext","data","setData","errorMessage","isLoading","client_id","redirect_uri","url","window","location","href","hasCode","includes","newUrl","split","history","pushState","requestData","code","proxy_url","fetch","method","body","JSON","stringify","then","response","json","type","payload","user","isLoggedIn","catch","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Styled from \"styled-components\";\nimport GithubIcon from \"mdi-react/GithubIcon\";\nimport { AppContext } from \"../App\";\n\nrequire('dotenv').config()\n\n\nconst oauthClient = new ClientOAuth2({\n    clientId: process.env.REACT_APP_GITHUB_CLIENT_ID,\n    clientSecret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n    accessTokenUri: `https://github.com/login/oauth/access_token`, /* måste va rätt */\n    authorizationUri: \"https://github.com/login/oauth/authorize\", /* måste ocksåva rätt */\n    redirectUri: \"http://localhost:3000/login/home\",\n    scopes: [\"identity\"],\n});\n\n\n\nexport default function Login() {\n    const { state, dispatch } = useContext(AuthContext);\n    const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\n  \n    const { client_id, redirect_uri } = state;\n  \n    useEffect(() => {\n      // After requesting Github access, Github redirects back to your app with a code parameter\n      const url = window.location.href;\n      const hasCode = url.includes(\"?code=\");\n  \n      // If Github API returns the code parameter\n      if (hasCode) {\n        const newUrl = url.split(\"?code=\");\n        window.history.pushState({}, null, newUrl[0]);\n        setData({ ...data, isLoading: true });\n  \n        const requestData = {\n          code: newUrl[1]\n        };\n  \n        const proxy_url = state.proxy_url;\n  \n        // Use code parameter and other parameters to make POST request to proxy_server\n        fetch(proxy_url, {\n          method: \"POST\",\n          body: JSON.stringify(requestData)\n        })\n          .then(response => response.json())\n          .then(data => {\n            dispatch({\n              type: \"LOGIN\",\n              payload: { user: data, isLoggedIn: true }\n            });\n          })\n          .catch(error => {\n            setData({\n              isLoading: false,\n              errorMessage: \"Sorry! Login failed\"\n            });\n          });\n      }\n    }, [state, dispatch, data]);\n  \n    if (state.isLoggedIn) {\n      return <Redirect to=\"/\" />;\n    }\n  \n    return (\n      <Wrapper>\n        <section className=\"container\">\n          <div>\n            <h1>Welcome</h1>\n            <span>Super amazing app</span>\n            <span>{data.errorMessage}</span>\n            <div className=\"login-container\">\n              {data.isLoading ? (\n                <div className=\"loader-container\">\n                  <div className=\"loader\"></div>\n                </div>\n              ) : (\n                <>\n                  {\n                    // Link to request GitHub access\n                  }\n                  <a\n                    className=\"login-link\"\n                    href={`https://github.com/login/oauth/authorize?scope=user&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}`}\n                    onClick={() => {\n                      setData({ ...data, errorMessage: \"\" });\n                    }}\n                  >\n                    <GithubIcon />\n                    <span>Login with GitHub</span>\n                  </a>\n                </>\n              )}\n            </div>\n          </div>\n        </section>\n      </Wrapper>\n    );\n  }\n  \n"]},"metadata":{},"sourceType":"module"}