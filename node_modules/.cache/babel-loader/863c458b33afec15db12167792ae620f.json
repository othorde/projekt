{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../Api';\nlet initalValue = {\n  showLoadCitys: false,\n  city: []\n};\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\n\nconst useDisplayPolyCities = (mapRef, _ref) => {\n  _s();\n\n  let {\n    ifToShowCity\n  } = _ref;\n  const [cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n\n  const [cityError, setCityError] = useState(false); // funktion som togglar state, från andra Map komponent\n\n  const showInfoForCity = trueOrFalse => {\n    setCityContent({\n      showLoadCitys: trueOrFalse\n    });\n  }; // Om props ändras samt vid mount.\n  // Är props true hämta data. Om false ta bort från karta\n\n\n  useEffect(() => {\n    /* Tar emot res från getData. Loopar igenom. Skapar poly av\n    alla koordinater som tillhör städer. Lägger på onclickevent.\n    Sparar objekten i state, så de senare kan tas bort.\n    */\n    const handleSucces = res => {\n      var cityname;\n      const map = mapRef.current.map;\n      const maps = mapRef.current.maps;\n      res.forEach(city => {\n        cityname = city.city;\n        let polyGon = [city.position.polygonePart1, city.position.polygonePart2, city.position.polygonePart3, city.position.polygonePart4];\n        cityname = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        cityname.addListener('click', () => {\n          setCityContent(prevState => ({\n            showLoadCitys: !prevState.showLoadCitys,\n            city\n          }));\n        });\n        cityname.setMap(map);\n        var holdArr = cityObject;\n        holdArr.push(cityname);\n        setcityObject(holdArr);\n      });\n    }; // tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\n\n\n    function removeCitysFromMap() {\n      cityObject !== null && cityObject.forEach(city => {\n        city.setMap(null);\n      });\n    }\n\n    const getData = async () => {\n      try {\n        setCityError(false);\n        let res = await Api.getAllCitys();\n        handleSucces(res);\n      } catch (error) {\n        setCityError(true);\n      }\n    }; // Hämta data vid if\n\n\n    if (ifToShowCity.loadCity) {\n      getData();\n      const interval = setInterval(() => {\n        getData();\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n\n    ifToShowCity.loadCity === false && removeCitysFromMap();\n  }, [ifToShowCity.loadCity, cityObject, mapRef]);\n  return {\n    cityContent,\n    cityError\n  };\n};\n\n_s(useDisplayPolyCities, \"MKVggHDjb5Tm1wwHW6YYtAFolhY=\");\n\nexport default useDisplayPolyCities;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyCities.js"],"names":["useState","useEffect","Api","initalValue","showLoadCitys","city","useDisplayPolyCities","mapRef","ifToShowCity","cityObject","setcityObject","cityContent","setCityContent","cityError","setCityError","showInfoForCity","trueOrFalse","handleSucces","res","cityname","map","current","maps","forEach","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","removeCitysFromMap","getData","getAllCitys","error","loadCity","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowLoadCitys: false,\n\tcity: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyCities = (mapRef, {ifToShowCity}) => {\n    const[cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n    const[cityError, setCityError] = useState(false); \n\n\n    // funktion som togglar state, från andra Map komponent\n    const showInfoForCity = (trueOrFalse) => {\n        setCityContent({showLoadCitys: trueOrFalse });\n    }\n\n    \n    // Om props ändras samt vid mount.\n    // Är props true hämta data. Om false ta bort från karta\n    useEffect(() => {\n\n        /* Tar emot res från getData. Loopar igenom. Skapar poly av\n       alla koordinater som tillhör städer. Lägger på onclickevent.\n       Sparar objekten i state, så de senare kan tas bort.\n        */\n        const handleSucces = (res) => {\n            var cityname;\n            const map = mapRef.current.map;\n            const maps = mapRef.current.maps;\n        \n            res.forEach(city => {\n                cityname = city.city\n                let polyGon = \n                    ([city.position.polygonePart1,\n                        city.position.polygonePart2,\n                        city.position.polygonePart3,\n                        city.position.polygonePart4\n                    ]);\n                cityname = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                cityname.addListener('click', () => {\n                    setCityContent(prevState => ({\n                        showLoadCitys: !prevState.showLoadCitys,\n                        city\n                    }));\n                });\n        \n                cityname.setMap(map);\n                var holdArr = cityObject;\n                holdArr.push(cityname);\n                setcityObject(holdArr);\n            })\n        };\n\n        \n        // tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\n        function removeCitysFromMap() { \n            cityObject !== null && cityObject.forEach(city => {\n                city.setMap(null);\n            })\n        }\n    \n        const getData = async () => {\n            try {\n                setCityError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res)\n            } catch (error) {\n                setCityError(true)\n            }\n        }\n        // Hämta data vid if\n        if(ifToShowCity.loadCity) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowCity.loadCity === false && removeCitysFromMap()  \n    }, [ifToShowCity.loadCity, cityObject, mapRef])\n\n    return {cityContent, cityError};\n};\nexport default useDisplayPolyCities;\n\n"]},"metadata":{},"sourceType":"module"}