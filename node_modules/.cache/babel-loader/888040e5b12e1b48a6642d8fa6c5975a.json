{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\routes\\\\LandingPage\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // components\n\nimport Loader from '../../components/Loader'; // style\n\nimport { Wrapper } from \"./Form.styles\"; //other\n\nimport AppContext from \"../../AppContext\";\nimport Api from \"../../Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n/* Hämtar ut url koden. Skickar sedan koden till backend.\n   Så att den kan göra de request som behövs till github. \n   Får sedan tillbaka användaruppg, som används för att logga in användaren\n   genom vårt api.\n*/\n\n\nexport default function LandingPage() {\n  _s();\n\n  const [loggedInUser, setLoggedInUser] = useState(Boolean);\n  const navigate = useNavigate();\n  const myContext = useContext(AppContext);\n  useEffect(() => {\n    // Hämtar url från webbläsare\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\"); // Om github skickar tillbaka kod, ta ut koden ur URL strängen\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      const requestData = {\n        code: newUrl[1]\n      }; // skickar till backend vad den ska göra\n\n      const proxy_url = \"http://localhost:1337/api/oauth/authenticate\";\n\n      async function getGitInfo() {\n        const defaultConfig = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        };\n\n        try {\n          const endpoint = `${proxy_url}`;\n          let res;\n          let result;\n          res = await (await fetch(endpoint, { ...defaultConfig,\n            body: JSON.stringify({\n              code: requestData.code\n            })\n          })).json();\n          /* loggar in genom api och sätter user värden i localStorage samt i hook */\n\n          if (res && res.login) {\n            result = await Api.logginUserViaGit(res.login);\n\n            if (result && result.data.type === \"success\") {\n              localStorage.clear();\n              localStorage.setItem('user', JSON.stringify(res.login));\n              localStorage.setItem('tag', JSON.stringify(result.data.user.tag));\n              localStorage.setItem('id', JSON.stringify(result.data.user.id));\n              const user = {\n                user: res.login,\n                tag: result.data.user.tag,\n                id: result.data.user.id\n              };\n              myContext.setUserValues(user);\n              myContext.toggleAuth(true);\n              setLoggedInUser(true);\n            }\n          } else {\n            setLoggedInUser(\"Not OK\");\n            myContext.toggleAuth(false);\n          }\n        } catch (error) {\n          setLoggedInUser(\"Not OK\");\n          myContext.toggleAuth(false);\n        }\n      }\n\n      getGitInfo();\n    }\n  }, []);\n  useEffect(() => {\n    let tag = localStorage.getItem(\"tag\");\n\n    if (loggedInUser === true && tag) {\n      navigate(\"/login/home\");\n    }\n  }, [loggedInUser, setLoggedInUser]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: !loggedInUser === \"Not OK\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Det gick inte att logga in just nu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LandingPage, \"wUqvUK37ZuzBwWQzbG3ZOQ+Tb70=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LandingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/routes/LandingPage/index.js"],"names":["React","useState","useEffect","useContext","useNavigate","Loader","Wrapper","AppContext","Api","require","config","LandingPage","loggedInUser","setLoggedInUser","Boolean","navigate","myContext","url","window","location","href","hasCode","includes","newUrl","split","history","pushState","requestData","code","proxy_url","getGitInfo","defaultConfig","method","headers","endpoint","res","result","fetch","body","JSON","stringify","json","login","logginUserViaGit","data","type","localStorage","clear","setItem","user","tag","id","setUserValues","toggleAuth","error","getItem"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// components\nimport Loader from '../../components/Loader'\n// style\nimport {Wrapper} from \"./Form.styles\";\n//other\nimport AppContext from \"../../AppContext\";\nimport Api from \"../../Api\";\n\n\nrequire('dotenv').config()\n\n/* Hämtar ut url koden. Skickar sedan koden till backend.\n   Så att den kan göra de request som behövs till github. \n   Får sedan tillbaka användaruppg, som används för att logga in användaren\n   genom vårt api.\n*/\nexport default function LandingPage() {\n  const [loggedInUser, setLoggedInUser] = useState(Boolean);\n  const navigate = useNavigate();\n  const myContext = useContext(AppContext);        \n\n  useEffect(() => {\n    // Hämtar url från webbläsare\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\");\n\n    // Om github skickar tillbaka kod, ta ut koden ur URL strängen\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      \n      const requestData = {\n        code: newUrl[1]\n      };\n\n\t  // skickar till backend vad den ska göra\n      const proxy_url = \"http://localhost:1337/api/oauth/authenticate\";\n\t\tasync function getGitInfo() {\n\t\t\tconst defaultConfig = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\"\n\t\t\t\t},\n\t\t\t};\n\n\t\ttry {\n\t\t\tconst endpoint = `${proxy_url}`;\n\t\t\tlet res;\n\t\t\tlet result;\n\t\t\tres = await (\n\t\t\t\tawait fetch(endpoint, {\n\t\t\t\t\t...defaultConfig,\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tcode: requestData.code,\n\t\t\t\t\t})\n\t\t\t\t})).json();\n\t\t\t\t/* loggar in genom api och sätter user värden i localStorage samt i hook */\n\t\t\tif (res && res.login) {\n\t\t\t\tresult = await Api.logginUserViaGit(res.login)\n\t\t\t\tif (result && result.data.type === \"success\") {\n\t\t\t\t\tlocalStorage.clear();\n\t\t\t\t\tlocalStorage.setItem('user', JSON.stringify(res.login));\n\t\t\t\t\tlocalStorage.setItem('tag', JSON.stringify(result.data.user.tag));\n\t\t\t\t\tlocalStorage.setItem('id', JSON.stringify(result.data.user.id));\n\n\t\t\t\t\tconst user = {\n\t\t\t\t\t\tuser: res.login,\n\t\t\t\t\t\ttag: result.data.user.tag,\n\t\t\t\t\t\tid: result.data.user.id,\n\t\t\t\t\t}\n\t\t\t\t\tmyContext.setUserValues(user)\n\t\t\t\t\tmyContext.toggleAuth(true);\n\t\t\t\t\tsetLoggedInUser(true)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetLoggedInUser(\"Not OK\")\n\t\t\t\tmyContext.toggleAuth(false);\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tsetLoggedInUser(\"Not OK\")\n\t\t\tmyContext.toggleAuth(false);\n\t\t}\n\t}\n\tgetGitInfo();\n\t}\n  }, []);\n\n\t\n\tuseEffect(() => {\n\t\tlet tag = localStorage.getItem(\"tag\");\n\t\tif(loggedInUser === true && tag) {\n\t\t\tnavigate(\"/login/home\")\n\t\t}\n\t}, [loggedInUser, setLoggedInUser])\n\n\n  return (\n    <Wrapper>\n\t\t{!loggedInUser === \"Not OK\" ? \n\t\t<p>Det gick inte att logga in just nu</p> \n\t\t: (\n        \t<Loader></Loader>\n\t\t)}\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}