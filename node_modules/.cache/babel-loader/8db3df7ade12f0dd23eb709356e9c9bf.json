{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  const [message, setMessage] = useState(\"\");\n  /* hämtar alla laddstationer sparar i state */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    setCharging_posts(city[0].charging_posts);\n  }\n  /* När admin förflyttar cykel */\n\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor !== \"noValue\") {\n      updateScooter();\n      updateScootersUser();\n      updateScooterLogg();\n      updateZon();\n    }\n  };\n\n  async function updateScooter() {\n    var position = props.position;\n    var newPosition;\n    var speed = \"0\";\n    var battery = \"100\";\n    var response; // charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : setMessage(\"kunde ej flytta cykel\"))\n\n    newPosition = calculateScooterNewPosition();\n\n    if (position !== null) {\n      response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n      console.log(response);\n\n      if (response === `Object: ${props.id} updated`) {\n        return true;\n      }\n    }\n  }\n\n  async function updateScootersUser() {\n    var response = await Api.updateAScootersUser(props.id); //uppdaterar scooterns användare\n\n    if (response === `Object: ${props.id} updated`) {\n      return true;\n    }\n  }\n\n  async function updateScooterLogg() {\n    var active_user = \"null\";\n    var event = getEventString();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var newPosition = calculateScooterNewPosition();\n    const varForUpdate = {\n      id: props.id,\n      active_user: active_user,\n      event: event,\n      start_lat: props.position.lat,\n      start_lng: props.position.lng,\n      time: time,\n      end_lat: newPosition.lat,\n      end_lng: newPosition.lng\n    };\n    var response = await Api.updateAScootersLogg(varForUpdate);\n\n    if (response && response.data.result === `Object: ${props.id} updated`) {\n      setMessage(\"Cykel förflyttad, logg uppdaterad\");\n    } else {\n      setMessage(\"Något gick fel\");\n    }\n  }\n  /* UPPDATERA ZONER */\n\n  /* Tid för eventet (loggen) */\n\n\n  function getTime() {\n    var today = new Date();\n    var date = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    var dateTime = date + ' ' + time;\n    return {\n      time,\n      dateTime\n    };\n  }\n  /* String för event (loggen) */\n\n\n  function getEventString() {\n    var newPosition = calculateScooterNewPosition();\n    var {\n      time,\n      dateTime\n    } = getTime();\n    var movedBy = myContext.userHook.value.user;\n    var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n    return event;\n  }\n  /* Räknar ut ny position inom den zon som scootern ska flyttas till\n      Kontrollera denna uträkningen */\n\n\n  function calculateScooterNewPosition() {\n    let newPosition;\n    let position = props.position;\n    var insidePoly = false;\n    charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n    let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n    let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n    var polygone = [[newPosition.polygonePart1.lat, newPosition.polygonePart1.lng], [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng], [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng], [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]];\n    newPosition = {\n      lat: lat,\n      lng: lng\n    };\n    var newPositionArr = [newPosition.lat, newPosition.lng];\n\n    var pointInPolygon = require('point-in-polygon');\n\n    var insidePoly = pointInPolygon(newPositionArr, polygone);\n    console.log(insidePoly);\n\n    if (!insidePoly) {\n      calculateScooterNewPosition();\n    }\n\n    return newPosition;\n  }\n  /* uppdaterar zonen */\n\n\n  async function updateZon() {\n    let res = await Api.updateZone(props.city, 1, moveBikeToColor);\n  }\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 5000);\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"ssXEX09XlTxuSz3Dcw8Xe68iG88=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","message","setMessage","getLoadStationsForMovingBike","city","getACity","handleSubmit","updateScooter","updateScootersUser","updateScooterLogg","updateZon","position","newPosition","speed","battery","response","calculateScooterNewPosition","updateAScooter","id","console","log","updateAScootersUser","active_user","event","getEventString","time","dateTime","getTime","varForUpdate","start_lat","lat","start_lng","lng","end_lat","end_lng","updateAScootersLogg","data","result","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","movedBy","userHook","value","user","insidePoly","filter","elem","color","includes","polygonePart1","Math","random","polygonePart4","polygone","polygonePart2","polygonePart3","newPositionArr","pointInPolygon","require","res","updateZone","setTimeout","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n    const [message, setMessage] = useState(\"\")\n\n\n    /* hämtar alla laddstationer sparar i state */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);    \n        setCharging_posts(city[0].charging_posts)\n    }\n    /* När admin förflyttar cykel */\n    const handleSubmit = async () => {\n\n        if (moveBikeToColor !== \"noValue\") {\n            updateScooter();\n            updateScootersUser();\n            updateScooterLogg();\n            updateZon();\n\n        }\n    }\n\n    async function updateScooter() {\n\n        var position = props.position;\n        var newPosition;\n        var speed = \"0\";\n        var battery = \"100\";\n        var response;\n        // charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : setMessage(\"kunde ej flytta cykel\"))\n        newPosition = calculateScooterNewPosition()\n        if (position !== null) {\n            response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n            console.log(response)\n            if(response === `Object: ${props.id} updated`) {\n                return true;\n            }\n       }\n    }\n\n    async function updateScootersUser() {\n\n        var response = await Api.updateAScootersUser(props.id);  //uppdaterar scooterns användare\n        if(response === `Object: ${props.id} updated`) {\n            return true;\n        }\n    }\n\n    async function updateScooterLogg() {\n\n        var active_user = \"null\";\n        var event = getEventString();\n        var {time, dateTime} = getTime();\n        var newPosition = calculateScooterNewPosition();\n\n        const varForUpdate = {\n            id: props.id,\n            active_user: active_user,\n            event: event,\n            start_lat: props.position.lat,\n            start_lng: props.position.lng,\n            time: time,\n            end_lat: newPosition.lat,\n            end_lng: newPosition.lng,\n        }\n        var response = await Api.updateAScootersLogg(varForUpdate);\n        if(response && response.data.result === `Object: ${props.id} updated`) {\n            setMessage(\"Cykel förflyttad, logg uppdaterad\")\n        } else {\n            setMessage(\"Något gick fel\")\n        }  \n    }\n\n    /* UPPDATERA ZONER */\n\n    /* Tid för eventet (loggen) */\n    function getTime() {\n        var today = new Date();\n        var date = today.getFullYear()+'-'+(today.getMonth())+'-'+today.getDate();\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        var dateTime = date+' '+time;\n        return {time, dateTime}\n    }\n\n    /* String för event (loggen) */\n    function getEventString() {\n\n        var newPosition = calculateScooterNewPosition();\n        var {time, dateTime} = getTime();\n        var movedBy = myContext.userHook.value.user;\n        var event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n        return event\n    }\n\n    /* Räknar ut ny position inom den zon som scootern ska flyttas till\n        Kontrollera denna uträkningen */\n    function calculateScooterNewPosition() {\n        let newPosition;\n        let position = props.position;\n        var insidePoly = false;\n\n        charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n        let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n        let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n        var polygone= [\n            [newPosition.polygonePart1.lat, newPosition.polygonePart1.lng],\n            [newPosition.polygonePart2.lat, newPosition.polygonePart2.lng],\n            [newPosition.polygonePart3.lat, newPosition.polygonePart3.lng],\n            [newPosition.polygonePart4.lat, newPosition.polygonePart4.lng]\n        ]\n        newPosition = {lat: lat, lng: lng}\n\n        var newPositionArr = [newPosition.lat, newPosition.lng]\n        var pointInPolygon = require('point-in-polygon');\n        var insidePoly = pointInPolygon(newPositionArr, polygone);\n        console.log(insidePoly)\n\n        if(!insidePoly) {\n            calculateScooterNewPosition()\n        }\n        return newPosition\n\n    }\n\n   \n\n\n    /* uppdaterar zonen */\n    async function updateZon() {\n        let res = await Api.updateZone(props.city, 1, moveBikeToColor);\n    }\n\n\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 5000);\n    }, [message])\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {message && <p style={{color:\"red\"}}> {message} </p>} {/* meddelande om det går bra/dåligt med uppdatering */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}\n            value = {moveBikeToColor}\n            >\n            <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}