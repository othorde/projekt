{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst loadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  console.log(mapRef); // try {\n  //     let res = await Api.getAllCitys();\n  // if (res !== null && mapRef.current !== null) {\n  //     console.log(res)\n  //     var cityname;\n  //     const map = mapRef.map;\n  //     const maps = mapRef.maps;\n  //     res.map(cityCoords => {\n  //         cityCoords.map(loadStations => {\n  //             console.log(loadStations)\n  //         })\n  // cityname = cityCoords.city\n  // let polyGon = \n  //     ([cityCoords.position.polygonePart1,\n  //         cityCoords.position.polygonePart2,\n  //         cityCoords.position.polygonePart3,\n  //         cityCoords.position.polygonePart4\n  //     ]);\n  // cityname = new maps.Polygon({\n  //     paths: polyGon,\n  //     strokeColor: \"#FF0000\",\n  //     strokeOpacity: 0.9,\n  //     strokeWeight: 2,\n  //     fillColor: \"transparent\",\n  //     fillOpacity: 0.35,\n  //     });\n  // cityname.addListener('click', (event) => {\n  //     console.log(\"HEJ\", cityCoords)\n  //     setPopupInfo({\t\n  //         showBike: false,\n  //         showCity: true,\n  //         showLocation: false,\n  //         content: cityCoords\n  //     })\n  // });\n  // cityname.setMap(map);\n  // setCitysObject(oldArray => [...oldArray, cityname]);\n  // })\n  // }\n  // } catch (error) {\n  //     console.log(error)\n  // }\n};\n\n_s(loadStationsForMap, \"s1AWfSwHheD+DhFje7irgvZQyA8=\");\n\nexport default loadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","loadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","console","log"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,kBAAkB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAE/C,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CL,QAAQ,CAAC,EAAD,CAA1D;AACGM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAH4C,CAI5C;AACA;AACI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACJ;AAER;AACA;AACA;AACH,CAtDD;;GAAMD,kB;;AAuDN,eAAeA,kBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst loadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n    console.log(mapRef)\n    // try {\n    //     let res = await Api.getAllCitys();\n        // if (res !== null && mapRef.current !== null) {\n        //     console.log(res)\n\n        //     var cityname;\n        //     const map = mapRef.map;\n        //     const maps = mapRef.maps;\n        //     res.map(cityCoords => {\n        //         cityCoords.map(loadStations => {\n        //             console.log(loadStations)\n                \n                    \n                \n        //         })\n\n                // cityname = cityCoords.city\n                // let polyGon = \n                //     ([cityCoords.position.polygonePart1,\n                //         cityCoords.position.polygonePart2,\n                //         cityCoords.position.polygonePart3,\n                //         cityCoords.position.polygonePart4\n                //     ]);\n                // cityname = new maps.Polygon({\n                //     paths: polyGon,\n                //     strokeColor: \"#FF0000\",\n                //     strokeOpacity: 0.9,\n                //     strokeWeight: 2,\n                //     fillColor: \"transparent\",\n                //     fillOpacity: 0.35,\n                //     });\n                \n                // cityname.addListener('click', (event) => {\n                //     console.log(\"HEJ\", cityCoords)\n                //     setPopupInfo({\t\n                //         showBike: false,\n                //         showCity: true,\n                //         showLocation: false,\n                //         content: cityCoords\n                //     })\n                // });\n                // cityname.setMap(map);\n                // setCitysObject(oldArray => [...oldArray, cityname]);\n\n                // })\n            // }\n\n    // } catch (error) {\n    //     console.log(error)\n    // }\n}\nexport default loadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}