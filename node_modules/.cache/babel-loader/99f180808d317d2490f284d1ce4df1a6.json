{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n  useEffect(() => {\n    if (!cartId || cartId.length === 0) {\n      createCart();\n    }\n  }, [cartId]);\n  let res = await Api.getAllCitys();\n\n  if (res !== null && mapRef.current !== null) {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.map(cityCoords => {\n      cityCoords.charging_posts.map(loadStations => {\n        console.log(loadStations);\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        cityname = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"yellow\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n      }); // cityname.addListener('click', (event) => {\n      //     console.log(\"HEJ\", cityCoords)\n      //     setPopupInfo({\t\n      //         showBike: false,\n      //         showCity: true,\n      //         showLocation: false,\n      //         content: cityCoords\n      //     })\n      // });\n\n      cityname.setMap(map);\n      setLoadStationObject(oldArray => [...oldArray, cityname]);\n    });\n  }\n\n  return {\n    LoadStationObject\n  };\n};\n\n_s(useLoadStationsForMap, \"xorDOZQsc8fzNyD/vSuUzBKKhqU=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","cartId","length","createCart","res","getAllCitys","current","cityname","map","maps","cityCoords","charging_posts","loadStations","console","log","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","oldArray"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAElD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AAGGC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACM,MAAD,IAAWA,MAAM,CAACC,MAAP,KAAkB,CAAhC,EAAkC;AAC9BC,MAAAA,UAAU;AACb;AACJ,GAJQ,EAIN,CAACF,MAAD,CAJM,CAAT;AAOA,MAAIG,GAAG,GAAG,MAAMR,GAAG,CAACS,WAAJ,EAAhB;;AACA,MAAID,GAAG,KAAK,IAAR,IAAgBN,MAAM,CAACQ,OAAP,KAAmB,IAAvC,EAA6C;AAEzC,QAAIC,QAAJ;AACA,UAAMC,GAAG,GAAGV,MAAM,CAACQ,OAAP,CAAeE,GAA3B;AACA,UAAMC,IAAI,GAAGX,MAAM,CAACQ,OAAP,CAAeG,IAA5B;AACAL,IAAAA,GAAG,CAACI,GAAJ,CAAQE,UAAU,IAAI;AAElBA,MAAAA,UAAU,CAACC,cAAX,CAA0BH,GAA1B,CAA8BI,YAAY,IAAI;AAC1CC,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEA,YAAIG,OAAO,GACN,CAACL,UAAU,CAACM,QAAX,CAAoBC,aAArB,EACGP,UAAU,CAACM,QAAX,CAAoBE,aADvB,EAEGR,UAAU,CAACM,QAAX,CAAoBG,aAFvB,EAGGT,UAAU,CAACM,QAAX,CAAoBI,aAHvB,CADL;AAMAb,QAAAA,QAAQ,GAAG,IAAIE,IAAI,CAACY,OAAT,CAAiB;AACxBC,UAAAA,KAAK,EAAEP,OADiB;AAExBQ,UAAAA,WAAW,EAAE,QAFW;AAGxBC,UAAAA,aAAa,EAAE,GAHS;AAIxBC,UAAAA,YAAY,EAAE,CAJU;AAKxBC,UAAAA,SAAS,EAAE,aALa;AAMxBC,UAAAA,WAAW,EAAE;AANW,SAAjB,CAAX;AAQH,OAjBD,EAFkB,CAoBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,MAAAA,QAAQ,CAACqB,MAAT,CAAgBpB,GAAhB;AACAR,MAAAA,oBAAoB,CAAC6B,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAActB,QAAd,CAAb,CAApB;AAEC,KAhCL;AAiCC;;AACD,SAAO;AAACR,IAAAA;AAAD,GAAP;AAEP,CAtDD;;GAAMF,qB;;AAuDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n   \n    \n    useEffect(() => {\n        if(!cartId || cartId.length === 0){\n            createCart();\n        }\n    }, [cartId]);\n\n\n    let res = await Api.getAllCitys();\n    if (res !== null && mapRef.current !== null) {\n\n        var cityname;\n        const map = mapRef.current.map;\n        const maps = mapRef.current.maps;\n        res.map(cityCoords => {\n\n            cityCoords.charging_posts.map(loadStations => {\n                console.log(loadStations)\n\n                let polyGon = \n                    ([cityCoords.position.polygonePart1,\n                        cityCoords.position.polygonePart2,\n                        cityCoords.position.polygonePart3,\n                        cityCoords.position.polygonePart4\n                    ]);\n                cityname = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"yellow\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n            })\n            // cityname.addListener('click', (event) => {\n            //     console.log(\"HEJ\", cityCoords)\n            //     setPopupInfo({\t\n            //         showBike: false,\n            //         showCity: true,\n            //         showLocation: false,\n            //         content: cityCoords\n            //     })\n            // });\n            cityname.setMap(map);\n            setLoadStationObject(oldArray => [...oldArray, cityname]);\n\n            })\n        }\n        return {LoadStationObject};\n\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}