{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async function () {\n  _s();\n\n  let mapRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [LoadStationObject, setLoadStationObject] = useState(\"\");\n\n  try {\n    let res = await Api.getAllCitys();\n\n    if (res !== null && mapRef.current !== null) {\n      var cityname;\n      const map = mapRef.current.map;\n      const maps = mapRef.current.maps;\n      res.map(cityCoords => {\n        cityCoords.charging_posts.map(loadStations => {\n          console.log(loadStations);\n          let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n          cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"yellow\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35\n          });\n        }); // cityname.addListener('click', (event) => {\n        //     console.log(\"HEJ\", cityCoords)\n        //     setPopupInfo({\t\n        //         showBike: false,\n        //         showCity: true,\n        //         showLocation: false,\n        //         content: cityCoords\n        //     })\n        // });\n\n        cityname.setMap(map);\n        setLoadStationObject(oldArray => [...oldArray, cityname]);\n      });\n    }\n\n    return {\n      location,\n      error\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n_s(useLoadStationsForMap, \"s1AWfSwHheD+DhFje7irgvZQyA8=\");\n\nexport default useLoadStationsForMap; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMap","mapRef","LoadStationObject","setLoadStationObject","res","getAllCitys","current","cityname","map","maps","cityCoords","charging_posts","loadStations","console","log","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","oldArray","location","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,qBAAqB,GAAG,kBAAqB;AAAA;;AAAA,MAAdC,MAAc,uEAAP,EAAO;AAElD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;;AACG,MAAI;AACA,QAAIO,GAAG,GAAG,MAAML,GAAG,CAACM,WAAJ,EAAhB;;AACA,QAAID,GAAG,KAAK,IAAR,IAAgBH,MAAM,CAACK,OAAP,KAAmB,IAAvC,EAA6C;AAEzC,UAAIC,QAAJ;AACA,YAAMC,GAAG,GAAGP,MAAM,CAACK,OAAP,CAAeE,GAA3B;AACA,YAAMC,IAAI,GAAGR,MAAM,CAACK,OAAP,CAAeG,IAA5B;AACAL,MAAAA,GAAG,CAACI,GAAJ,CAAQE,UAAU,IAAI;AAElBA,QAAAA,UAAU,CAACC,cAAX,CAA0BH,GAA1B,CAA8BI,YAAY,IAAI;AAC1CC,UAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEA,cAAIG,OAAO,GACN,CAACL,UAAU,CAACM,QAAX,CAAoBC,aAArB,EACGP,UAAU,CAACM,QAAX,CAAoBE,aADvB,EAEGR,UAAU,CAACM,QAAX,CAAoBG,aAFvB,EAGGT,UAAU,CAACM,QAAX,CAAoBI,aAHvB,CADL;AAMAb,UAAAA,QAAQ,GAAG,IAAIE,IAAI,CAACY,OAAT,CAAiB;AACxBC,YAAAA,KAAK,EAAEP,OADiB;AAExBQ,YAAAA,WAAW,EAAE,QAFW;AAGxBC,YAAAA,aAAa,EAAE,GAHS;AAIxBC,YAAAA,YAAY,EAAE,CAJU;AAKxBC,YAAAA,SAAS,EAAE,aALa;AAMxBC,YAAAA,WAAW,EAAE;AANW,WAAjB,CAAX;AAQH,SAjBD,EAFkB,CAoBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,QAAAA,QAAQ,CAACqB,MAAT,CAAgBpB,GAAhB;AACAL,QAAAA,oBAAoB,CAAC0B,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAActB,QAAd,CAAb,CAApB;AAEC,OAhCL;AAiCC;;AACD,WAAO;AAACuB,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAP;AAEP,GA3CD,CA2CE,OAAOA,KAAP,EAAc;AACZlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACH;AACJ,CAjDD;;GAAM/B,qB;;AAkDN,eAAeA,qBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMap = async (mapRef={}) => {\n\n\tconst [LoadStationObject, setLoadStationObject] = useState(\"\");\n    try {\n        let res = await Api.getAllCitys();\n        if (res !== null && mapRef.current !== null) {\n\n            var cityname;\n            const map = mapRef.current.map;\n            const maps = mapRef.current.maps;\n            res.map(cityCoords => {\n\n                cityCoords.charging_posts.map(loadStations => {\n                    console.log(loadStations)\n\n                    let polyGon = \n                        ([cityCoords.position.polygonePart1,\n                            cityCoords.position.polygonePart2,\n                            cityCoords.position.polygonePart3,\n                            cityCoords.position.polygonePart4\n                        ]);\n                    cityname = new maps.Polygon({\n                        paths: polyGon,\n                        strokeColor: \"yellow\",\n                        strokeOpacity: 0.9,\n                        strokeWeight: 2,\n                        fillColor: \"transparent\",\n                        fillOpacity: 0.35,\n                        });\n                })\n                // cityname.addListener('click', (event) => {\n                //     console.log(\"HEJ\", cityCoords)\n                //     setPopupInfo({\t\n                //         showBike: false,\n                //         showCity: true,\n                //         showLocation: false,\n                //         content: cityCoords\n                //     })\n                // });\n                cityname.setMap(map);\n                setLoadStationObject(oldArray => [...oldArray, cityname]);\n\n                })\n            }\n            return {location, error};\n\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport default useLoadStationsForMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}