{"ast":null,"code":"import { API_URL, defaultConfigPut } from \"./config\";\nconst Api = {\n  //EJ aktiv från backend\n  getAUser: async id => {\n    try {\n      const endpoint = `${API_URL}/customers/${id}`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getACity: async whatCity => {\n    console.log(whatCity);\n\n    try {\n      const endpoint = `${API_URL}/cities/${whatCity}`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllCitys: async () => {\n    try {\n      const endpoint = `${API_URL}/cities`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  getAllScooters: async () => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  updateAScooter: async (id, speed, battery, newPosition, logg) => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          speed: speed,\n          battery: battery // position: newPosition,\n          // logg: logg\n\n        })\n      })).json();\n      console.log(res);\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  // EJ Gjorde som den ska, bara dummy\n  // Samma med updateUserSubscription måste skapas\n  updateUserFunds: async (addToBalance, id) => {\n    try {\n      console.log(addToBalance, id);\n      const endpoint = `${API_URL}/customers/trip`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          balance: addToBalance\n        })\n      })).json();\n      console.log(res);\n\n      if (res.status === 200) {}\n\n      res = \"OK\";\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  // EJ klar väntar på backend. EJ Gjorde som den ska, bara dummy\n  updateUserSubsc: async (onepayment, userName) => {\n    try {\n      // const endpoint = `${API_URL}/??????????`;\n      // let res = await (\n      //     await fetch(endpoint, {\n      //         ...defaultConfigPut,\n      //         body: JSON.stringify({\n      //             _id: id,\n      //             speed: speed,\n      //             battery: battery\n      //             // position: newPosition,\n      //             // logg: logg\n      //         })\n      //         })).json();\n      let res = \"OK\";\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nexport default Api;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/api.js"],"names":["API_URL","defaultConfigPut","Api","getAUser","id","endpoint","res","fetch","json","error","console","log","getACity","whatCity","data","getAllCitys","getAllScooters","updateAScooter","speed","battery","newPosition","logg","body","JSON","stringify","_id","updateUserFunds","addToBalance","balance","status","updateUserSubsc","onepayment","userName"],"mappings":"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","sourcesContent":["\nimport { API_URL, defaultConfigPut } from \"./config\";\n\n\nconst Api =  {\n    //EJ aktiv från backend\n    getAUser: async(id) => {\n        try {\n            const endpoint = `${API_URL}/customers/${id}`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    getACity: async (whatCity) => {\n        console.log(whatCity)\n        try {\n            const endpoint = `${API_URL}/cities/${whatCity}`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllCitys: async () => {\n        try {\n            const endpoint = `${API_URL}/cities`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    getAllScooters: async () => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            console.log(error)\n        }\n\t},\n\n    updateAScooter: async (id, speed, battery, newPosition, logg) => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        speed: speed,\n                        battery: battery\n                        // position: newPosition,\n                        // logg: logg\n                    })\n                    })).json();\n            console.log(res)\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n\n    // EJ Gjorde som den ska, bara dummy\n    // Samma med updateUserSubscription måste skapas\n\n    updateUserFunds: async (addToBalance, id) => {\n        try {\n            console.log(addToBalance, id)\n            const endpoint = `${API_URL}/customers/trip`;\n            let res;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        balance: addToBalance,\n                    })\n                })).json();\n            console.log(res)\n            \n            if(res.status === 200) {\n                \n            }\n            res = \"OK\"\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n    // EJ klar väntar på backend. EJ Gjorde som den ska, bara dummy\n    updateUserSubsc: async (onepayment, userName) => {\n        try {\n            // const endpoint = `${API_URL}/??????????`;\n\n            // let res = await (\n            //     await fetch(endpoint, {\n            //         ...defaultConfigPut,\n            //         body: JSON.stringify({\n            //             _id: id,\n            //             speed: speed,\n            //             battery: battery\n            //             // position: newPosition,\n            //             // logg: logg\n            //         })\n            //         })).json();\n            let res = \"OK\"\n            return res\n        } catch (error) {\n            console.log((error))\n        }\n\t},\n}\n\nexport default Api\n"]},"metadata":{},"sourceType":"module"}