{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../Api';\nlet initalValue = {\n  showLoadStations: false,\n  loadStations: []\n};\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\n\nconst useDisplayPolyChargeStation = (mapRef, props) => {\n  _s();\n\n  const [loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n\n  const [loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n\n  const [loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n\n  /* loopar igenom res från db, tar ut alla koordinatera som\n     är laddstationer, skapar sedan ny polygon med dessa\n     och lägger på ett klickevent. Sparar obj i state\n     så att det senare kan tas bort\n  */\n\n  const handleSucces = res => {\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(cityCoords => {\n      cityCoords.charging_posts.forEach(loadStations => {\n        let polyGon = [loadStations.position.polygonePart1, loadStations.position.polygonePart2, loadStations.position.polygonePart3, loadStations.position.polygonePart4];\n        loadStationName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: loadStations.color,\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        loadStationName.addListener('click', () => {\n          setLoadStationContent(prevState => ({\n            showLoadStations: !prevState.showLoadStations,\n            loadStations\n          }));\n        });\n        loadStationName.setMap(map); // Kopierar tidigare state + lägger in nytt element sedan sätter state\n\n        var holdArr = loadStationObject;\n        holdArr.push(loadStationName);\n        setLoadStationObject(holdArr);\n      });\n    });\n  }; // funktion som kan toggla state, används från map\n\n\n  const showInfoForLoadStation = trueOrFalse => {\n    setLoadStationContent({\n      showLoadStations: trueOrFalse\n    });\n  }; // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n\n\n  function removeLoadingStationsFromMap() {\n    loadStationContent !== null && loadStationObject.forEach(loadStation => {\n      loadStation.setMap(null);\n    });\n  } //Om props ändras och vid mount, kollar om loadStation är false, om ta bort annars hämta data\n\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoadStationError(false);\n        setInterval(async () => {\n          let res = await Api.getAllCitys();\n          handleSucces(res);\n        }, 10000);\n      } catch (error) {\n        setLoadStationError(true);\n      }\n    };\n\n    !props.ifToShowLoadStations.loadStation ? removeLoadingStationsFromMap(mapRef) : getData();\n  }, [props.ifToShowLoadStations.loadStation]);\n  return {\n    loadStationObject,\n    loadStationContent,\n    loadStationError,\n    showInfoForLoadStation\n  };\n};\n\n_s(useDisplayPolyChargeStation, \"AVzT48Wg0hJquwML8FgwtjqT1z4=\");\n\nexport default useDisplayPolyChargeStation; // useEffect(()=>{\n//     getScooters()\n//     const interval=setInterval(()=>{\n//         getScooters()\n//      }, 10000)\n//      return()=>clearInterval(interval)\n// },[])","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyChargeStation.js"],"names":["useState","useEffect","Api","initalValue","showLoadStations","loadStations","useDisplayPolyChargeStation","mapRef","props","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","handleSucces","res","loadStationName","map","current","maps","forEach","cityCoords","charging_posts","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","showInfoForLoadStation","trueOrFalse","removeLoadingStationsFromMap","loadStation","getData","setInterval","getAllCitys","error","ifToShowLoadStations"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowLoadStations: false,\n\tloadStations: []\n}\n\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\nconst useDisplayPolyChargeStation = (mapRef, props) => {\n    const[loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n    const[loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n    const[loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n\n    /* loopar igenom res från db, tar ut alla koordinatera som\n       är laddstationer, skapar sedan ny polygon med dessa\n       och lägger på ett klickevent. Sparar obj i state\n       så att det senare kan tas bort\n    */\n    const handleSucces = (res) => {\n        var loadStationName;\n        const map = mapRef.current.map;\n        const maps = mapRef.current.maps;\n    \n        res.forEach(cityCoords => {\n            cityCoords.charging_posts.forEach(loadStations => {         \n                let polyGon = \n                    ([\n                        loadStations.position.polygonePart1,\n                        loadStations.position.polygonePart2,\n                        loadStations.position.polygonePart3,\n                        loadStations.position.polygonePart4,\n                    ]);\n                loadStationName = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: loadStations.color,\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                loadStationName.addListener('click', () => {\n                    setLoadStationContent(prevState => ({\n                        showLoadStations: !prevState.showLoadStations,\n                        loadStations\n                    }));\n                });\n            loadStationName.setMap(map);\n            // Kopierar tidigare state + lägger in nytt element sedan sätter state\n            var holdArr = loadStationObject;\n            holdArr.push(loadStationName);\n            setLoadStationObject(holdArr);\n            })\n\n        })\n    };\n\n    // funktion som kan toggla state, används från map\n    const showInfoForLoadStation = (trueOrFalse) => {\n        setLoadStationContent({ showLoadStations: trueOrFalse});\n\t}\n\n    // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n\tfunction removeLoadingStationsFromMap() {\n        loadStationContent !== null && loadStationObject.forEach(loadStation => {\n            loadStation.setMap(null);\n        })\n\t}\n\n    //Om props ändras och vid mount, kollar om loadStation är false, om ta bort annars hämta data\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                setLoadStationError(false)\n                setInterval( async ()=>{\n                    let res = await Api.getAllCitys();\n                    handleSucces(res)\n                }, 10000)\n            } catch (error) {\n                setLoadStationError(true)\n            }\n        }\n        !props.ifToShowLoadStations.loadStation ? removeLoadingStationsFromMap(mapRef) : getData()\n    }, [props.ifToShowLoadStations.loadStation])\n\n    \n    return {loadStationObject, loadStationContent, loadStationError, showInfoForLoadStation};\n};\nexport default useDisplayPolyChargeStation;\n\n// useEffect(()=>{\n//     getScooters()\n//     const interval=setInterval(()=>{\n//         getScooters()\n//      }, 10000)\n       \n//      return()=>clearInterval(interval)\n// },[])"]},"metadata":{},"sourceType":"module"}