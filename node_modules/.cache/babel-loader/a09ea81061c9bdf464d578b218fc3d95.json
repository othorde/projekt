{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  const [message, setMessage] = useState(\"\");\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n  */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.forEach(elem => {\n      setCharging_posts([elem]);\n    });\n  }\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 5000);\n  }, [message]);\n\n  async function updateAll() {\n    console.log(\"HEj\");\n  }\n\n  function getTime() {\n    let today = new Date();\n    let date = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    let dateTime = date + ' ' + time;\n    return {\n      time,\n      dateTime\n    };\n  }\n\n  function getEventString() {\n    let event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n    return event;\n  }\n\n  function calculateNewPosition() {\n    let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n    let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n    newPosition = {\n      lat: lat,\n      lng: lng\n    };\n  }\n  /* Kontrollera denna uträkningen */\n  // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n  // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor !== \"noValue\") {\n      let position = props.position;\n      let newPosition;\n      let movedBy = myContext.userHook.value.user;\n      let active_user = \"null\";\n      charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n\n      if (position !== null) {\n        let speed = \"0\";\n        let battery = \"100\";\n        let response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n        if (response && response.data) {\n          if (response.data.result === `Object: ${props.id} updated`) {\n            let resUpdateScooterUser = await Api.updateAScootersUser(props.id); //uppdaterar scooterns användare\n\n            if (resUpdateScooterUser.data.result === `Object: ${props.id} updated`) {\n              let responseLogg = await Api.updateAScootersLogg(props.id, active_user, event, props.position.lat, props.position.lng, time, newPosition.lat, newPosition.lng, time);\n\n              if (responseLogg === `Object: ${props.id} updated`) {\n                updateZones();\n                setMessage(\"Cykel förflyttad, logg uppdaterad\");\n              } else {\n                setMessage(\"Något gick fel\");\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"ssXEX09XlTxuSz3Dcw8Xe68iG88=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","message","setMessage","getLoadStationsForMovingBike","city","getACity","forEach","elem","setTimeout","updateAll","console","log","getTime","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","getEventString","event","id","position","lat","lng","newPosition","battery","movedBy","calculateNewPosition","polygonePart1","Math","random","polygonePart4","handleSubmit","userHook","value","user","active_user","filter","color","includes","speed","response","updateAScooter","data","result","resUpdateScooterUser","updateAScootersUser","responseLogg","updateAScootersLogg","updateZones","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n    const [message, setMessage] = useState(\"\")\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n    */\n\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.forEach(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 5000);\n    }, [message])\n\n    async function updateAll() {\n        console.log(\"HEj\")\n    }\n\n    function getTime() {\n        let today = new Date();\n        let date = today.getFullYear()+'-'+(today.getMonth())+'-'+today.getDate();\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        let dateTime = date+' '+time;\n\n        return {time, dateTime}\n    }\n\n    function getEventString() {\n\n        let event = `${dateTime} \\n \n        Moved(update)(bikeId:${props.id}) \n        from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n        New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n        Speed is now 0 and battery is charged from ${props.battery} to 100%.\n        Carried out by ${movedBy}.\n    `;\n\n    return event\n\n    }\n\n    function calculateNewPosition() {\n\n        let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n        let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n        newPosition = {lat: lat, lng: lng}\n\n    }\n\n\n    /* Kontrollera denna uträkningen */\n    // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n    // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n    \n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = async () => {\n        if (moveBikeToColor !== \"noValue\") {\n\n            let position = props.position;\n            let newPosition;\n            let movedBy = myContext.userHook.value.user;\n            let active_user = \"null\";\n\n\n\n            charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            if (position !== null) {\n               \n  \n                let speed = \"0\";\n                let battery = \"100\";\n                let response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n                if (response && response.data) {\n                    if(response.data.result === `Object: ${props.id} updated`) {\n                        let resUpdateScooterUser = await Api.updateAScootersUser(props.id);  //uppdaterar scooterns användare\n                        if(resUpdateScooterUser.data.result === `Object: ${props.id} updated`) {\n\n                            let responseLogg = await Api.updateAScootersLogg(\n                                props.id,\n                                active_user,\n                                event,\n                                props.position.lat,\n                                props.position.lng,\n                                time,\n                                newPosition.lat,\n                                newPosition.lng,\n                                time,\n                                );\n                            \n                                if(responseLogg === `Object: ${props.id} updated`) {\n                                    updateZones();\n                                    setMessage(\"Cykel förflyttad, logg uppdaterad\")\n                                } else {\n                                    setMessage(\"Något gick fel\")\n                                }\n                            }\n                    }\n                }\n            }   \n        }\n    }\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {message &&\n            \n                <p style={{color:\"red\"}}> {message} </p>\n            }\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}\n            value = {moveBikeToColor}\n            >\n            <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}