{"ast":null,"code":"import { API_URL } from \"./config\";\n/* Hämtar en användare */\n\nexport async function getAUser(id) {\n  try {\n    const endpoint = `${API_URL}/customers/${id}`;\n    let res = await (await fetch(endpoint)).json();\n    return res;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Hämtar alla användare  */\n\nexport async function getAllUsers() {\n  console.log(\"\");\n\n  try {\n    const endpoint = `${API_URL}/customers`;\n    let res = await (await fetch(endpoint)).json();\n    return res;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Hämtar en stad  */\n\nexport async function getACity(whatCity) {\n  try {\n    const endpoint = `${API_URL}/cities/${whatCity}`;\n    let res = await (await fetch(endpoint)).json();\n    return res.data;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Hämtar alla städer */\n\nexport async function getAllCitys() {\n  try {\n    const endpoint = `${API_URL}/cities`;\n    let res = await (await fetch(endpoint)).json();\n    return res.data;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Hämtar alla scootrar */\n\nexport async function getAllScooters() {\n  try {\n    const endpoint = `${API_URL}/scooter`;\n    let res = await (await fetch(endpoint)).json();\n    return res.data;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Hämtar alla laddstationer, retunerar antal cyklar som finns */\n\nexport async function getAllChargePost(city, matching) {\n  try {\n    const endpoint = `${API_URL}/cities/posts/${city}`;\n    let res = await (await fetch(endpoint)).json();\n    let result = false;\n\n    if (matching) {\n      res.data.forEach(element => {\n        if (element.color === matching) {\n          result = element.amount_of_bikes_post;\n        }\n      });\n      return result;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Loggar in användaren */\n\nexport async function logginUserViaGit(username) {\n  const defaultConfig = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/customers/login`;\n    let res = await (await fetch(endpoint, { ...defaultConfig,\n      body: JSON.stringify({\n        username: username\n      })\n    })).json();\n    return res;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar en scooter */\n\nexport async function updateAScooter(id, speed, battery, newPosition, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/scooter`;\n    let res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        _id: id,\n        speed: speed,\n        battery: battery,\n        lat: newPosition.lat,\n        lng: newPosition.lng\n      })\n    })).json();\n\n    if (res.data.result === `Object: ${id} updated`) {\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar en scooters användare */\n\nexport async function updateAScootersUser(id, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/scooter/setuser`;\n    let res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        _id: id\n      })\n    })).json();\n\n    if (res.data.result === `Object: ${id} updated`) {\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar scooterns logg */\n\nexport async function updateAScootersLogg(varForUpdate, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/scooter/insertLogg`;\n    let res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        _id: varForUpdate.id,\n        active_user: varForUpdate.active_user,\n        event: varForUpdate.event,\n        start_lat: varForUpdate.start_lat,\n        start_lng: varForUpdate.start_lng,\n        start_time: varForUpdate.time,\n        end_lat: varForUpdate.end_lat,\n        end_lng: varForUpdate.end_lng,\n        end_time: varForUpdate.time\n      })\n    })).json();\n\n    if (res.data.result === `Object: ${varForUpdate.id} updated`) {\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar användarens kontobalans */\n\nexport async function updateUserFunds(addToBalance, id, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/customers/balance`;\n    let res;\n    res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        _id: id,\n        balance: addToBalance\n      })\n    })).json();\n\n    if (res.data.result === `Object: ${id} updated`) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar antalet cyklar i chargepost */\n\nexport async function updateNrBikesChargePost(city, amount_of_bikes, color, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/cities/posts/update`;\n    let res;\n    res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        city: city,\n        amount_of_bikes: amount_of_bikes,\n        color: color\n      })\n    })).json();\n\n    if (res.data.result === `City post: ${city} updated`) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n;\n/* Uppdaterar antalet cyklar i parkzone */\n\nexport async function updateNrBikesParkZone(city, amount_of_bikes, color, token) {\n  const defaultConfigPut = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'x-access-token': token\n    }\n  };\n\n  try {\n    const endpoint = `${API_URL}/cities/zones/update`;\n    let res;\n    res = await (await fetch(endpoint, { ...defaultConfigPut,\n      body: JSON.stringify({\n        city: city,\n        amount_of_bikes: amount_of_bikes,\n        color: color\n      })\n    })).json();\n\n    if (res.data.result === `City zone: ${city} updated`) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Api.js"],"names":["API_URL","getAUser","id","endpoint","res","fetch","json","error","getAllUsers","console","log","getACity","whatCity","data","getAllCitys","getAllScooters","getAllChargePost","city","matching","result","forEach","element","color","amount_of_bikes_post","logginUserViaGit","username","defaultConfig","method","headers","body","JSON","stringify","updateAScooter","speed","battery","newPosition","token","defaultConfigPut","_id","lat","lng","updateAScootersUser","updateAScootersLogg","varForUpdate","active_user","event","start_lat","start_lng","start_time","time","end_lat","end_lng","end_time","updateUserFunds","addToBalance","balance","updateNrBikesChargePost","amount_of_bikes","updateNrBikesParkZone"],"mappings":"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","sourcesContent":["\nimport { API_URL } from \"./config\";\n\n/* Hämtar en användare */\nexport async function getAUser(id) {\n    try {\n        const endpoint = `${API_URL}/customers/${id}`;\n        let res = await (await fetch(endpoint)).json();\n        return res\n    } catch (error) {\n        return false\n    }\n};\n\n/* Hämtar alla användare  */\nexport async function getAllUsers() {\n    console.log(\"\")\n    try {\n        const endpoint = `${API_URL}/customers`;\n        let res = await (await fetch(endpoint)).json();\n        return res\n    } catch (error) {\n        return false\n    }\n};\n\n/* Hämtar en stad  */\nexport async function getACity(whatCity) {\n    try {\n        const endpoint = `${API_URL}/cities/${whatCity}`;\n        let res = await (await fetch(endpoint)).json();\n        return res.data\n    } catch (error) {\n        return false\n    }\n};\n\n/* Hämtar alla städer */\nexport async function getAllCitys() {\n    try {\n        const endpoint = `${API_URL}/cities`;\n        let res = await (await fetch(endpoint)).json();\n        return res.data\n    } catch (error) {\n        return false\n    }\n};\n\n/* Hämtar alla scootrar */\nexport async function getAllScooters() {\n    try {\n        const endpoint = `${API_URL}/scooter`;\n        let res = await (await fetch(endpoint)).json();\n        return res.data\n    } catch (error) {\n        return false\n    }\n};\n\n/* Hämtar alla laddstationer, retunerar antal cyklar som finns */\nexport async function getAllChargePost(city, matching) {\n    try {\n        const endpoint = `${API_URL}/cities/posts/${city}`;\n        let res = await (await fetch(endpoint)).json();\n        let result = false;\n        if(matching) {\n            res.data.forEach(element => {\n                if (element.color === matching) {\n                    result = element.amount_of_bikes_post\n                }\n            });\n            return result\n        }\n    } catch (error) {\n        return false\n    }\n};\n\n/* Loggar in användaren */\nexport async function logginUserViaGit(username) {\n\n    const defaultConfig = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n        },\n    };\n\n    try {\n        const endpoint = `${API_URL}/customers/login`\n        let res = await (\n            await fetch(endpoint, {\n                ...defaultConfig,\n                body: JSON.stringify({username: username} )\n            })\n            ).json();\n        return res\n\n    } catch (error) {\n        return false\n    }\n};\n\n/* Uppdaterar en scooter */\nexport async function updateAScooter(id, speed, battery, newPosition, token) {\n\n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n\n    try {\n        const endpoint = `${API_URL}/scooter`;\n\n        let res = await (\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    _id: id,\n                    speed: speed,\n                    battery: battery,\n                    lat: newPosition.lat,\n                    lng: newPosition.lng,\n                })\n                })).json();\n        if(res.data.result === `Object: ${id} updated`) {\n            return true\n        }\n        return false      \n    } catch (error) {\n        return false      \n    }\n};\n\n/* Uppdaterar en scooters användare */\nexport async function updateAScootersUser(id, token) {\n\n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n\n    try {\n        const endpoint = `${API_URL}/scooter/setuser`;\n\n        let res = await (\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    _id: id,\n                })\n            })).json();\n        if(res.data.result === `Object: ${id} updated`) {\n            return true\n        }\n        return false      \n    } catch (error) {\n        return false      \n    }\n};\n\n/* Uppdaterar scooterns logg */\nexport async function updateAScootersLogg(varForUpdate, token) {\n\n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n\n    try {\n        const endpoint = `${API_URL}/scooter/insertLogg`;\n        let res = await (\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    _id: varForUpdate.id,\n                    active_user: varForUpdate.active_user,\n                    event: varForUpdate.event,\n                    start_lat: varForUpdate.start_lat,\n                    start_lng: varForUpdate.start_lng,\n                    start_time: varForUpdate.time,\n                    end_lat: varForUpdate.end_lat,\n                    end_lng: varForUpdate.end_lng,\n                    end_time: varForUpdate.time,\n                })\n            })).json();\n\n        if(res.data.result === `Object: ${varForUpdate.id} updated`) {\n            return true\n        }\n        return false\n    } catch (error) {\n        return false      \n    }\n};\n\n/* Uppdaterar användarens kontobalans */\nexport async function updateUserFunds(addToBalance, id, token) {\n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n\n    try {\n        const endpoint = `${API_URL}/customers/balance`;\n        let res;\n        res = await (\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    _id: id,\n                    balance: addToBalance,\n                })\n            })).json();\n        \n        if(res.data.result === `Object: ${id} updated`) {\n            return true\n        } else {\n            return false\n        }\n    } catch (error) {\n        return false\n    }\n};\n\n/* Uppdaterar antalet cyklar i chargepost */\nexport async function updateNrBikesChargePost(city, amount_of_bikes, color, token){\n    \n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n\n    try {\n        const endpoint = `${API_URL}/cities/posts/update`;\n        let res;\n        res = await(\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    city: city,\n                    amount_of_bikes: amount_of_bikes,\n                    color: color\n                })\n            })).json();\n\n        if(res.data.result === `City post: ${city} updated`) {\n            return true\n        } else {\n            return false\n        }\n    } catch (error) {\n        return false\n    }\n};\n\n/* Uppdaterar antalet cyklar i parkzone */\nexport async function  updateNrBikesParkZone(city, amount_of_bikes, color, token) {\n\n    const defaultConfigPut = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            'x-access-token': token\n        }\n    }\n    \n    try {\n        const endpoint = `${API_URL}/cities/zones/update`;\n        let res;\n        res = await(\n            await fetch(endpoint, {\n                ...defaultConfigPut,\n                body: JSON.stringify({\n                    city: city,\n                    amount_of_bikes: amount_of_bikes,\n                    color: color\n                })\n            })).json();\n        \n        if(res.data.result === `City zone: ${city} updated`) {\n            return true\n        } else {\n            return false\n        }\n    } catch (error) {\n        return false\n    }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}