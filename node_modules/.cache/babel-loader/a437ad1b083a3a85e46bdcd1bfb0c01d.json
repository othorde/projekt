{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";/* Används av movebike samt history */ /* Loopar igenom alla allÅarkeringszones och kollar coords finns i array\n   Gör en array och skickar in till checkIfPointInPolygon för att se om \n   coords finns i polyGon som skickas med. Retunerar zone, som endast är true\n   om coord finns i polygon som är parkeringszon\n*/export function checkIfCoordInParkingZone(coords,allParkingZones){var res;var zone={returned:false,color:\"\",amount_of_bikes_zone:\"\"};var _iterator=_createForOfIteratorHelper(allParkingZones),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var elem=_step.value;var polyGon=[[elem.position.polygonePart1.lat,elem.position.polygonePart1.lng],[elem.position.polygonePart2.lat,elem.position.polygonePart2.lng],[elem.position.polygonePart3.lat,elem.position.polygonePart3.lng],[elem.position.polygonePart4.lat,elem.position.polygonePart4.lng]];res=checkIfPointInPolyGon(coords,polyGon);// ändra bara zone om res är true\nif(res===true){zone={returned:true,color:elem.color,amount_of_bikes_zone:elem.amount_of_bikes_zone};}else{continue;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return zone;}/*  Gör samma som ovan fast loopar chargingposts */export function checkIfCoordInChargingPost(coords,allCharging_posts){var res;var zone={returned:false,color:\"\",amount_of_bikes_post:\"\"};var _iterator2=_createForOfIteratorHelper(allCharging_posts),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var elem=_step2.value;var polyGon=[[elem.position.polygonePart1.lat,elem.position.polygonePart1.lng],[elem.position.polygonePart2.lat,elem.position.polygonePart2.lng],[elem.position.polygonePart3.lat,elem.position.polygonePart3.lng],[elem.position.polygonePart4.lat,elem.position.polygonePart4.lng]];res=checkIfPointInPolyGon(coords,polyGon);// ändra bara zone om res är true\nif(res===true){zone={returned:true,color:elem.color,amount_of_bikes_post:elem.amount_of_bikes_post};}else{continue;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return zone;}/* Retunerar true/false om punkt finns i polygon */export function checkIfPointInPolyGon(point,polygone){var pointInPolygon=require('point-in-polygon');return pointInPolygon(point,polygone);}","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/helperfunction/helpers.js"],"names":["checkIfCoordInParkingZone","coords","allParkingZones","res","zone","returned","color","amount_of_bikes_zone","elem","polyGon","position","polygonePart1","lat","lng","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","checkIfCoordInChargingPost","allCharging_posts","amount_of_bikes_post","point","polygone","pointInPolygon","require"],"mappings":"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","sourcesContent":["\n/* Används av movebike samt history */\n/* Loopar igenom alla allÅarkeringszones och kollar coords finns i array\n   Gör en array och skickar in till checkIfPointInPolygon för att se om \n   coords finns i polyGon som skickas med. Retunerar zone, som endast är true\n   om coord finns i polygon som är parkeringszon\n*/\nexport function checkIfCoordInParkingZone(coords, allParkingZones) {\n\n    let res;\n    let zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_zone: \"\"\n    };\n\n    for (var elem of allParkingZones) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n        res = checkIfPointInPolyGon(coords, polyGon);\n\n        // ändra bara zone om res är true\n        if(res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_zone: elem.amount_of_bikes_zone\n            }\n        } else {\n            continue\n        }\n    }\n    return zone\n}\n\n /*  Gör samma som ovan fast loopar chargingposts */\nexport function checkIfCoordInChargingPost(coords, allCharging_posts) {\n\n    let res;\n    let zone = {\n        returned: false,\n        color: \"\",\n        amount_of_bikes_post: \"\"\n    };\n\n    for (var elem of allCharging_posts) {\n        let polyGon = [\n            [elem.position.polygonePart1.lat,\n            elem.position.polygonePart1.lng],\n            [elem.position.polygonePart2.lat,\n            elem.position.polygonePart2.lng],\n            [elem.position.polygonePart3.lat,\n            elem.position.polygonePart3.lng],\n            [elem.position.polygonePart4.lat,\n            elem.position.polygonePart4.lng]\n        ]\n\n        res = checkIfPointInPolyGon(coords, polyGon);\n        // ändra bara zone om res är true\n        if (res === true) {\n            zone = {\n                returned: true,\n                color: elem.color,\n                amount_of_bikes_post: elem.amount_of_bikes_post\n            }\n        } else {\n            continue\n        }\n    }\n    return zone;\n\n}\n\n/* Retunerar true/false om punkt finns i polygon */\nexport function checkIfPointInPolyGon(point, polygone) {\n    var pointInPolygon = require('point-in-polygon');\n    return pointInPolygon(point, polygone);\n}"]},"metadata":{},"sourceType":"module"}