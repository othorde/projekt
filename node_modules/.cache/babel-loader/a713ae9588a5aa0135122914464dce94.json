{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nexport const useFetchAllCities = () => {\n  _s();\n\n  const [cities, setCities] = useState();\n  const [loadingCities, setLoadingCities] = useState();\n  const [messageCities, setMessageCities] = useState();\n\n  const fetchData = async () => {\n    let data;\n\n    try {\n      setLoadingCities(true);\n      const allCities = await Api.getAllCitys();\n\n      if (allCities.length > 0) {\n        setCities(allCities);\n      } else {\n        setMessageCities(\"Städerna kunde ej läsas in\");\n      }\n    } catch (error) {\n      setMessageCities(\"Något gick fel med hämtningen från servern\");\n    }\n\n    setLoadingCities(false);\n  };\n  /* Kör funktionen  */\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    cities,\n    loadingCities,\n    messageCities\n  };\n}; // /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n// }, [user, state, loading, error, message])\n\n_s(useFetchAllCities, \"jlGbhCpbhCAi+5RQLYOQ1kO0Opg=\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useFetchAllCities.js"],"names":["useState","useEffect","Api","useFetchAllCities","cities","setCities","loadingCities","setLoadingCities","messageCities","setMessageCities","fetchData","data","allCities","getAllCitys","length","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAGA,OAAO,MAAOC,iBAAiB,GAAG,MAAM;AAAA;;AAEvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,EAApC;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,EAAlD;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,EAAlD;;AAEA,QAAMU,SAAS,GAAG,YAAY;AACvB,QAAIC,IAAJ;;AACA,QAAI;AACAJ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,YAAMK,SAAS,GAAG,MAAMV,GAAG,CAACW,WAAJ,EAAxB;;AAEA,UAAGD,SAAS,CAACE,MAAV,GAAmB,CAAtB,EAAyB;AACrBT,QAAAA,SAAS,CAACO,SAAD,CAAT;AACH,OAFD,MAEO;AACHH,QAAAA,gBAAgB,CAAC,4BAAD,CAAhB;AACH;AAEJ,KAVD,CAUE,OAAOM,KAAP,EAAc;AACZN,MAAAA,gBAAgB,CAAC,4CAAD,CAAhB;AACH;;AACDF,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAhBJ;AAkBA;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACN,IAAAA,MAAD;AAASE,IAAAA,aAAT;AAAwBE,IAAAA;AAAxB,GAAP;AACA,CA9BM,C,CAuCP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;GApDcL,iB","sourcesContent":["import {useState, useEffect } from 'react'\nimport Api from '../api';\n\n\nexport const  useFetchAllCities = () => {\n\n\tconst [cities, setCities] = useState();\n\tconst [loadingCities, setLoadingCities] = useState();\n\tconst [messageCities, setMessageCities] = useState();\n\n\tconst fetchData = async () => {\n        let data;\n        try {\n            setLoadingCities(true)\n            const allCities = await Api.getAllCitys()\n\n            if(allCities.length > 0) {\n                setCities(allCities)\n            } else {\n                setMessageCities(\"Städerna kunde ej läsas in\")\n            }\n            \n        } catch (error) {\n            setMessageCities(\"Något gick fel med hämtningen från servern\")\n        }\n        setLoadingCities(false)\n    }\n    \n\t/* Kör funktionen  */\n\tuseEffect(() => {\n\t\tfetchData()\n\t}, [])\n\n\treturn {cities, loadingCities, messageCities}\n}\n\n\n\n\n\n\n\n\n// /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n\n// }, [user, state, loading, error, message])"]},"metadata":{},"sourceType":"module"}