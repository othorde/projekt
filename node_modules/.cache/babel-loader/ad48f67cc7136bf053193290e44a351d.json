{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../Api';\nlet initalValue = {\n  showLoadStations: false,\n  loadStations: []\n};\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\n\nconst useDisplayPolyChargeStation = (mapRef, _ref) => {\n  _s();\n\n  let {\n    ifToShowLoadStations\n  } = _ref;\n  const [loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n\n  const [loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n\n  const [loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n  // funktion som kan toggla state, används från map\n\n  const showInfoForLoadStation = trueOrFalse => {\n    setLoadStationContent({\n      showLoadStations: trueOrFalse\n    });\n  }; // Om props ändras samt vid mount.\n  // Är props true hämta data. Om false ta bort från karta\n\n\n  useEffect(() => {\n    // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n    // Sker endast om ifToShowLoadStations.loadStation är false i tennaryoperator nedan i useEffect\n    function removeLoadingStationsFromMap() {\n      loadStationContent !== null && loadStationObject.forEach(loadStation => {\n        loadStation.setMap(null);\n      });\n    }\n\n    const getData = async () => {\n      try {\n        setLoadStationError(false);\n        let res = await Api.getAllCitys();\n        handleSucces(res);\n      } catch (error) {\n        setLoadStationError(true);\n      }\n    }; // Hämta data endast vid if\n\n\n    if (ifToShowLoadStations.loadStation) {\n      getData();\n      const interval = setInterval(() => {\n        getData();\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n\n    ifToShowLoadStations.loadStation === false && removeLoadingStationsFromMap();\n  }, [ifToShowLoadStations.loadStation]);\n  return {\n    loadStationObject,\n    loadStationContent,\n    loadStationError,\n    showInfoForLoadStation\n  };\n};\n\n_s(useDisplayPolyChargeStation, \"AVzT48Wg0hJquwML8FgwtjqT1z4=\");\n\nexport default useDisplayPolyChargeStation;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyChargeStation.js"],"names":["useState","useEffect","Api","initalValue","showLoadStations","loadStations","useDisplayPolyChargeStation","mapRef","ifToShowLoadStations","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","showInfoForLoadStation","trueOrFalse","removeLoadingStationsFromMap","forEach","loadStation","setMap","getData","res","getAllCitys","handleSucces","error","interval","setInterval","clearInterval"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,IAAIC,WAAW,GAAG;AACjBC,EAAAA,gBAAgB,EAAE,KADD;AAEjBC,EAAAA,YAAY,EAAE;AAFG,CAAlB;AAKA;AACA;AACA;AACA;;AACA,MAAMC,2BAA2B,GAAG,CAACC,MAAD,WAAoC;AAAA;;AAAA,MAA3B;AAACC,IAAAA;AAAD,GAA2B;AACpE,QAAK,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC,EAAD,CAAzD,CADoE,CACL;;AAC/D,QAAK,CAACW,kBAAD,EAAqBC,qBAArB,IAA8CZ,QAAQ,CAACG,WAAD,CAA3D,CAFoE,CAEM;;AAC1E,QAAK,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,KAAD,CAAvD,CAHoE,CAGJ;AAGhE;;AACA,QAAMe,sBAAsB,GAAIC,WAAD,IAAiB;AAC5CJ,IAAAA,qBAAqB,CAAC;AAAER,MAAAA,gBAAgB,EAAEY;AAApB,KAAD,CAArB;AACN,GAFE,CAPoE,CAiBpE;AACA;;;AACAf,EAAAA,SAAS,CAAC,MAAI;AAEV;AACA;AACA,aAASgB,4BAAT,GAAwC;AACpCN,MAAAA,kBAAkB,KAAK,IAAvB,IAA+BF,iBAAiB,CAACS,OAAlB,CAA0BC,WAAW,IAAI;AACpEA,QAAAA,WAAW,CAACC,MAAZ,CAAmB,IAAnB;AACH,OAF8B,CAA/B;AAGH;;AAED,UAAMC,OAAO,GAAG,YAAY;AACxB,UAAI;AACAP,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,YAAIQ,GAAG,GAAG,MAAMpB,GAAG,CAACqB,WAAJ,EAAhB;AACAC,QAAAA,YAAY,CAACF,GAAD,CAAZ;AACH,OAJD,CAIE,OAAOG,KAAP,EAAc;AACZX,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH;AACJ,KARD,CAVU,CAmBV;;;AACA,QAAGN,oBAAoB,CAACW,WAAxB,EAAqC;AACjCE,MAAAA,OAAO;AACP,YAAMK,QAAQ,GAACC,WAAW,CAAC,MAAI;AAC3BN,QAAAA,OAAO;AACV,OAFyB,EAEvB,KAFuB,CAA1B;AAGA,aAAM,MAAIO,aAAa,CAACF,QAAD,CAAvB;AACH;;AACDlB,IAAAA,oBAAoB,CAACW,WAArB,KAAqC,KAArC,IAA8CF,4BAA4B,EAA1E;AAGH,GA9BQ,EA8BP,CAACT,oBAAoB,CAACW,WAAtB,CA9BO,CAAT;AAgCA,SAAO;AAACV,IAAAA,iBAAD;AAAoBE,IAAAA,kBAApB;AAAwCE,IAAAA,gBAAxC;AAA0DE,IAAAA;AAA1D,GAAP;AACH,CApDD;;GAAMT,2B;;AAqDN,eAAeA,2BAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowLoadStations: false,\n\tloadStations: []\n}\n\n/* useDisplayPolyChargeStation sätter polygons(laddstationer) på kartan\n   genom att hämta från db och sen skriva ut. mapRef är kartan. Tar mot props om \n   den ska tas bort från kartan/läggas till.\n*/\nconst useDisplayPolyChargeStation = (mapRef, {ifToShowLoadStations}) => {\n    const[loadStationObject, setLoadStationObject] = useState([]); // sparar objektet i state så att man kan ta bort det från kartan\n    const[loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n    const[loadStationError, setLoadStationError] = useState(false); // håller content för onClick\n\n\n    // funktion som kan toggla state, används från map\n    const showInfoForLoadStation = (trueOrFalse) => {\n        setLoadStationContent({ showLoadStations: trueOrFalse});\n\t}\n\n\n\n\n\n\n\n    // Om props ändras samt vid mount.\n    // Är props true hämta data. Om false ta bort från karta\n    useEffect(()=>{\n\n        // tar bort loadinstations från kartan genom att sätta mapobj som är sparat i state till null.\n        // Sker endast om ifToShowLoadStations.loadStation är false i tennaryoperator nedan i useEffect\n        function removeLoadingStationsFromMap() {\n            loadStationContent !== null && loadStationObject.forEach(loadStation => {\n                loadStation.setMap(null);\n            })\n        }\n\n        const getData = async () => {\n            try {\n                setLoadStationError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res)\n            } catch (error) {\n                setLoadStationError(true)\n            }\n        }\n        // Hämta data endast vid if\n        if(ifToShowLoadStations.loadStation) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowLoadStations.loadStation === false && removeLoadingStationsFromMap()\n\n\n    },[ifToShowLoadStations.loadStation])\n\n    return {loadStationObject, loadStationContent, loadStationError, showInfoForLoadStation};\n}\nexport default useDisplayPolyChargeStation;\n\n"]},"metadata":{},"sourceType":"module"}