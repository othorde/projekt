{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMaps = async mapRef => {\n  _s();\n\n  const [loadStationObject, setLoadStationObject] = useState(\"\");\n  const [loadStationContent, setLoadStationContent] = useState(\"\");\n  const [loadStationError, setLoadStationError] = useState(\"\");\n  console.log(mapRef, \"häär\");\n  console.log(mapRef.current, \"häärsss\");\n  let res;\n  useEffect(async () => {\n    let res = await Api.getAllCitys();\n    getCitys(res);\n  }, [mapRef.current]);\n\n  const getCitys = res => {\n    console.log(\"HEj\"); // var loadStationName;\n    // const map = mapRef.current.map;\n    // const maps = mapRef.current.maps;\n    // res.map(cityCoords => {\n    //     cityCoords.charging_posts.map(loadStations => {            \n    //         let polyGon = \n    //             ([cityCoords.position.polygonePart1,\n    //                 cityCoords.position.polygonePart2,\n    //                 cityCoords.position.polygonePart3,\n    //                 cityCoords.position.polygonePart4\n    //             ]);\n    //         loadStationName = new maps.Polygon({\n    //             paths: polyGon,\n    //             strokeColor: \"yellow\",\n    //             strokeOpacity: 0.9,\n    //             strokeWeight: 2,\n    //             fillColor: \"transparent\",\n    //             fillOpacity: 0.35,\n    //             });\n    //     loadStationName.addListener('click', (event) => {\n    //         //setLoadStationContent({loadStations});\n    //     });\n    //     loadStationName.setMap(map);\n    //     setLoadStationObject(loadStationName);\n    //     })\n    // })\n\n    console.log(res);\n    return res;\n  };\n};\n\n_s(useLoadStationsForMaps, \"udObpKJhI+XRjXTIhCMfaJTzBUA=\");\n\nexport default useLoadStationsForMaps; //     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n//     return {location, error};\n// };","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/currentMarkerPosition.js"],"names":["useState","useEffect","Api","useLoadStationsForMaps","mapRef","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","loadStationError","setLoadStationError","console","log","current","res","getAllCitys","getCitys"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,MAAP,IAAmB;AAAA;;AACjD,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,EAAD,CAAxD;AACGW,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAAoB,MAApB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACS,OAAnB,EAA4B,SAA5B;AAEA,MAAIC,GAAJ;AACAb,EAAAA,SAAS,CAAC,YAAa;AACnB,QAAIa,GAAG,GAAG,MAAMZ,GAAG,CAACa,WAAJ,EAAhB;AACAC,IAAAA,QAAQ,CAACF,GAAD,CAAR;AACH,GAHQ,EAGP,CAACV,MAAM,CAACS,OAAR,CAHO,CAAT;;AAMA,QAAMG,QAAQ,GAAIF,GAAD,IAAS;AAEtBH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAFsB,CAGtB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,WAAOA,GAAP;AACH,GAjCD;AAqCH,CAnDD;;GAAMX,sB;;AAoDN,eAAeA,sBAAf,C,CAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nconst useLoadStationsForMaps = async (mapRef)  => {\n\tconst [loadStationObject, setLoadStationObject] = useState(\"\");\n\tconst [loadStationContent, setLoadStationContent] = useState(\"\");\n\tconst [loadStationError, setLoadStationError] = useState(\"\");\n    console.log(mapRef, \"häär\")\n    console.log(mapRef.current, \"häärsss\")\n\n    let res;\n    useEffect(async () =>  {\n        let res = await Api.getAllCitys();\n        getCitys(res)\n    },[mapRef.current]);\n\n\n    const getCitys = (res) => {\n\n        console.log(\"HEj\")\n        // var loadStationName;\n        // const map = mapRef.current.map;\n        // const maps = mapRef.current.maps;\n\n        // res.map(cityCoords => {\n        //     cityCoords.charging_posts.map(loadStations => {            \n        //         let polyGon = \n        //             ([cityCoords.position.polygonePart1,\n        //                 cityCoords.position.polygonePart2,\n        //                 cityCoords.position.polygonePart3,\n        //                 cityCoords.position.polygonePart4\n        //             ]);\n        //         loadStationName = new maps.Polygon({\n        //             paths: polyGon,\n        //             strokeColor: \"yellow\",\n        //             strokeOpacity: 0.9,\n        //             strokeWeight: 2,\n        //             fillColor: \"transparent\",\n        //             fillOpacity: 0.35,\n        //             });\n            \n        //     loadStationName.addListener('click', (event) => {\n        //         //setLoadStationContent({loadStations});\n        //     });\n        //     loadStationName.setMap(map);\n        //     setLoadStationObject(loadStationName);\n        //     })\n        // })\n        console.log(res)\n        return res\n    }\n\n    \n\n};\nexport default useLoadStationsForMaps;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const[location, setLocation] = useState(\"\");\n//     const [error, setError] = useState();\n//     const handleSucces = (pos) => {\n//         const {latitude, longitude } = pos.coords;\n\n//         setLocation({\n//             latitude,\n//             longitude\n//         });\n//     };\n\n//     const handleError = (error) => {\n//         setError(error.message);\n//     };\n\n//     useEffect(() => {\n//         const {geolocation} = navigator;\n\n//         if (!geolocation) {\n//             setError(\"Geolocation not supported\")\n//             return;\n//         }\n//         geolocation.getCurrentPosition(handleSucces, handleError, options)\n//     },[options])\n\n//     return {location, error};\n// };\n"]},"metadata":{},"sourceType":"module"}