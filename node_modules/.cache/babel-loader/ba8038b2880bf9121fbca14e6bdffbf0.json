{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\";\nimport Api from \"../../api\"; //styles & img\n\nimport { Style } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\nexport default function MapContainer(props) {\n  _s();\n\n  //hooks\n  const mapRef = useRef();\n  const {\n    loadStationContent,\n    err1\n  } = useLoadStationsToMap(mapRef, props);\n  const {\n    cityContent,\n    errorForCity\n  } = useCityToMap(mapRef, props);\n  const {\n    location,\n    err\n  } = useCurrentLocation(options);\n  const [markerInfo, setMarkerInfo] = useState([]);\n  const [PopupInfo, setPopupInfo] = useState([]); ///Variabel\n\n  const loadScooters = props.ifToShowScooter;\n  console.log(loadScooters);\n  var ScooterArray = props.ifToShowScooter.content; // bikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 35\n    }, this);\n  };\n\n  useEffect(() => {\n    if (cityContent.showCity == true) {\n      setPopupInfo({\n        showCity: cityContent.showCity,\n        showScooter: false,\n        showLoadStation: false,\n        showAccLocation: false,\n        content: cityContent.city\n      });\n    }\n  }, [cityContent.showCity]);\n  useEffect(() => {\n    if (markerInfo.showScooter == true) {\n      setPopupInfo({\n        showCity: false,\n        showScooter: markerInfo.showScooter,\n        showLoadStation: false,\n        showAccLocation: false,\n        content: markerInfo.scooter\n      });\n    }\n  }, [markerInfo.showScooter]);\n  return /*#__PURE__*/_jsxDEV(Style, {\n    children: [location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      defaultZoom: 10,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: _ref2 => {\n        let {\n          map,\n          maps\n        } = _ref2;\n        mapRef.current = {\n          map,\n          maps\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        lat: location.latitude,\n        lng: location.longitude,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"crime-marker\",\n            src: personimg,\n            alt: \"person\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this), loadScooters.loadScooters ? ScooterArray.map(scooter => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: scooter.position.lat,\n          lng: scooter.position.lng,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setMarkerInfo({\n              scooter,\n              showScooter: true\n            }),\n            className: \"crime-marker\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"scooter\",\n              src: bikeimg,\n              alt: \"scooter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 6\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 6\n          }, this)\n        }, scooter._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 5\n        }, this);\n      }) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), markerInfo || cityContent || loadStationContent ? /*#__PURE__*/_jsxDEV(PopUp, {\n      PopupInfo: PopupInfo\n    }, \"popupkey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"INXgsv6fV5pxNtweZdnu8SaVO8w=\", false, function () {\n  return [useLoadStationsToMap, useCityToMap, useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","useLoadStationsToMap","useCityToMap","PopUp","LoadCitys","Api","Style","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","MapContainer","props","mapRef","loadStationContent","err1","cityContent","errorForCity","location","err","markerInfo","setMarkerInfo","PopupInfo","setPopupInfo","loadScooters","ifToShowScooter","console","log","ScooterArray","content","Marker","children","showCity","showScooter","showLoadStation","showAccLocation","city","scooter","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","map","maps","current","position","_id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\n\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\"\nimport Api from \"../../api\";\n//styles & img\nimport {Style} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n\nexport default function MapContainer(props) {\n\t//hooks\n\tconst mapRef = useRef();\n\tconst { loadStationContent, err1 } = useLoadStationsToMap(mapRef, props);\n\tconst { cityContent, errorForCity } = useCityToMap(mapRef, props);\n\n\tconst { location, err } = useCurrentLocation(options);\n\tconst [markerInfo, setMarkerInfo] = useState([]);\n\tconst [PopupInfo, setPopupInfo] = useState([]);\n\n\t///Variabel\n\tconst loadScooters = props.ifToShowScooter;\n\tconsole.log(loadScooters)\n\n\tvar ScooterArray = props.ifToShowScooter.content;\n\t// bikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\tuseEffect(() => {\n\t\tif (cityContent.showCity == true) {\n\t\t\tsetPopupInfo({\n\t\t\t\tshowCity: cityContent.showCity,\n\t\t\t\tshowScooter: false,\n\t\t\t\tshowLoadStation: false,\n\t\t\t\tshowAccLocation: false,\n\t\t\t\tcontent: cityContent.city\n\t\t\t})\n\t\t}\n\t},[cityContent.showCity])\n\n\tuseEffect(() => {\n\t\tif (markerInfo.showScooter == true) {\n\t\t\tsetPopupInfo({\n\t\t\t\tshowCity: false,\n\t\t\t\tshowScooter: markerInfo.showScooter,\n\t\t\t\tshowLoadStation: false,\n\t\t\t\tshowAccLocation: false,\n\t\t\t\tcontent: markerInfo.scooter\n\t\t\t})\n\t\t}\n\t},[markerInfo.showScooter])\n\n\treturn (\n\t\t<Style>\n\t\t\t{/* \t\tKARTA\t\t */}\n\t\t\t{location ? (\n\t\t\t<GoogleMapReact \n\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\tdefaultZoom={10}\n\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/* \t\t1 Person \t\t*/}\n\t\t\t\t<Marker \n\t\t\t\t\tkey={1} \n\t\t\t\t\tlat={location.latitude} \n\t\t\t\t\tlng={location.longitude}\n\t\t\t\t\t>\n\t\t\t\t\t<div >\n\t\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t\t</div>\t\n\t\t\t\t</Marker>\n\t\t\t\t{/* \t\tAlla cyklar\t\t */}\n\t\t\t\t{loadScooters.loadScooters ? (\n\t\t\t\tScooterArray.map(scooter => {\n\t\t\t\treturn (\n\t\t\t\t<Marker \n\t\t\t\t\tkey={scooter._id} \n\t\t\t\t\tlat={scooter.position.lat} \n\t\t\t\t\tlng={scooter.position.lng}\n\t\t\t\t\t>\n\t\t\t\t\t<div onClick={() => setMarkerInfo({scooter, showScooter: true})}className=\"crime-marker\">\n\t\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</Marker>)\n\t\t\t\t})\n\t\t\t\t) : (null)}\n\t\t\t</GoogleMapReact>\n\t\t\t):(<p>Loading...</p> )}\n\t\t\t{/*\t\t\t\t POPUP\t\t\t\t */}\n\t\t\t{markerInfo || cityContent || loadStationContent ? (\n\t\t\t<PopUp\n\t\t\t\tkey={\"popupkey\"}\n\t\t\t\tPopupInfo={PopupInfo}\n\t\t\t\t>\n\t\t\t</PopUp>\n\t\t\t): (null) }\n\t\t</Style>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}