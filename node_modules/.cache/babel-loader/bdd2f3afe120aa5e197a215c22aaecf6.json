{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport Api from \"../../../api\";\n\nconst LoadCitys = async mapRef => {\n  _s();\n\n  const [loadingCoordinates, setLoadingCoordinates] = useState();\n\n  try {\n    let res = await Api.getAllCitys();\n    setLoadingCoordinates(res); // setLoadingCoordinates(res)\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (loadingCoordinates.length > 0 && mapRef.map !== null) {\n    var cityname;\n    const map = mapRef.map;\n    const maps = mapRef.maps;\n    loadingCoordinates.map(coords => {\n      cityname = coords.city;\n      let polyGon = [coords.position.polygonePart1, coords.position.polygonePart2, coords.position.polygonePart3, coords.position.polygonePart4];\n      cityname = new maps.Polygon({\n        paths: polyGon,\n        strokeColor: \"black\",\n        strokeOpacity: 0.2,\n        strokeWeight: 2,\n        fillColor: \"transparent\",\n        fillOpacity: 0.35\n      });\n      cityname.setMap(map);\n      cityname.onClick = {\n        handleToggle() {\n          console.log(\"HEasdasaddsaJ\");\n        }\n\n      };\n    });\n  }\n\n  return null;\n};\n\n_s(LoadCitys, \"iFM9WFGf9D59beDGxUep1su9FKQ=\");\n\n_c = LoadCitys;\nexport default LoadCitys; //  fungerar som REACt component till kartan\n// import React from \"react\";\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n// export default PopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadCitys\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/helperFunctions/loadCitys.js"],"names":["React","useState","Api","LoadCitys","mapRef","loadingCoordinates","setLoadingCoordinates","res","getAllCitys","error","console","log","length","map","cityname","maps","coords","city","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","onClick","handleToggle"],"mappings":";;AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAGA,MAAMC,SAAS,GAAG,MAAOC,MAAP,IAAkB;AAAA;;AAInC,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,EAA5D;;AAGA,MAAI;AACH,QAAIM,GAAG,GAAG,MAAML,GAAG,CAACM,WAAJ,EAAhB;AACAF,IAAAA,qBAAqB,CAACC,GAAD,CAArB,CAFG,CAIH;AACA,GALD,CAKE,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;;AAGD,MAAIJ,kBAAkB,CAACO,MAAnB,GAA4B,CAA5B,IAAiCR,MAAM,CAACS,GAAP,KAAe,IAApD,EAA0D;AACzD,QAAIC,QAAJ;AACA,UAAMD,GAAG,GAAGT,MAAM,CAACS,GAAnB;AACA,UAAME,IAAI,GAAGX,MAAM,CAACW,IAApB;AAEAV,IAAAA,kBAAkB,CAACQ,GAAnB,CAAuBG,MAAM,IAC5B;AACAF,MAAAA,QAAQ,GAAGE,MAAM,CAACC,IAAlB;AACA,UAAIC,OAAO,GACT,CAACF,MAAM,CAACG,QAAP,CAAgBC,aAAjB,EACAJ,MAAM,CAACG,QAAP,CAAgBE,aADhB,EAEAL,MAAM,CAACG,QAAP,CAAgBG,aAFhB,EAGAN,MAAM,CAACG,QAAP,CAAgBI,aAHhB,CADF;AAOCT,MAAAA,QAAQ,GAAG,IAAIC,IAAI,CAACS,OAAT,CAAiB;AAC3BC,QAAAA,KAAK,EAAEP,OADoB;AAE3BQ,QAAAA,WAAW,EAAE,OAFc;AAG3BC,QAAAA,aAAa,EAAE,GAHY;AAI3BC,QAAAA,YAAY,EAAE,CAJa;AAK3BC,QAAAA,SAAS,EAAE,aALgB;AAM3BC,QAAAA,WAAW,EAAE;AANc,OAAjB,CAAX;AAQAhB,MAAAA,QAAQ,CAACiB,MAAT,CAAgBlB,GAAhB;AACAC,MAAAA,QAAQ,CAACkB,OAAT,GAAiB;AAACC,QAAAA,YAAY,GAAG;AAChCvB,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;;AAFgB,OAAjB;AAKA,KAxBF;AAyBC;;AAED,SAAO,IAAP;AACD,CAlDD;;GAAMR,S;;KAAAA,S;AAmDN,eAAeA,SAAf,C,CAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import {React, useState } from \"react\";\nimport Api from \"../../../api\";\n\n\nconst LoadCitys = async (mapRef) => {\n\n\n\n\tconst [loadingCoordinates, setLoadingCoordinates] = useState();\n\n\n\ttry {\n\t\tlet res = await Api.getAllCitys();\n\t\tsetLoadingCoordinates(res);\n\n\t\t// setLoadingCoordinates(res)\n\t} catch (error) {\n\t\tconsole.log(error)\n\t}\n    \n\n\tif (loadingCoordinates.length > 0 && mapRef.map !== null) {\n\t\tvar cityname;\n\t\tconst map = mapRef.map;\n\t\tconst maps = mapRef.maps;\n\n\t\tloadingCoordinates.map(coords =>\n\t\t\t{\n\t\t\tcityname = coords.city\n\t\t\tlet polyGon = \n\t\t\t\t([coords.position.polygonePart1,\n\t\t\t\t\tcoords.position.polygonePart2,\n\t\t\t\t\tcoords.position.polygonePart3,\n\t\t\t\t\tcoords.position.polygonePart4\n\t\t\t\t]);\n\n\t\t\t\tcityname = new maps.Polygon({\n\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\tstrokeColor: \"black\",\n\t\t\t\t\tstrokeOpacity: 0.2,\n\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\tfillColor: \"transparent\",\n\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\t});\n\t\t\t\tcityname.setMap(map);\n\t\t\t\tcityname.onClick={handleToggle() {\n\t\t\t\t\tconsole.log(\"HEasdasaddsaJ\")\n\t\t\t\t}}\n\n\t\t\t\t\n\t\t\t})\n\t\t}\n\n\t\treturn null\n}\nexport default LoadCitys\n\n\n\n//  fungerar som REACt component till kartan\n\n// import React from \"react\";\n\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n\n// export default PopUp;\n\n"]},"metadata":{},"sourceType":"module"}