{"ast":null,"code":"import { API_URL } from \"./config\";\nconst Api = {\n  getAUser: async id => {\n    try {\n      const endpoint = `${API_URL}/customers/${id}`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAllUsers: async () => {\n    try {\n      const endpoint = `${API_URL}/customers`;\n      let res = await (await fetch(endpoint)).json();\n      return res;\n    } catch (error) {\n      return false;\n    }\n  },\n  getACity: async whatCity => {\n    try {\n      const endpoint = `${API_URL}/cities/${whatCity}`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAllCitys: async () => {\n    try {\n      const endpoint = `${API_URL}/cities`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAllScooters: async () => {\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint)).json();\n      return res.data;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAllChargePost: async (city, matching) => {\n    try {\n      const endpoint = `${API_URL}/cities/posts/${city}`;\n      let res = await (await fetch(endpoint)).json();\n      let result = false;\n      console.log(city, matching, res);\n\n      if (matching) {\n        res.data.forEach(element => {\n          if (element.color === matching) {\n            console.log(element.color, matching);\n            result = element.amount_of_bikes_post;\n          }\n        });\n        return result;\n      }\n    } catch (error) {\n      return false;\n    }\n  },\n  logginUserViaGit: async username => {\n    const defaultConfig = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/customers/login`;\n      let res = await (await fetch(endpoint, { ...defaultConfig,\n        body: JSON.stringify({\n          username: username\n        })\n      })).json();\n      return res;\n    } catch (error) {\n      return false;\n    }\n  },\n  updateAScooter: async (id, speed, battery, newPosition, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/scooter`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          speed: speed,\n          battery: battery,\n          lat: newPosition.lat,\n          lng: newPosition.lng\n        })\n      })).json();\n\n      if (res.data.result === `Object: ${id} updated`) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  },\n  updateAScootersUser: async (id, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/scooter/setuser`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id\n        })\n      })).json();\n\n      if (res.data.result === `Object: ${id} updated`) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  },\n  updateAScootersLogg: async (varForUpdate, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/scooter/insertLogg`;\n      let res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: varForUpdate.id,\n          active_user: varForUpdate.active_user,\n          event: varForUpdate.event,\n          start_lat: varForUpdate.start_lat,\n          start_lng: varForUpdate.start_lng,\n          start_time: varForUpdate.time,\n          end_lat: varForUpdate.end_lat,\n          end_lng: varForUpdate.end_lng,\n          end_time: varForUpdate.time\n        })\n      })).json();\n\n      if (res.data.result === `Object: ${varForUpdate.id} updated`) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      return false;\n    }\n  },\n  updateUserFunds: async (addToBalance, id, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/customers/balance`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          _id: id,\n          balance: addToBalance\n        })\n      })).json();\n\n      if (res.data.result === `Object: ${id} updated`) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  },\n  updateNrBikesChargePost: async (city, amount_of_bikes, color, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/cities/posts/update`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          city: city,\n          amount_of_bikes: amount_of_bikes,\n          color: color\n        })\n      })).json();\n\n      if (res.data.result === `City post: ${city} updated`) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  },\n  updateNrBikesParkZone: async (city, amount_of_bikes, color, token) => {\n    const defaultConfigPut = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        'x-access-token': token\n      }\n    };\n\n    try {\n      const endpoint = `${API_URL}/cities/zones/update`;\n      let res;\n      res = await (await fetch(endpoint, { ...defaultConfigPut,\n        body: JSON.stringify({\n          city: city,\n          amount_of_bikes: amount_of_bikes,\n          color: color\n        })\n      })).json();\n\n      if (res.data.result === `City zone: ${city} updated`) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n};\nexport default Api;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Api.js"],"names":["API_URL","Api","getAUser","id","endpoint","res","fetch","json","error","getAllUsers","getACity","whatCity","data","getAllCitys","getAllScooters","getAllChargePost","city","matching","result","console","log","forEach","element","color","amount_of_bikes_post","logginUserViaGit","username","defaultConfig","method","headers","body","JSON","stringify","updateAScooter","speed","battery","newPosition","token","defaultConfigPut","_id","lat","lng","updateAScootersUser","updateAScootersLogg","varForUpdate","active_user","event","start_lat","start_lng","start_time","time","end_lat","end_lng","end_time","updateUserFunds","addToBalance","balance","updateNrBikesChargePost","amount_of_bikes","updateNrBikesParkZone"],"mappings":"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","sourcesContent":["\nimport { API_URL } from \"./config\";\n\nconst Api = {\n\n    getAUser: async(id) => {\n        try {\n            const endpoint = `${API_URL}/customers/${id}`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            return false\n        }\n    },\n\n    getAllUsers: async() => {\n        try {\n            const endpoint = `${API_URL}/customers`;\n            let res = await (await fetch(endpoint)).json();\n            return res\n        } catch (error) {\n            return false\n        }\n    },\n\n    getACity: async (whatCity) => {\n        try {\n            const endpoint = `${API_URL}/cities/${whatCity}`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            return false\n        }\n\t},\n\n    getAllCitys: async () => {\n        try {\n            const endpoint = `${API_URL}/cities`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            return false\n        }\n\t},\n\n    getAllScooters: async () => {\n        try {\n            const endpoint = `${API_URL}/scooter`;\n            let res = await (await fetch(endpoint)).json();\n            return res.data\n        } catch (error) {\n            return false\n        }\n\t},\n\n    getAllChargePost: async (city, matching) => {\n        try {\n            const endpoint = `${API_URL}/cities/posts/${city}`;\n            let res = await (await fetch(endpoint)).json();\n            let result = false;\n            console.log(city, matching, res)\n            if(matching) {\n                res.data.forEach(element => {\n                    if (element.color === matching) {\n                        console.log(element.color, matching)\n                        result = element.amount_of_bikes_post\n                        \n                    }\n                });\n                return result\n            }\n        } catch (error) {\n            return false\n        }\n\t},\n\n    logginUserViaGit: async (username)  => {\n\n        const defaultConfig = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n        };\n\n        try {\n            const endpoint = `${API_URL}/customers/login`\n            let res = await (\n                await fetch(endpoint, {\n                  ...defaultConfig,\n                  body: JSON.stringify({username: username} )\n                })\n              ).json();\n            return res\n\n        } catch (error) {\n            return false\n        }\n    },\n\n    updateAScooter: async (id, speed, battery, newPosition, token) => {\n\n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n\n        try {\n            const endpoint = `${API_URL}/scooter`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        speed: speed,\n                        battery: battery,\n                        lat: newPosition.lat,\n                        lng: newPosition.lng,\n                    })\n                    })).json();\n            if(res.data.result === `Object: ${id} updated`) {\n                return true\n            }\n            return false      \n        } catch (error) {\n            return false      \n        }\n\t},\n\n    updateAScootersUser: async (id, token) => {\n\n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n\n        try {\n            const endpoint = `${API_URL}/scooter/setuser`;\n\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                    })\n                })).json();\n            if(res.data.result === `Object: ${id} updated`) {\n                return true\n            }\n            return false      \n        } catch (error) {\n            return false      \n        }\n\t},\n\n\n    updateAScootersLogg: async (varForUpdate, token) => {\n\n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n\n        try {\n            const endpoint = `${API_URL}/scooter/insertLogg`;\n            let res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: varForUpdate.id,\n                        active_user: varForUpdate.active_user,\n                        event: varForUpdate.event,\n                        start_lat: varForUpdate.start_lat,\n                        start_lng: varForUpdate.start_lng,\n                        start_time: varForUpdate.time,\n                        end_lat: varForUpdate.end_lat,\n                        end_lng: varForUpdate.end_lng,\n                        end_time: varForUpdate.time,\n                    })\n                })).json();\n\n            if(res.data.result === `Object: ${varForUpdate.id} updated`) {\n                return true\n            }\n            return false\n        } catch (error) {\n            return false      \n        }\n\t},\n\n\n    updateUserFunds: async (addToBalance, id, token) => {\n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n\n        try {\n            const endpoint = `${API_URL}/customers/balance`;\n            let res;\n            res = await (\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        _id: id,\n                        balance: addToBalance,\n                    })\n                })).json();\n            \n            if(res.data.result === `Object: ${id} updated`) {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            return false\n        }\n\t},\n\n\n    updateNrBikesChargePost: async (city, amount_of_bikes, color, token) => {\n        \n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n\n        try {\n            const endpoint = `${API_URL}/cities/posts/update`;\n            let res;\n            res = await(\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        city: city,\n                        amount_of_bikes: amount_of_bikes,\n                        color: color\n                    })\n                })).json();\n\n            if(res.data.result === `City post: ${city} updated`) {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            return false\n        }\n\t},\n    \n    updateNrBikesParkZone: async (city, amount_of_bikes, color, token) => {\n\n        const defaultConfigPut = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Access-Control-Allow-Origin\": \"*\",\n                'x-access-token': token\n            }\n        }\n     \n        try {\n            const endpoint = `${API_URL}/cities/zones/update`;\n            let res;\n            res = await(\n                await fetch(endpoint, {\n                    ...defaultConfigPut,\n                    body: JSON.stringify({\n                        city: city,\n                        amount_of_bikes: amount_of_bikes,\n                        color: color\n                    })\n                })).json();\n            \n            if(res.data.result === `City zone: ${city} updated`) {\n                return true\n            } else {\n                return false\n            }\n        } catch (error) {\n            return false\n        }\n\t},\n}\n\nexport default Api\n"]},"metadata":{},"sourceType":"module"}