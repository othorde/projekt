{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  console.log(myContext.user);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n     */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.map(elem => {\n      setCharging_posts([elem]);\n    });\n  } // Vad behöver uppdateras?\n  // Scooterns plats ny long lat\n  // Uppdatera hur många som finns i föregående zon\n  // uppdatera hur många som finns i den nya zonen\n  //\n  // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n  // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor !== null) {\n      let position = props.position;\n      let newPosition;\n      let movedBy = \"admin;\";\n      let today = new Date();\n      let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + ' ' + time;\n      charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n\n      if (position !== null) {\n        var lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n        var lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n        newPosition = {\n          lat: lat,\n          lng: lng\n        };\n        var logg = `${dateTime} \\n \n                    Moved(update) this bike (bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    This was carried out by ${movedBy}.\n                `;\n        console.log(logg);\n        let response = await Api.updateAScooter(bikeId, newPosition, movedBy, props.battery, props.speed, logg);\n        console.log(response);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \" F\\xF6rflytta cykel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"v3F1t0iaCax8Kg9kUJmPztAKqSs=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","Api","AppContext","MoveBike","props","console","log","myContext","user","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","getLoadStationsForMovingBike","city","getACity","map","elem","handleSubmit","position","newPosition","movedBy","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","filter","color","includes","lat","polygonePart1","Math","random","polygonePart4","lng","logg","id","battery","response","updateAScooter","bikeId","speed","e","target","value"],"mappings":"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","sourcesContent":["import {React, useState, useContext} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\n\nexport default function MoveBike(props) {\n\n    console.log(myContext.user)\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n       */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.map(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    // Vad behöver uppdateras?\n    // Scooterns plats ny long lat\n    // Uppdatera hur många som finns i föregående zon\n    // uppdatera hur många som finns i den nya zonen\n    //\n    // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n    // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = async () => {\n\n        if (moveBikeToColor !== null) {\n            let position = props.position;\n            let newPosition;\n            let movedBy = \"admin;\"\n            let today = new Date();\n            let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n            let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            let dateTime = date+' '+time;\n            \n            charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            if ( position !== null) {\n                var lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n                var lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n                newPosition = {lat: lat, lng: lng}\n\n                var logg = `${dateTime} \\n \n                    Moved(update) this bike (bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    This was carried out by ${movedBy}.\n                `;\n                console.log(logg)\n\n                let response = await Api.updateAScooter(bikeId, newPosition, movedBy, props.battery, props.speed, logg)\n                console.log(response)\n            }\n        }\n    }\n\n\treturn (\n        <div onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}>\n                <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n                {charging_posts.map(elem => elem !== null  &&\n                    <option key={elem.color}value={elem.color}>\n                    {elem.color + \" zon\"}\n                    </option> )}\n            </select>\n            <div> <button onClick={handleSubmit}> Förflytta cykel </button> </div>\n        </div>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}