{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\MoveBike\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport { StyleMoveBike } from './Form.styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoveBike(props) {\n  _s();\n\n  const myContext = useContext(AppContext);\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [moveBikeToColor, setMoveBikeToColor] = useState({});\n  const [message, setMessage] = useState(\"\");\n  /* funktionen hämtar den stad där cykeln befinner sig \n     loopar igenom och sparar position och färgkod för laddningsstationen \n     Kontrollera denna när vi har fler laddningsstationer\n     Bör va graphQl sen\n     */\n\n  async function getLoadStationsForMovingBike() {\n    let city = await Api.getACity(props.city);\n    city[0].charging_posts.forEach(elem => {\n      setCharging_posts([elem]);\n    });\n  }\n\n  useEffect(() => {\n    setTimeout(() => setMessage(\"\"), 5000);\n  }, [message]);\n\n  async function updateZones() {\n    console.log(\"HEj\");\n  }\n  /* Kontrollera denna uträkningen */\n  // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n  // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n\n  /* Får vilken färgkod som scootern ska skickas till\n      kontrollerar med färger för staden\n      räknar ut nya koordinater. random plats inom zonen.\n      Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n  */\n\n\n  const handleSubmit = async () => {\n    if (moveBikeToColor !== \"noValue\") {\n      let position = props.position;\n      let newPosition;\n      let movedBy = myContext.userHook.value.user;\n      let today = new Date();\n      let date = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + ' ' + time;\n      let active_user = \"null\";\n      charging_posts.filter(elem => elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null);\n\n      if (position !== null) {\n        let lat = newPosition.polygonePart1.lat + Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat); // lat = y\n\n        let lng = newPosition.polygonePart1.lng + Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng); //lng = x\n\n        newPosition = {\n          lat: lat,\n          lng: lng\n        };\n        let event = `${dateTime} \\n \n                    Moved(update)(bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    Carried out by ${movedBy}.\n                `;\n        let speed = \"0\";\n        let battery = \"100\";\n        let response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n        if (response && response.data) {\n          if (response.data.result === `Object: ${props.id} updated`) {\n            let resUpdateScooterUser = await Api.updateAScootersUser(props.id); //uppdaterar scooterns användare\n\n            if (resUpdateScooterUser.data.result === `Object: ${props.id} updated`) {\n              let responseLogg = await Api.updateAScootersLogg(props.id, active_user, event, props.position.lat, props.position.lng, time, newPosition.lat, newPosition.lng, time);\n\n              if (responseLogg === `Object: ${props.id} updated`) {\n                updateZones();\n                setMessage(\"Cykel förflyttad, logg uppdaterad\");\n              } else {\n                setMessage(\"Något gick fel\");\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyleMoveBike, {\n    onClick: getLoadStationsForMovingBike,\n    children: [\" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\" \", message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      \"data-testid\": \"dropdown\",\n      onChange: e => {\n        setMoveBikeToColor(e.target.value);\n      },\n      value: moveBikeToColor,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 'noValue',\n        children: \"-- V\\xE4lj vart cykeln ska f\\xF6rflyttas --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), charging_posts.map(elem => elem !== null && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: elem.color,\n        children: elem.color + \" zon\"\n      }, elem.color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \" F\\xF6rflytta cykel \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MoveBike, \"ssXEX09XlTxuSz3Dcw8Xe68iG88=\");\n\n_c = MoveBike;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveBike\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/MoveBike/index.js"],"names":["React","useState","useContext","useEffect","Api","AppContext","StyleMoveBike","MoveBike","props","myContext","charging_posts","setCharging_posts","moveBikeToColor","setMoveBikeToColor","message","setMessage","getLoadStationsForMovingBike","city","getACity","forEach","elem","setTimeout","updateZones","console","log","handleSubmit","position","newPosition","movedBy","userHook","value","user","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","active_user","filter","color","includes","lat","polygonePart1","Math","random","polygonePart4","lng","event","id","battery","speed","response","updateAScooter","data","result","resUpdateScooterUser","updateAScootersUser","responseLogg","updateAScootersLogg","e","target","map"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport Api from \"../../api\";\nimport AppContext from \"../../AppContext\";\nimport {StyleMoveBike} from './Form.styles.js'\n\nexport default function MoveBike(props) {\n    const myContext = useContext(AppContext);\n    const [charging_posts, setCharging_posts] = useState([])\n    const [moveBikeToColor, setMoveBikeToColor] = useState({})\n    const [message, setMessage] = useState(\"\")\n\n\n    /* funktionen hämtar den stad där cykeln befinner sig \n       loopar igenom och sparar position och färgkod för laddningsstationen \n       Kontrollera denna när vi har fler laddningsstationer\n       Bör va graphQl sen\n       */\n    async function getLoadStationsForMovingBike() {\n        let city = await Api.getACity(props.city);\n        city[0].charging_posts.forEach(elem => {\n            setCharging_posts([elem])\n        })\n    }\n\n    useEffect(() => {\n        setTimeout(() => setMessage(\"\"), 5000);\n    }, [message])\n\n    async function updateZones() {\n        console.log(\"HEj\")\n\n        \n\n    }\n\n\n    /* Kontrollera denna uträkningen */\n    // var lat = y_min + (Math.random() * (y_max - y_min)); // lat = y\n    // var lng = x_min + (Math.random() * (x_max - x_min)); //lng = x\n    \n    /* Får vilken färgkod som scootern ska skickas till\n        kontrollerar med färger för staden\n        räknar ut nya koordinater. random plats inom zonen.\n        Uppdaterar, antal cyklar i nuvarande zon samt ny zon\n    */\n    const handleSubmit = async () => {\n        if (moveBikeToColor !== \"noValue\") {\n\n            let position = props.position;\n            let newPosition;\n            let movedBy = myContext.userHook.value.user;\n            let today = new Date();\n            let date = today.getFullYear()+'-'+(today.getMonth())+'-'+today.getDate();\n            let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            let dateTime = date+' '+time;\n            let active_user = \"null\";\n            charging_posts.filter(elem=> elem.color.includes(moveBikeToColor) ? newPosition = elem.position : position = null)\n            if (position !== null) {\n                let lat = newPosition.polygonePart1.lat + (Math.random() * (newPosition.polygonePart4.lat - newPosition.polygonePart1.lat)); // lat = y\n                let lng = newPosition.polygonePart1.lng + (Math.random() * (newPosition.polygonePart4.lng - newPosition.polygonePart1.lng)); //lng = x\n                newPosition = {lat: lat, lng: lng}\n                let event = `${dateTime} \\n \n                    Moved(update)(bikeId:${props.id}) \n                    from position: lat: ${props.position.lat} lng: ${props.position.lng} to the ${moveBikeToColor} zon. \n                    New exact position in zon: lat: ${newPosition.lat}, lng: ${newPosition.lng} .\n                    Speed is now 0 and battery is charged from ${props.battery} to 100%.\n                    Carried out by ${movedBy}.\n                `;\n                let speed = \"0\";\n                let battery = \"100\";\n                let response = await Api.updateAScooter(props.id, speed, battery, newPosition); //uppdaterar scootern\n\n                if (response && response.data) {\n                    if(response.data.result === `Object: ${props.id} updated`) {\n                        let resUpdateScooterUser = await Api.updateAScootersUser(props.id);  //uppdaterar scooterns användare\n                        if(resUpdateScooterUser.data.result === `Object: ${props.id} updated`) {\n\n                            let responseLogg = await Api.updateAScootersLogg(\n                                props.id,\n                                active_user,\n                                event,\n                                props.position.lat,\n                                props.position.lng,\n                                time,\n                                newPosition.lat,\n                                newPosition.lng,\n                                time,\n                                );\n                            \n                                if(responseLogg === `Object: ${props.id} updated`) {\n                                    updateZones();\n                                    setMessage(\"Cykel förflyttad, logg uppdaterad\")\n                                } else {\n                                    setMessage(\"Något gick fel\")\n                                }\n                            }\n                    }\n                }\n            }   \n        }\n    }\n\n\treturn (\n        <StyleMoveBike onClick = {getLoadStationsForMovingBike}> {/* laddar in ny info med onClick */}\n            {message &&\n            \n                <p style={{color:\"red\"}}> {message} </p>\n            }\n            <select \n                data-testid=\"dropdown\" onChange={(e) => {\n                setMoveBikeToColor((e.target.value))\n            }}\n            value = {moveBikeToColor}\n            >\n            <option value={'noValue'}>-- Välj vart cykeln ska förflyttas --</option>\n            {charging_posts.map(elem => elem !== null  &&\n                <option key={elem.color}value={elem.color}>\n                {elem.color + \" zon\"}\n                </option> )}\n            </select>\n            <button onClick={handleSubmit}> Förflytta cykel </button>\n        </StyleMoveBike>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}