{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../Api';\nlet initalValue = {\n  showParkingZone: false,\n  loadParkingZone: []\n};\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\n\nconst useDisplayPolyParkZone = (mapRef, props) => {\n  _s();\n\n  const [parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n\n  const [parkingZoneError, setParkingZoneError] = useState(false); // håller content för onClick\n\n  /* Tar emot res från getData. Loopar igenom. Skapar poly av\n     alla koordinater som tillhör städer. Lägger på onclickevent.\n     Sparar objekten i state, så de senare kan tas bort.\n  */\n\n  const handleSucces = res => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.forEach(cityCoords => {\n      cityCoords.parking_zones.forEach(parking_zone => {\n        let polyGon = [parking_zone.position.polygonePart1, parking_zone.position.polygonePart2, parking_zone.position.polygonePart3, parking_zone.position.polygonePart4];\n        parkingZoneName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: parking_zone.color,\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        parkingZoneName.addListener('click', () => {\n          setParkingZoneContent(prevState => ({\n            showParkingZone: !prevState.showParkingZone,\n            loadParkingZone: parking_zone\n          }));\n        });\n        parkingZoneName.setMap(map);\n        var holdArr = parkingZoneObject;\n        holdArr.push(parkingZoneName);\n        setParkingZoneObject(holdArr);\n      });\n    });\n  }; // funktion som togglar state, från andra komponenter\n\n\n  const showInfoForParkingZone = trueOrFalse => {\n    setParkingZoneContent({\n      showParkingZone: trueOrFalse\n    });\n  }; // tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\n\n\n  function removeParkingZonesFromMap() {\n    parkingZoneObject !== null && parkingZoneObject.forEach(parkingZone => {\n      parkingZone.setMap(null);\n    });\n  }\n\n  const getData = async () => {\n    try {\n      setParkingZoneError(false);\n      let res = await Api.getAllCitys();\n      handleSucces(res);\n    } catch (error) {\n      setParkingZoneError(true);\n    }\n  }; //körs vid mount och förändring av prop om poly för städer ska visas = hämtar, annars tar bort med removeCitysFromMap\n\n\n  useEffect(() => {\n    !props.ifToShowParkingZone.loadParkingZone ? removeParkingZonesFromMap() : getData();\n  }, [props.ifToShowParkingZone.loadParkingZone]);\n  return {\n    parkingZoneObject,\n    parkingZoneContent,\n    parkingZoneError,\n    showInfoForParkingZone\n  };\n};\n\n_s(useDisplayPolyParkZone, \"UcT5Yxgvvq5xbYtIAr9jtcVLzjE=\");\n\nexport default useDisplayPolyParkZone;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyParkZone.js"],"names":["useState","useEffect","Api","initalValue","showParkingZone","loadParkingZone","useDisplayPolyParkZone","mapRef","props","parkingZoneObject","setParkingZoneObject","parkingZoneContent","setParkingZoneContent","parkingZoneError","setParkingZoneError","handleSucces","res","parkingZoneName","map","current","maps","forEach","cityCoords","parking_zones","parking_zone","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","showInfoForParkingZone","trueOrFalse","removeParkingZonesFromMap","parkingZone","getData","getAllCitys","error","ifToShowParkingZone"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,IAAIC,WAAW,GAAG;AACjBC,EAAAA,eAAe,EAAE,KADA;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAAlB;AAKA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAAA;;AAC9C,QAAK,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC,EAAD,CAAzD,CAD8C,CACiB;;AAC/D,QAAK,CAACW,kBAAD,EAAqBC,qBAArB,IAA8CZ,QAAQ,CAACG,WAAD,CAA3D,CAF8C,CAE4B;;AAC1E,QAAK,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,KAAD,CAAvD,CAH8C,CAGkB;;AAEhE;AACJ;AACA;AACA;;AACI,QAAMe,YAAY,GAAIC,GAAD,IAAS;AAC9B,QAAIC,eAAJ;AACA,UAAMC,GAAG,GAAGX,MAAM,CAACY,OAAP,CAAeD,GAA3B;AACA,UAAME,IAAI,GAAGb,MAAM,CAACY,OAAP,CAAeC,IAA5B;AAEAJ,IAAAA,GAAG,CAACK,OAAJ,CAAYC,UAAU,IAAI;AACtBA,MAAAA,UAAU,CAACC,aAAX,CAAyBF,OAAzB,CAAiCG,YAAY,IAAI;AAC7C,YAAIC,OAAO,GACN,CACGD,YAAY,CAACE,QAAb,CAAsBC,aADzB,EAEGH,YAAY,CAACE,QAAb,CAAsBE,aAFzB,EAGGJ,YAAY,CAACE,QAAb,CAAsBG,aAHzB,EAIGL,YAAY,CAACE,QAAb,CAAsBI,aAJzB,CADL;AAOAb,QAAAA,eAAe,GAAG,IAAIG,IAAI,CAACW,OAAT,CAAiB;AAC/BC,UAAAA,KAAK,EAAEP,OADwB;AAE/BQ,UAAAA,WAAW,EAAET,YAAY,CAACU,KAFK;AAG/BC,UAAAA,aAAa,EAAE,GAHgB;AAI/BC,UAAAA,YAAY,EAAE,CAJiB;AAK/BC,UAAAA,SAAS,EAAE,aALoB;AAM/BC,UAAAA,WAAW,EAAE;AANkB,SAAjB,CAAlB;AASArB,QAAAA,eAAe,CAACsB,WAAhB,CAA4B,OAA5B,EAAqC,MAAM;AACvC3B,UAAAA,qBAAqB,CAAC4B,SAAS,KAAK;AAChCpC,YAAAA,eAAe,EAAE,CAACoC,SAAS,CAACpC,eADI;AAEhCC,YAAAA,eAAe,EAAEmB;AAFe,WAAL,CAAV,CAArB;AAIH,SALD;AAMJP,QAAAA,eAAe,CAACwB,MAAhB,CAAuBvB,GAAvB;AACA,YAAIwB,OAAO,GAAGjC,iBAAd;AACAiC,QAAAA,OAAO,CAACC,IAAR,CAAa1B,eAAb;AACAP,QAAAA,oBAAoB,CAACgC,OAAD,CAApB;AAEC,OA5BD;AA8BH,KA/BD;AAgCH,GArCG,CAT8C,CAgD9C;;;AACA,QAAME,sBAAsB,GAAIC,WAAD,IAAiB;AAC5CjC,IAAAA,qBAAqB,CAAC;AAAER,MAAAA,eAAe,EAAEyC;AAAnB,KAAD,CAArB;AACN,GAFE,CAjD8C,CAqD9C;;;AACH,WAASC,yBAAT,GAAqC;AAC9BrC,IAAAA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,CAACY,OAAlB,CAA0B0B,WAAW,IAAI;AACnEA,MAAAA,WAAW,CAACN,MAAZ,CAAmB,IAAnB;AACH,KAF6B,CAA9B;AAGN;;AAGE,QAAMO,OAAO,GAAG,YAAY;AACxB,QAAI;AACAlC,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,UAAIE,GAAG,GAAG,MAAMd,GAAG,CAAC+C,WAAJ,EAAhB;AACAlC,MAAAA,YAAY,CAACC,GAAD,CAAZ;AACH,KAJD,CAIE,OAAOkC,KAAP,EAAc;AACZpC,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH;AACJ,GARD,CA7D8C,CAuE9C;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AAEZ,KAACO,KAAK,CAAC2C,mBAAN,CAA0B9C,eAA3B,GAA6CyC,yBAAyB,EAAtE,GAA2EE,OAAO,EAAlF;AACH,GAHQ,EAGN,CAACxC,KAAK,CAAC2C,mBAAN,CAA0B9C,eAA3B,CAHM,CAAT;AAKA,SAAO;AAACI,IAAAA,iBAAD;AAAoBE,IAAAA,kBAApB;AAAwCE,IAAAA,gBAAxC;AAA0D+B,IAAAA;AAA1D,GAAP;AACH,CA9ED;;GAAMtC,sB;;AA+EN,eAAeA,sBAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowParkingZone: false,\n\tloadParkingZone: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyParkZone = (mapRef, props) => {\n    const[parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n    const[parkingZoneError, setParkingZoneError] = useState(false); // håller content för onClick\n\n    /* Tar emot res från getData. Loopar igenom. Skapar poly av\n       alla koordinater som tillhör städer. Lägger på onclickevent.\n       Sparar objekten i state, så de senare kan tas bort.\n    */\n    const handleSucces = (res) => {\n    var parkingZoneName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.forEach(cityCoords => {\n        cityCoords.parking_zones.forEach(parking_zone => {         \n            let polyGon = \n                ([\n                    parking_zone.position.polygonePart1,\n                    parking_zone.position.polygonePart2,\n                    parking_zone.position.polygonePart3,\n                    parking_zone.position.polygonePart4,\n                ]);\n            parkingZoneName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: parking_zone.color,\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35,\n                });\n            \n            parkingZoneName.addListener('click', () => {\n                setParkingZoneContent(prevState => ({\n                    showParkingZone: !prevState.showParkingZone,\n                    loadParkingZone: parking_zone\n                }));\n            });\n        parkingZoneName.setMap(map);\n        var holdArr = parkingZoneObject;\n        holdArr.push(parkingZoneName);\n        setParkingZoneObject(holdArr);\n\n        })\n\n    })\n};\n\n    // funktion som togglar state, från andra komponenter\n    const showInfoForParkingZone = (trueOrFalse) => {\n        setParkingZoneContent({ showParkingZone: trueOrFalse});\n\t}\n\n    // tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\n\tfunction removeParkingZonesFromMap() { \n        parkingZoneObject !== null && parkingZoneObject.forEach(parkingZone => {\n            parkingZone.setMap(null);\n        })\n\t}\n\n\n    const getData = async () => {\n        try {\n            setParkingZoneError(false)\n            let res = await Api.getAllCitys();\n            handleSucces(res);\n        } catch (error) {\n            setParkingZoneError(true)\n        }\n    }\n\n    //körs vid mount och förändring av prop om poly för städer ska visas = hämtar, annars tar bort med removeCitysFromMap\n    useEffect(() => {\n\n        !props.ifToShowParkingZone.loadParkingZone ? removeParkingZonesFromMap() : getData()\n    }, [props.ifToShowParkingZone.loadParkingZone])\n    \n    return {parkingZoneObject, parkingZoneContent, parkingZoneError, showInfoForParkingZone};\n};\nexport default useDisplayPolyParkZone;\n\n"]},"metadata":{},"sourceType":"module"}