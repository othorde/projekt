{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/currentMarkerPosition\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\";\nimport Api from \"../../api\"; //styles & img\n\nimport { Style } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\nlet initalValuePopUp = {\n  showBike: false,\n  showCity: false,\n  showLocation: false,\n  content: []\n};\nexport default function MapContainer(props) {\n  _s();\n\n  //hooks\n  const mapRef = useRef();\n  const {\n    location,\n    err\n  } = useCurrentLocation(options);\n  const {\n    loadStationObject,\n    loadStationContent,\n    loadStationError\n  } = loadStationsToMap(mapRef);\n  const [citysObject, setCitysObject] = useState([]);\n  const loadScooters = props.scooter.loadScooters; ///Variabel\n\n  var ScooterArray = props.scooter.content; // bikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const [popupInfo, setPopupInfo] = useState(initalValuePopUp);\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 35\n    }, this);\n  };\n\n  console.log(loadStationObject);\n  useEffect(() => {\n    if (props.ifToShowLoadStations.loadStation === false) {\n      console.log(\"HÄR\");\n      removeLoadingStationsFromMap(mapRef.current);\n    }\n\n    if (props.ifToShowCity.loadCity === true) {\n      loadCitysToMap(mapRef.current);\n    } else {\n      removeCitysFromMap(mapRef.current);\n    }\n  }, [props]);\n\n  function removeLoadingStationsFromMap() {\n    console.log(\"HÄÄÄÄÄR\", loadingStations);\n\n    if (loadingStations !== undefined) {\n      console.log(\"HÄÄÄÄÄR\");\n      console.log(loadingStations);\n      loadingStations.loadStationName.map(station => {\n        station.setMap(null);\n      });\n    }\n  }\n\n  function removeCitysFromMap() {\n    if (citysObject !== undefined) {\n      citysObject.map(city => {\n        city.setMap(null);\n      });\n    }\n  }\n\n  console.log(loadingStations);\n\n  async function loadCitysToMap(mapRef) {\n    try {\n      let res = await Api.getAllCitys();\n\n      if (res !== null && mapRef.current !== null) {\n        console.log(res);\n        var cityname;\n        const map = mapRef.map;\n        const maps = mapRef.maps;\n        res.map(cityCoords => {\n          cityname = cityCoords.city;\n          let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n          cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35\n          });\n          cityname.addListener('click', event => {\n            console.log(\"HEJ\", cityCoords);\n            setPopupInfo({\n              showBike: false,\n              showCity: true,\n              showLocation: false,\n              content: cityCoords\n            });\n          });\n          cityname.setMap(map);\n          setCitysObject(oldArray => [...oldArray, cityname]);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Style, {\n    children: [location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      defaultZoom: 10,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: _ref2 => {\n        let {\n          map,\n          maps\n        } = _ref2;\n        mapRef.current = {\n          map,\n          maps\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        lat: location.latitude,\n        lng: location.longitude,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"crime-marker\",\n            src: personimg,\n            alt: \"person\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 5\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 4\n      }, this), loadScooters ? ScooterArray.map(scooter => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: scooter.position.lat,\n          lng: scooter.position.lng,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setPopupInfo({\n              showScooter: true,\n              showCity: false,\n              showLocation: false,\n              content: scooter\n            }),\n            className: \"crime-marker\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"scooter\",\n              src: bikeimg,\n              alt: \"scooter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 5\n          }, this)\n        }, scooter._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 4\n        }, this);\n      }) : console.log(\"HE\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), popupInfo ? /*#__PURE__*/_jsxDEV(PopUp, {\n      store: popupInfo\n    }, \"popupkey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this) : console.log(\"EJ POPUP\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"cx/tsf+tM5enWOk/HRwG/uWJXx8=\", false, function () {\n  return [useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","useLoadStationsToMap","PopUp","LoadCitys","Api","Style","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","initalValuePopUp","showBike","showCity","showLocation","content","MapContainer","props","mapRef","location","err","loadStationObject","loadStationContent","loadStationError","loadStationsToMap","citysObject","setCitysObject","loadScooters","scooter","ScooterArray","popupInfo","setPopupInfo","Marker","children","console","log","ifToShowLoadStations","loadStation","removeLoadingStationsFromMap","current","ifToShowCity","loadCity","loadCitysToMap","removeCitysFromMap","loadingStations","undefined","loadStationName","map","station","setMap","city","res","getAllCitys","cityname","maps","cityCoords","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","oldArray","error","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","showScooter","_id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/currentMarkerPosition\";\n\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\"\nimport Api from \"../../api\";\n//styles & img\nimport {Style} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\nlet initalValuePopUp = {\n\tshowBike: false,\n\tshowCity: false,\n\tshowLocation: false,\n\tcontent: []\n};\n\nexport default function MapContainer(props) {\n\t//hooks\n\tconst mapRef = useRef();\n\tconst { location, err } = useCurrentLocation(options);\n\tconst { loadStationObject, loadStationContent, loadStationError } = loadStationsToMap(mapRef);\n\tconst [citysObject, setCitysObject] = useState([]);\n\tconst loadScooters = props.scooter.loadScooters;\n\t///Variabel\n\tvar ScooterArray = props.scooter.content;\n\t// bikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\tconst [popupInfo , setPopupInfo] = useState(initalValuePopUp);\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\tconsole.log(loadStationObject)\n\n\tuseEffect(() => {\n\t\tif (props.ifToShowLoadStations.loadStation === false) {\n\t\t\tconsole.log(\"HÄR\")\n\t\t\tremoveLoadingStationsFromMap(mapRef.current)\n\t\t}\n\t\tif (props.ifToShowCity.loadCity === true) {\n\t\t\tloadCitysToMap(mapRef.current) \n\t\t} else {\n\t\t\tremoveCitysFromMap(mapRef.current)\n\t\t}\n\t}, [props])\n\n\t\n\n\tfunction removeLoadingStationsFromMap() {\n\t\tconsole.log(\"HÄÄÄÄÄR\", loadingStations)\n\n\t\tif (loadingStations !== undefined) {\n\t\t\tconsole.log(\"HÄÄÄÄÄR\")\n\n\t\t\tconsole.log(loadingStations)\n\t\t\tloadingStations.loadStationName.map(station => {\n\t\t\t\tstation.setMap(null)\n\t\t\t})\n\t\t}\n\t}\n\n\n\tfunction removeCitysFromMap() {\n\t\tif (citysObject !== undefined) {\n\t\t\tcitysObject.map(city => {\n\t\t\t\tcity.setMap(null)\n\t\t\t})\n\t\t}\n\t}\n\n\n\tconsole.log(loadingStations)\n\n\tasync function loadCitysToMap(mapRef) {\n\t\ttry {\n            let res = await Api.getAllCitys();\n\t\t\tif (res !== null && mapRef.current !== null) {\n\t\t\t\tconsole.log(res)\n\n\t\t\t\tvar cityname;\n\t\t\t\tconst map = mapRef.map;\n\t\t\t\tconst maps = mapRef.maps;\n\t\t\t\tres.map(cityCoords => {\n\n\t\t\t\t\tcityname = cityCoords.city\n\t\t\t\t\tlet polyGon = \n\t\t\t\t\t\t([cityCoords.position.polygonePart1,\n\t\t\t\t\t\t\tcityCoords.position.polygonePart2,\n\t\t\t\t\t\t\tcityCoords.position.polygonePart3,\n\t\t\t\t\t\t\tcityCoords.position.polygonePart4\n\t\t\t\t\t\t]);\n\t\t\t\t\tcityname = new maps.Polygon({\n\t\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\t\tstrokeColor: \"#FF0000\",\n\t\t\t\t\t\tstrokeOpacity: 0.9,\n\t\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\t\tfillColor: \"transparent\",\n\t\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcityname.addListener('click', (event) => {\n\t\t\t\t\t\tconsole.log(\"HEJ\", cityCoords)\n\t\t\t\t\t\tsetPopupInfo({\t\n\t\t\t\t\t\t\tshowBike: false,\n\t\t\t\t\t\t\tshowCity: true,\n\t\t\t\t\t\t\tshowLocation: false,\n\t\t\t\t\t\t\tcontent: cityCoords\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t\tcityname.setMap(map);\n\t\t\t\t\tsetCitysObject(oldArray => [...oldArray, cityname]);\n\n\t\t\t\t\t})\n\t\t\t\t}\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n\t}\n\n\treturn (\n\t\t<Style>\n\t\t\t{/* \t\tKARTA\t\t */}\n\t\t\t{location ? (\n\t\t\t<GoogleMapReact \n\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\tdefaultZoom={10}\n\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t}}\n\t\t\t>\n\t\t\t{/* \t\t1 Person \t\t*/}\n\t\t\t<Marker \n\t\t\t\tkey={1} \n\t\t\t\tlat={location.latitude} \n\t\t\t\tlng={location.longitude}\n\t\t\t\t>\n\t\t\t\t<div >\n\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t</div>\t\n\t\t\t</Marker>\n\t\t\t{/* \t\tAlla cyklar\t\t */}\n\t\t\t{loadScooters ? (\n\t\t\tScooterArray.map(scooter => {\n\t\t\treturn (\n\t\t\t<Marker \n\t\t\t\tkey={scooter._id} \n\t\t\t\tlat={scooter.position.lat} \n\t\t\t\tlng={scooter.position.lng}\n\t\t\t\t>\n\t\t\t\t<div onClick={() => setPopupInfo({\n\t\t\t\t\tshowScooter: true,\n\t\t\t\t\tshowCity: false,\n\t\t\t\t\tshowLocation: false,\n\t\t\t\t\tcontent: scooter\n\t\t\t\t\t})}className=\"crime-marker\">\n\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t</div>\n\t\t\t</Marker>)\n\t\t\t})\n\t\t\t) : (console.log(\"HE\"))}\n\t\t\t</GoogleMapReact>\n\t\t\t):(<p>Loading...</p> )}\n\n\t\t\t{/*\t\t\t\t POPUP\t\t\t\t */}\n\t\t\t{popupInfo ? (\n\t\t\t<PopUp\n\t\t\t\tkey={\"popupkey\"}\n\t\t\t\tstore={popupInfo} \n\t\t\t\t>\n\t\t\t</PopUp>\n\t\t\t): (console.log(\"EJ POPUP\"))}\n\t\t</Style>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}