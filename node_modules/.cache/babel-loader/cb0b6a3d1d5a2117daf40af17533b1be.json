{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{useState,useEffect}from'react';import Api from'../Api';var initalValue={showLoadCitys:false,city:[]};/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/var useDisplayPolyCities=function useDisplayPolyCities(mapRef,_ref){var ifToShowCity=_ref.ifToShowCity;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cityObject=_useState2[0],setcityObject=_useState2[1];// håller objektet så att man kan ta bort det från kartan\nvar _useState3=useState(initalValue),_useState4=_slicedToArray(_useState3,2),cityContent=_useState4[0],setCityContent=_useState4[1];// håller content för onClick\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),cityError=_useState6[0],setCityError=_useState6[1];// funktion som togglar state, från andra Map komponent\nvar showInfoForCity=function showInfoForCity(trueOrFalse){setCityContent({showLoadCitys:trueOrFalse});};// Om props ändras samt vid mount.\n// Är props true hämta data. Om false ta bort från karta\nuseEffect(function(){/* Tar emot res från getData. Loopar igenom. Skapar poly av\n       alla koordinater som tillhör städer. Lägger på onclickevent.\n       Sparar objekten i state, så de senare kan tas bort.\n        */var handleSucces=function handleSucces(res){var cityname;var map=mapRef.current.map;var maps=mapRef.current.maps;res.forEach(function(city){cityname=city.city;var polyGon=[city.position.polygonePart1,city.position.polygonePart2,city.position.polygonePart3,city.position.polygonePart4];cityname=new maps.Polygon({paths:polyGon,strokeColor:\"#FF0000\",strokeOpacity:0.9,strokeWeight:2,fillColor:\"transparent\",fillOpacity:0.35});cityname.addListener('click',function(){setCityContent(function(prevState){return{showLoadCitys:!prevState.showLoadCitys,city:city};});});cityname.setMap(map);var holdArr=cityObject;holdArr.push(cityname);setcityObject(holdArr);});};// tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\nfunction removeCitysFromMap(){cityObject!==null&&cityObject.forEach(function(city){city.setMap(null);});}var getData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setCityError(false);_context.next=4;return Api.getAllCitys();case 4:res=_context.sent;handleSucces(res);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);setCityError(true);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getData(){return _ref2.apply(this,arguments);};}();// Hämta data vid if\nif(ifToShowCity.loadCity){getData();var interval=setInterval(function(){getData();},10000);return function(){return clearInterval(interval);};}ifToShowCity.loadCity===false&&removeCitysFromMap();},[ifToShowCity.loadCity,cityObject,mapRef]);return{cityContent:cityContent,cityError:cityError,showInfoForCity:showInfoForCity};};export default useDisplayPolyCities;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyCities.js"],"names":["useState","useEffect","Api","initalValue","showLoadCitys","city","useDisplayPolyCities","mapRef","ifToShowCity","cityObject","setcityObject","cityContent","setCityContent","cityError","setCityError","showInfoForCity","trueOrFalse","handleSucces","res","cityname","map","current","maps","forEach","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","removeCitysFromMap","getData","getAllCitys","loadCity","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowLoadCitys: false,\n\tcity: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyCities = (mapRef, {ifToShowCity}) => {\n    const[cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n    const[cityError, setCityError] = useState(false); \n\n\n    // funktion som togglar state, från andra Map komponent\n    const showInfoForCity = (trueOrFalse) => {\n        setCityContent({showLoadCitys: trueOrFalse });\n    }\n\n    \n    // Om props ändras samt vid mount.\n    // Är props true hämta data. Om false ta bort från karta\n    useEffect(() => {\n\n        /* Tar emot res från getData. Loopar igenom. Skapar poly av\n       alla koordinater som tillhör städer. Lägger på onclickevent.\n       Sparar objekten i state, så de senare kan tas bort.\n        */\n        const handleSucces = (res) => {\n            var cityname;\n            const map = mapRef.current.map;\n            const maps = mapRef.current.maps;\n        \n            res.forEach(city => {\n                cityname = city.city\n                let polyGon = \n                    ([city.position.polygonePart1,\n                        city.position.polygonePart2,\n                        city.position.polygonePart3,\n                        city.position.polygonePart4\n                    ]);\n                cityname = new maps.Polygon({\n                    paths: polyGon,\n                    strokeColor: \"#FF0000\",\n                    strokeOpacity: 0.9,\n                    strokeWeight: 2,\n                    fillColor: \"transparent\",\n                    fillOpacity: 0.35,\n                    });\n                \n                cityname.addListener('click', () => {\n                    setCityContent(prevState => ({\n                        showLoadCitys: !prevState.showLoadCitys,\n                        city\n                    }));\n                });\n        \n                cityname.setMap(map);\n                var holdArr = cityObject;\n                holdArr.push(cityname);\n                setcityObject(holdArr);\n            })\n        };\n\n        \n        // tar bort poly för städer från kartan genom att sätta mapobj för alla stadspoly till null\n        function removeCitysFromMap() { \n            cityObject !== null && cityObject.forEach(city => {\n                city.setMap(null);\n            })\n        }\n    \n        const getData = async () => {\n            try {\n                setCityError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res)\n            } catch (error) {\n                setCityError(true)\n            }\n        }\n        // Hämta data vid if\n        if(ifToShowCity.loadCity) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowCity.loadCity === false && removeCitysFromMap()  \n    }, [ifToShowCity.loadCity, cityObject, mapRef])\n\n    return {cityContent, cityError, showInfoForCity};\n};\nexport default useDisplayPolyCities;\n\n"]},"metadata":{},"sourceType":"module"}