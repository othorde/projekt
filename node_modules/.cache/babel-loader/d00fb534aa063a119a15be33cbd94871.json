{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\"; //styles & img\n\nimport { Container, StyleMap, Main } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation hur länge den ska vara\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\n/* Denna komponent är kartan till admin. Den kan nyttjas via mapref.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props. För att kunna lägga till polygons hämtas dessa med egenskapade\n   Hooks , se de komponenter som börjar med use.\n*/\n\nexport default function MapContainer(props) {\n  _s();\n\n  //hooks\n  const mapRef = useRef();\n  const {\n    loadStationContent,\n    showInfoForLoadStation\n  } = useLoadStationsToMap(mapRef, props);\n  const {\n    cityContent,\n    showInfoForCity\n  } = useCityToMap(mapRef, props);\n  const {\n    location\n  } = useCurrentLocation(options);\n  const [scooter, setScooter] = useState([]);\n  const [PopupInfo, setPopupInfo] = useState(null); ///Variabel\n\n  const loadScooters = props.ifToShowScooter;\n  const ScooterArray = props.ifToShowScooter.content; // ScooterArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 35\n    }, this);\n  }; // Dessa tre useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll\n  //fundera på om det finns något bättre/snyggare sätt om man ska kunna toggla mellan de olika\n  // Alternativ är att ladda in allt här, men då blir index.js kladdig \n  // Har flera fetch vilket är ganska onödigt men om vi ska använda graphql senare så är strukturen m hooks att föredra.\n  // Om vi inte använder graphQl så hämta allt på en gång kanske och spara i state => populera\n\n\n  useEffect(() => {\n    if (scooter.showScooter === true) {\n      showInfoForCity(false);\n      showInfoForLoadStation(false);\n      setPopupInfo({\n        content: scooter.scooter,\n        whatToShow: \"Scooter\"\n      });\n    }\n  }, [scooter.showScooter, scooter, setScooter]);\n  useEffect(() => {\n    if (loadStationContent.showLoadStations === true) {\n      setScooter(prevState => ({\n        scooter: prevState.scooter,\n        showScooter: false\n      }));\n      showInfoForCity(false);\n      setPopupInfo({\n        content: loadStationContent.loadStations,\n        whatToShow: \"LoadStation\"\n      });\n    }\n  }, [loadStationContent.showLoadStations]);\n  useEffect(() => {\n    if (cityContent.showLoadCitys === true) {\n      setScooter(prevState => ({\n        scooter: prevState.scooter,\n        showScooter: false\n      }));\n      showInfoForLoadStation(false);\n      setPopupInfo({\n        content: cityContent.city,\n        whatToShow: \"City\"\n      });\n    }\n  }, [cityContent.showLoadCitys]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Logg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(StyleMap, {\n        children: location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n          },\n          defaultCenter: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          defaultZoom: 10,\n          yesIWantToUseGoogleMapApiInternals: true,\n          onGoogleApiLoaded: _ref2 => {\n            let {\n              map,\n              maps\n            } = _ref2;\n            mapRef.current = {\n              map,\n              maps\n            };\n          },\n          children: [/*#__PURE__*/_jsxDEV(Marker, {\n            lat: location.latitude,\n            lng: location.longitude,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"crime-marker\",\n                src: personimg,\n                alt: \"person\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 7\n            }, this)\n          }, 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 6\n          }, this), loadScooters.loadScooters && ScooterArray.map(scooter => {\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              lat: scooter.position.lat,\n              lng: scooter.position.lng,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => setScooter({\n                  scooter,\n                  showScooter: true\n                }),\n                className: \"crime-marker\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"scooter\",\n                  src: bikeimg,\n                  alt: \"scooter\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 8\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 8\n              }, this)\n            }, scooter._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 7\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }, this), scooter || cityContent || loadStationContent ? /*#__PURE__*/_jsxDEV(PopUp, {\n        PopupInfo: PopupInfo\n      }, \"popupkey\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"Mu6IGK9130OjBsWZkeyWPyrI7+I=\", false, function () {\n  return [useLoadStationsToMap, useCityToMap, useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","useLoadStationsToMap","useCityToMap","PopUp","Logg","Container","StyleMap","Main","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","MapContainer","props","mapRef","loadStationContent","showInfoForLoadStation","cityContent","showInfoForCity","location","scooter","setScooter","PopupInfo","setPopupInfo","loadScooters","ifToShowScooter","ScooterArray","content","Marker","children","showScooter","whatToShow","showLoadStations","prevState","loadStations","showLoadCitys","city","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","latitude","lng","longitude","map","maps","current","position","_id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport useLoadStationsToMap from \"../../Hooks/loadStationsToMap\";\nimport useCityToMap from \"../../Hooks/loadCitysToMap\";\nimport PopUp from \"../PopUp\";\nimport Logg from \"../Logg\";\n//styles & img\nimport {Container,StyleMap, Main} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n// options till userLocation hur länge den ska vara\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n/* Denna komponent är kartan till admin. Den kan nyttjas via mapref.\n   Populerar kartan genom att hämta från api. Scootrar hämtas direkt\n   från props. För att kunna lägga till polygons hämtas dessa med egenskapade\n   Hooks , se de komponenter som börjar med use.\n*/\nexport default function MapContainer(props) {\n\t//hooks\n\tconst mapRef = useRef();\n\tconst { loadStationContent, showInfoForLoadStation } = useLoadStationsToMap(mapRef, props);\n\tconst { cityContent, showInfoForCity } = useCityToMap(mapRef, props);\n\tconst { location } = useCurrentLocation(options);\n\tconst [scooter, setScooter] = useState([]);\n\tconst [PopupInfo, setPopupInfo] = useState(null);\n\n\t///Variabel\n\tconst loadScooters = props.ifToShowScooter;\n\tconst ScooterArray = props.ifToShowScooter.content; \t// ScooterArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\t// Dessa tre useEffect sätter de andra värdena till false så att rätt info visas i rutan för innehåll\n\t//fundera på om det finns något bättre/snyggare sätt om man ska kunna toggla mellan de olika\n\t// Alternativ är att ladda in allt här, men då blir index.js kladdig \n\t// Har flera fetch vilket är ganska onödigt men om vi ska använda graphql senare så är strukturen m hooks att föredra.\n\t// Om vi inte använder graphQl så hämta allt på en gång kanske och spara i state => populera\n\tuseEffect(() => {\n\t\tif (scooter.showScooter === true) {\n\t\t\tshowInfoForCity(false)\n\t\t\tshowInfoForLoadStation(false)\n\t\t\tsetPopupInfo({content: scooter.scooter, whatToShow: \"Scooter\"});\n\t\t}\n\t},[scooter.showScooter, scooter, setScooter])\n\n\n\tuseEffect(() => {\n\t\tif (loadStationContent.showLoadStations === true) {\n\t\t\tsetScooter(prevState => ({\n\t\t\t\tscooter: prevState.scooter,\n\t\t\t\tshowScooter: false\n\t\t\t}));\n\t\t\tshowInfoForCity(false);\n\t\t\tsetPopupInfo({content: loadStationContent.loadStations, whatToShow: \"LoadStation\"});\n\t\t}\n\t},[loadStationContent.showLoadStations])\n\n\n\tuseEffect(() => {\n\t\tif (cityContent.showLoadCitys === true) {\n\t\t\tsetScooter(prevState => ({\n\t\t\t\tscooter: prevState.scooter,\n\t\t\t\tshowScooter: false\n\t\t\t}));\n\t\t\tshowInfoForLoadStation(false);\n\t\t\tsetPopupInfo({content: cityContent.city, whatToShow: \"City\"});\n\t\t}\n\t},[cityContent.showLoadCitys])\n\n\n\n\treturn (\n\t\t\n\t\t<Container>\n\t\t\t\t\t\t<Logg/>\n\n\t\t\t<Main> \n\t\t\t<StyleMap>\n\t\t\t\t{/*KARTA*/}\n\t\t\t\t{location ? (\n\t\t\t\t<GoogleMapReact \n\t\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\t\tdefaultZoom={10}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{/*1 Person*/}\n\t\t\t\t\t<Marker \n\t\t\t\t\t\tkey={1} \n\t\t\t\t\t\tlat={location.latitude} \n\t\t\t\t\t\tlng={location.longitude}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</Marker>\n\n\t\t\t\t\t{/*Alla scootrar*/}\n\t\t\t\t\t{loadScooters.loadScooters && (\n\t\t\t\t\tScooterArray.map(scooter => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t<Marker \n\t\t\t\t\t\t\tkey={scooter._id} \n\t\t\t\t\t\t\tlat={scooter.position.lat} \n\t\t\t\t\t\t\tlng={scooter.position.lng}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div onClick={() => setScooter({scooter, showScooter: true})}className=\"crime-marker\">\n\t\t\t\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Marker>)\n\t\t\t\t\t\t})\n\t\t\t\t\t)}\n\t\t\t\t</GoogleMapReact>\n\t\t\t\t):(<p>Loading...</p> )}\n\t\t\t</StyleMap>\n\t\t\t\n\n\t\t\t{/*POPUP fönster*/}\n\t\t\t{scooter || cityContent || loadStationContent ? (\n\t\t\t\t<PopUp key={\"popupkey\"} PopupInfo={PopupInfo}></PopUp>\n\t\t\t): (null) }\n\t\t\t</Main> \n\t\t</Container>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}