{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{useState,useEffect}from'react';import Api from'../Api';var initalValue={showParkingZone:false,loadParkingZone:[]};/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/var useDisplayPolyParkZone=function useDisplayPolyParkZone(mapRef,_ref){var ifToShowParkingZone=_ref.ifToShowParkingZone;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),parkingZoneObject=_useState2[0],setParkingZoneObject=_useState2[1];// håller objektet så att man kan ta bort det från kartan\nvar _useState3=useState(initalValue),_useState4=_slicedToArray(_useState3,2),parkingZoneContent=_useState4[0],setParkingZoneContent=_useState4[1];// håller content för onClick\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),parkingZoneError=_useState6[0],setParkingZoneError=_useState6[1];// håller content för onClick\n// funktion som togglar state, från andra komponenter\nvar showInfoForParkingZone=function showInfoForParkingZone(trueOrFalse){setParkingZoneContent({showParkingZone:trueOrFalse});};//körs vid mount och förändring av prop om poly för städer ska visas = hämtar,\n// annars tar bort med removeCitysFromMap\nuseEffect(function(){/* \n        Tar emot res från getData. Loopar igenom. Skapar poly av\n        alla koordinater som tillhör städer. Lägger på onclickevent.\n        Sparar objekten i state, så de senare kan tas bort.\n        */var handleSucces=function handleSucces(res){var parkingZoneName;var map=mapRef.current.map;var maps=mapRef.current.maps;res.forEach(function(cityCoords){cityCoords.parking_zones.forEach(function(parking_zone){var polyGon=[parking_zone.position.polygonePart1,parking_zone.position.polygonePart2,parking_zone.position.polygonePart3,parking_zone.position.polygonePart4];parkingZoneName=new maps.Polygon({paths:polyGon,strokeColor:parking_zone.color,strokeOpacity:0.9,strokeWeight:2,fillColor:\"transparent\",fillOpacity:0.35});parkingZoneName.addListener('click',function(){setParkingZoneContent(function(prevState){return{showParkingZone:!prevState.showParkingZone,loadParkingZone:parking_zone};});});parkingZoneName.setMap(map);var holdArr=parkingZoneObject;holdArr.push(parkingZoneName);setParkingZoneObject(holdArr);});});};// tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\nfunction removeParkingZonesFromMap(){parkingZoneObject!==null&&parkingZoneObject.forEach(function(parkingZone){parkingZone.setMap(null);});}var getData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setParkingZoneError(false);_context.next=4;return Api.getAllCitys();case 4:res=_context.sent;handleSucces(res);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);setParkingZoneError(true);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getData(){return _ref2.apply(this,arguments);};}();if(ifToShowParkingZone.loadParkingZone){getData();var interval=setInterval(function(){getData();},10000);return function(){return clearInterval(interval);};}ifToShowParkingZone.loadParkingZone===false&&removeParkingZonesFromMap();},[ifToShowParkingZone.loadParkingZone,parkingZoneObject,mapRef]);return{parkingZoneObject:parkingZoneObject,parkingZoneContent:parkingZoneContent,parkingZoneError:parkingZoneError,showInfoForParkingZone:showInfoForParkingZone};};export default useDisplayPolyParkZone;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useDisplayPolyParkZone.js"],"names":["useState","useEffect","Api","initalValue","showParkingZone","loadParkingZone","useDisplayPolyParkZone","mapRef","ifToShowParkingZone","parkingZoneObject","setParkingZoneObject","parkingZoneContent","setParkingZoneContent","parkingZoneError","setParkingZoneError","showInfoForParkingZone","trueOrFalse","handleSucces","res","parkingZoneName","map","current","maps","forEach","cityCoords","parking_zones","parking_zone","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","color","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","prevState","setMap","holdArr","push","removeParkingZonesFromMap","parkingZone","getData","getAllCitys","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../Api';\n\nlet initalValue = {\n\tshowParkingZone: false,\n\tloadParkingZone: []\n}\n\n/* Skapar polygons för städer, tar emot mapRef som är objektet för kartan.\n   Samt props för att se om polys för map ska tas bort/läggas till på kartan.\n*/\nconst useDisplayPolyParkZone = (mapRef, {ifToShowParkingZone}) => {\n    const[parkingZoneObject, setParkingZoneObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[parkingZoneContent, setParkingZoneContent] = useState(initalValue); // håller content för onClick\n    const[parkingZoneError, setParkingZoneError] = useState(false); // håller content för onClick\n    \n    // funktion som togglar state, från andra komponenter\n    const showInfoForParkingZone = (trueOrFalse) => {\n        setParkingZoneContent({ showParkingZone: trueOrFalse});\n    }\n\n    //körs vid mount och förändring av prop om poly för städer ska visas = hämtar,\n    // annars tar bort med removeCitysFromMap\n    useEffect(() => {\n        /* \n        Tar emot res från getData. Loopar igenom. Skapar poly av\n        alla koordinater som tillhör städer. Lägger på onclickevent.\n        Sparar objekten i state, så de senare kan tas bort.\n        */\n        const handleSucces = (res) => {\n            var parkingZoneName;\n            const map = mapRef.current.map;\n            const maps = mapRef.current.maps;\n        \n            res.forEach(cityCoords => {\n                cityCoords.parking_zones.forEach(parking_zone => {         \n                    let polyGon = \n                        ([\n                            parking_zone.position.polygonePart1,\n                            parking_zone.position.polygonePart2,\n                            parking_zone.position.polygonePart3,\n                            parking_zone.position.polygonePart4,\n                        ]);\n                    parkingZoneName = new maps.Polygon({\n                        paths: polyGon,\n                        strokeColor: parking_zone.color,\n                        strokeOpacity: 0.9,\n                        strokeWeight: 2,\n                        fillColor: \"transparent\",\n                        fillOpacity: 0.35,\n                        });\n                    \n                    parkingZoneName.addListener('click', () => {\n                        setParkingZoneContent(prevState => ({\n                            showParkingZone: !prevState.showParkingZone,\n                            loadParkingZone: parking_zone\n                        }));\n                    });\n                parkingZoneName.setMap(map);\n                var holdArr = parkingZoneObject;\n                holdArr.push(parkingZoneName);\n                setParkingZoneObject(holdArr);\n        \n                })\n        \n            })\n        };\n\n        // tar bort poly för parkeringszoner från kartan genom att sätta mapobj för alla polys till null\n        function removeParkingZonesFromMap() { \n            parkingZoneObject !== null && parkingZoneObject.forEach(parkingZone => {\n                parkingZone.setMap(null);\n            })\n        }\n\n        const getData = async () => {\n            try {\n                setParkingZoneError(false)\n                let res = await Api.getAllCitys();\n                handleSucces(res);\n            } catch (error) {\n                setParkingZoneError(true)\n            }\n        }\n\n        if(ifToShowParkingZone.loadParkingZone) {\n            getData()\n            const interval=setInterval(()=>{\n                getData()\n            }, 10000)\n            return()=>clearInterval(interval)\n        }\n        ifToShowParkingZone.loadParkingZone === false && removeParkingZonesFromMap();\n    }, [ifToShowParkingZone.loadParkingZone, parkingZoneObject, mapRef])\n    \n    return {parkingZoneObject, parkingZoneContent, parkingZoneError, showInfoForParkingZone};\n};\nexport default useDisplayPolyParkZone;\n\n"]},"metadata":{},"sourceType":"module"}