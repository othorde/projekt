{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Payment\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect, useContext } from \"react\"; //components\n\nimport Api from \"../../Api.js\";\nimport AppContext from \"../../AppContext\"; //styles\n\nimport { Content, Delimiter, StylePayment } from \"./Form.styles.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  showMsg: false,\n  msg: \"\"\n};\n/* Denna komponent används på två ställen,\n   hantera kunder och konto.\n   Tar props för att hämta info om användare\n*/\n\nconst Payment = _ref => {\n  _s();\n\n  let {\n    customer,\n    userDetails\n  } = _ref;\n  const [msgForUser, setMsgForUser] = useState(initialValue);\n  const [onePayment, setOnePayment] = useState(0);\n  const [adminOrNot, setAdminOrNot] = useState(false); // Om det är admin som ska ändra eller ej\n\n  const myContext = useContext(AppContext);\n  /* Om det är admin som ska göra justeringen på saldot */\n\n  useEffect(() => {\n    customer && setAdminOrNot(true);\n  }, [customer]);\n  /* När användaren/admin klickar på uppdatera Nytt saldo/Ändra saldo \n     Kollar om state är satt dvs vilket belopp som ska sättas in/ändras till.\n     Om admin ändrar blir det det belopp man skriver in.\n     Om användaren sätter in blir det belopp man har plus insättningen\n  */\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let showMsg = false;\n    let msg = \"\";\n    let result;\n    let id;\n    let currentBalance;\n    let newBalance;\n\n    if (onePayment) {\n      if (adminOrNot) {\n        id = customer.id;\n        newBalance = onePayment;\n      } else {\n        //Annars måste det vara en användare\n        id = userDetails.data._id;\n        currentBalance = userDetails.data.balance;\n        newBalance = parseInt(currentBalance) + parseInt(onePayment);\n      }\n      /* Uppdaterar användarens kontobalans */\n\n\n      try {\n        showMsg = true;\n        console.log(myContext);\n        let token = myContext.userHook.user.token;\n        console.log(token);\n        result = await Api.updateUserFunds(newBalance, id, token);\n\n        if (result === true) {\n          msg = adminOrNot ? \"Saldot är justerat\" : \"Din insättning har gått igenom\";\n        }\n      } catch (error) {\n        console.log(error);\n        msg = \"Något gick fel. Beror på servern.\";\n      }\n    }\n\n    setMsgForUser({\n      showMsg: showMsg,\n      msg: msg\n    });\n    setOnePayment(0); // nollställer\n  };\n  /* Tennary operator används för att justera texten beroende på vem det är som ska göra förändringen */\n\n\n  return /*#__PURE__*/_jsxDEV(Content, {\n    children: /*#__PURE__*/_jsxDEV(StylePayment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"payment-element\",\n        children: [\" \", msgForUser.showMsg ? /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"payment-element\",\n          children: msgForUser.msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 75\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", adminOrNot ? `VARNING! \\n Du justerar kunds saldo` : \"Sätt in valfritt belopp \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 132\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: adminOrNot ? \"Nytt saldo\" : \"Belopp att sätta in\",\n            type: \"number\",\n            name: \"onepayment\",\n            required: true,\n            value: onePayment || \"\",\n            onChange: e => setOnePayment(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Delimiter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: adminOrNot ? \"Ändra saldo\" : \"Sätt in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Payment, \"nwy3t/mL1wFzn7hZB2tCFslQ3uI=\");\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Payment/index.js"],"names":["React","useState","useEffect","useContext","Api","AppContext","Content","Delimiter","StylePayment","initialValue","showMsg","msg","Payment","customer","userDetails","msgForUser","setMsgForUser","onePayment","setOnePayment","adminOrNot","setAdminOrNot","myContext","handleSubmit","event","preventDefault","result","id","currentBalance","newBalance","data","_id","balance","parseInt","console","log","token","userHook","user","updateUserFunds","error","e","target","value"],"mappings":"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","sourcesContent":["import {React, useState, useEffect, useContext} from \"react\";\n//components\nimport Api from \"../../Api.js\";\nimport AppContext from \"../../AppContext\";\n//styles\nimport { Content, Delimiter, StylePayment} from \"./Form.styles.js\";\n\nconst initialValue = {\n    showMsg: false,\n    msg: \"\"\n}\n\n/* Denna komponent används på två ställen,\n   hantera kunder och konto.\n   Tar props för att hämta info om användare\n*/\nconst Payment = ({customer, userDetails}) => {\n    const [msgForUser, setMsgForUser] = useState(initialValue);\n    const [onePayment, setOnePayment] = useState(0);\n    const [adminOrNot, setAdminOrNot] = useState(false); // Om det är admin som ska ändra eller ej\n    const myContext = useContext(AppContext);\n    /* Om det är admin som ska göra justeringen på saldot */\n    useEffect(() => { \n        customer && setAdminOrNot(true)\n    }, [customer])\n\n\n    /* När användaren/admin klickar på uppdatera Nytt saldo/Ändra saldo \n       Kollar om state är satt dvs vilket belopp som ska sättas in/ändras till.\n       Om admin ändrar blir det det belopp man skriver in.\n       Om användaren sätter in blir det belopp man har plus insättningen\n    */\n    const handleSubmit = async (event)  => {\n        event.preventDefault();\n        let showMsg = false;\n        let msg = \"\";\n        let result;\n        let id;\n        let currentBalance;\n        let newBalance;\n\n        if (onePayment) { \n            if(adminOrNot) { \n                id = customer.id; \n                newBalance = onePayment;\n            } else { //Annars måste det vara en användare\n                id = userDetails.data._id;\n                currentBalance = userDetails.data.balance;\n                newBalance = parseInt(currentBalance) + parseInt(onePayment); \n            }\n            /* Uppdaterar användarens kontobalans */\n            try {\n                showMsg = true;\n                console.log(myContext)\n                let token = myContext.userHook.user.token;\n                console.log(token)\n                result = await Api.updateUserFunds(newBalance, id, token);\n                if(result === true) {\n                    msg = adminOrNot ? \"Saldot är justerat\" : \"Din insättning har gått igenom\";\n                }\n            } catch (error) {\n                console.log(error)\n                msg = \"Något gick fel. Beror på servern.\";\n            }\n        } \n        setMsgForUser({ \n            showMsg: showMsg,\n            msg: msg,\n        })\n        setOnePayment(0); // nollställer\n    }\n\n    /* Tennary operator används för att justera texten beroende på vem det är som ska göra förändringen */\n\treturn (\n        <Content>\n            <StylePayment>\n                <div data-testid=\"payment-element\"> {msgForUser.showMsg ? <p data-testid=\"payment-element\">{msgForUser.msg}</p> : (<p > {adminOrNot ? (`VARNING! \\n Du justerar kunds saldo`) : (\"Sätt in valfritt belopp \")}</p>)}</div>\n            <form onSubmit={handleSubmit} className = \"register\">\n                <label>\n                <input\n                    placeholder={adminOrNot ? (\"Nytt saldo\") : (\"Belopp att sätta in\")}\n                    type=\"number\" \n                    name=\"onepayment\"\n                    required\n                    value={onePayment || \"\"} \n                    onChange={(e) => setOnePayment(e.target.value)}\n                />\n                </label>\n                <Delimiter></Delimiter>\n                <input type=\"submit\" value={adminOrNot ? (\"Ändra saldo\") : (\"Sätt in\")} />\n            </form>\n            </StylePayment>\n        </Content>\n\t);\n}\n\nexport default Payment\n\n"]},"metadata":{},"sourceType":"module"}