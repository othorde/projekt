{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Map\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //googlemap\n\nimport GoogleMapReact from \"google-map-react\"; //components\n\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\";\nimport Api from \"../../api\"; //styles & img\n\nimport { Style } from './Form.styles';\nimport bikeimg from '../../images/bike.png';\nimport personimg from '../../images/person.png'; // options till userLocation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 1000 * 60 * 1,\n  // 1 min\n  maximumAge: 1000 * 60 * 60 // 1 hour\n\n};\nlet initalValuePopUp = {\n  showBike: false,\n  showCity: false,\n  showLocation: false,\n  content: []\n};\nexport default function MapContainer(props) {\n  _s();\n\n  const {\n    location,\n    err\n  } = useCurrentLocation(options);\n  const mapRef = useRef();\n  const [citysObject, setCitysObject] = useState([]);\n  const showBikesOrNot = props.bikes.getbike;\n  var bikeArray = props.bikes.content;\n  bikeArray = bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\n  const [popupInfo, setPopupInfo] = useState(initalValuePopUp);\n\n  const Marker = _ref => {\n    let {\n      children\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 35\n    }, this);\n  };\n\n  useEffect(() => {\n    if (props.ifToShowCity.loadCity === true) {\n      loadCitysToMap(mapRef.current);\n    } else {\n      removeCitysFromMap(mapRef.current);\n    }\n  }, [props.ifToShowCity.loadCity]);\n\n  function removeCitysFromMap() {\n    if (citysObject !== undefined) {\n      citysObject.map(city => {\n        city.setMap(null);\n      });\n    }\n  }\n\n  async function loadCitysToMap(mapRef) {\n    try {\n      let res = await Api.getAllCitys();\n\n      if (res !== null && mapRef.current !== null) {\n        console.log(props);\n        var cityname;\n        const map = mapRef.map;\n        const maps = mapRef.maps;\n        res.map(city => {\n          cityname = city.city;\n          const {\n            part1lng\n          } = city.position.polygonePart1.long;\n          const {\n            part1lat\n          } = city.position.polygonePart1.lat;\n          const {\n            part2lng\n          } = city.position.polygonePart2.long;\n          const {\n            part2lat\n          } = city.position.polygonePart2.lat;\n          const {\n            part3lng\n          } = city.position.polygonePart3.long;\n          const {\n            part3lat\n          } = city.position.polygonePart3.lat;\n          const {\n            part4lng\n          } = city.position.polygonePart4.long;\n          const {\n            part4lat\n          } = city.position.polygonePart4.lat;\n          console.log(part1lat);\n          let polyGon = [parseFloat({\n            part1lng,\n            part1lat\n          }), parseFloat({\n            part2lng,\n            part2lat\n          }), parseFloat({\n            part3lng,\n            part3lat\n          }), parseFloat({\n            part4lng,\n            part4lat\n          })];\n          cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35\n          });\n          cityname.addListener('click', event => {\n            setPopupInfo({\n              showBike: false,\n              showCity: true,\n              showLocation: false,\n              content: city\n            });\n          });\n          cityname.setMap(map);\n          setCitysObject(oldArray => [...oldArray, cityname]);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Style, {\n    children: [location ? /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      },\n      defaultCenter: {\n        lat: location.latitude,\n        lng: location.longitude\n      },\n      defaultZoom: 10,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: _ref2 => {\n        let {\n          map,\n          maps\n        } = _ref2;\n        mapRef.current = {\n          map,\n          maps\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        lat: location.latitude,\n        lng: location.longitude,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"crime-marker\",\n            src: personimg,\n            alt: \"person\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 5\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 4\n      }, this), showBikesOrNot ? bikeArray.map(bike => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: bike.location.latitude,\n          lng: bike.location.longitude,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setPopupInfo({\n              showBike: true,\n              showCity: false,\n              showLocation: false,\n              content: bike\n            }),\n            className: \"crime-marker\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"scooter\",\n              src: bikeimg,\n              alt: \"scooter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 5\n          }, this)\n        }, bike.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 4\n        }, this);\n      }) : console.log(\"HE\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), popupInfo ? /*#__PURE__*/_jsxDEV(PopUp, {\n      store: popupInfo\n    }, \"popupkey\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 4\n    }, this) : console.log(\"EJ POPUP\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MapContainer, \"ZMv5hpq4jdBOBQ5w8pJ/Qi+xok8=\", false, function () {\n  return [useCurrentLocation];\n});\n\n_c = MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/index.js"],"names":["React","useEffect","useState","useRef","GoogleMapReact","useCurrentLocation","PopUp","LoadCitys","Api","Style","bikeimg","personimg","options","enableHighAccuracy","timeout","maximumAge","initalValuePopUp","showBike","showCity","showLocation","content","MapContainer","props","location","err","mapRef","citysObject","setCitysObject","showBikesOrNot","bikes","getbike","bikeArray","slice","popupInfo","setPopupInfo","Marker","children","ifToShowCity","loadCity","loadCitysToMap","current","removeCitysFromMap","undefined","map","city","setMap","res","getAllCitys","console","log","cityname","maps","part1lng","position","polygonePart1","long","part1lat","lat","part2lng","polygonePart2","part2lat","part3lng","polygonePart3","part3lat","part4lng","polygonePart4","part4lat","polyGon","parseFloat","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","oldArray","error","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","latitude","lng","longitude","bike","id"],"mappings":"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","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n//googlemap\nimport GoogleMapReact from \"google-map-react\";\n//components\nimport useCurrentLocation from \"../../Hooks/currentPosition\";\nimport PopUp from \"./popup\";\nimport LoadCitys from \"./helperFunctions/loadCitys\"\nimport Api from \"../../api\";\n//styles & img\nimport {Style} from './Form.styles'\nimport bikeimg from '../../images/bike.png'\nimport personimg from '../../images/person.png'\n\n\n// options till userLocation\nconst options = {\n\tenableHighAccuracy: true,\n\ttimeout: 1000 * 60 * 1, // 1 min\n\tmaximumAge: 1000 * 60 * 60, // 1 hour\n};\n\n\nlet initalValuePopUp = {\n\tshowBike: false,\n\tshowCity: false,\n\tshowLocation: false,\n\tcontent: []\n};\n\nexport default function MapContainer(props) {\n\tconst { location, err } = useCurrentLocation(options);\n\tconst mapRef = useRef();\n\tconst [citysObject, setCitysObject] = useState([]);\n\tconst showBikesOrNot = props.bikes.getbike;\n\tvar bikeArray = props.bikes.content;\n\tbikeArray =  bikeArray.slice(0, 200); // innan jag fixar med cluster max 200\n\tconst [popupInfo , setPopupInfo] = useState(initalValuePopUp);\n\tconst Marker = ({ children }) => <div>{children}</div>;\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ifToShowCity.loadCity === true) {\n\t\t\tloadCitysToMap(mapRef.current) \n\t\t} else {\n\t\t\tremoveCitysFromMap(mapRef.current)\n\t\t}\n\t}, [props.ifToShowCity.loadCity])\n\n\tfunction removeCitysFromMap() {\n\t\tif (citysObject !== undefined) {\n\t\t\tcitysObject.map(city => {\n\t\t\t\tcity.setMap(null)\n\t\t\t})\n\t\t}\n\t}\n\n\tasync function loadCitysToMap(mapRef) {\n\t\ttry {\n            let res = await Api.getAllCitys();\n\t\t\tif (res !== null && mapRef.current !== null) {\n\t\t\t\tconsole.log(props)\n\n\t\t\t\tvar cityname;\n\t\t\t\tconst map = mapRef.map;\n\t\t\t\tconst maps = mapRef.maps;\n\n\t\t\t\tres.map(city => {\n\t\t\t\t\tcityname = city.city\n\n\t\t\t\t\tconst { part1lng } = city.position.polygonePart1.long;\n\t\t\t\t\tconst { part1lat } = city.position.polygonePart1.lat;\n\t\t\t\t\tconst { part2lng } = city.position.polygonePart2.long;\n\t\t\t\t\tconst { part2lat } = city.position.polygonePart2.lat;\n\t\t\t\t\tconst { part3lng } = city.position.polygonePart3.long;\n\t\t\t\t\tconst { part3lat } = city.position.polygonePart3.lat;\n\t\t\t\t\tconst { part4lng } = city.position.polygonePart4.long;\n\t\t\t\t\tconst { part4lat } = city.position.polygonePart4.lat;\n\t\t\t\t\tconsole.log(part1lat)\n\t\t\t\t\tlet polyGon = \n\t\t\t\t\t\t([(parseFloat({ part1lng, part1lat })),\n\t\t\t\t\t\t\t(parseFloat({ part2lng, part2lat })),\n\t\t\t\t\t\t\t(parseFloat({ part3lng, part3lat })),\n\t\t\t\t\t\t\t(parseFloat({ part4lng, part4lat }))\n\t\t\t\t\t\t]);\n\t\t\t\t\tcityname = new maps.Polygon({\n\t\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\t\tstrokeColor: \"#FF0000\",\n\t\t\t\t\t\tstrokeOpacity: 0.9,\n\t\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\t\tfillColor: \"transparent\",\n\t\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcityname.addListener('click', (event) => {\n\t\t\t\t\t\tsetPopupInfo({\t\n\t\t\t\t\t\t\tshowBike: false,\n\t\t\t\t\t\t\tshowCity: true,\n\t\t\t\t\t\t\tshowLocation: false,\n\t\t\t\t\t\t\tcontent: city\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t\tcityname.setMap(map);\n\n\n\t\t\t\t\tsetCitysObject(oldArray => [...oldArray, cityname]);\n\t\t\t\t\t})\n\t\t\t\t}\n\n        } catch (error) {\n\t\t\tconsole.log(error)\n        }\n\t}\n\n\treturn (\n\t\t<Style>\n\t\t\t{/* \t\tKARTA\t\t */}\n\t\t\t{location ? (\n\t\t\t<GoogleMapReact \n\t\t\t\tbootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY}}\n\t\t\t\tdefaultCenter={{ lat: location.latitude, lng: location.longitude}}\n\t\t\t\tdefaultZoom={10}\n\t\t\t\tyesIWantToUseGoogleMapApiInternals\n\t\t\t\tonGoogleApiLoaded= {({map, maps}) => {\n\t\t\t\t\tmapRef.current = {map, maps};\n\t\t\t\t}}\n\t\t\t>\n\t\t\t{/* \t\t1 Person \t\t*/}\n\t\t\t<Marker \n\t\t\t\tkey={1} \n\t\t\t\tlat={location.latitude} \n\t\t\t\tlng={location.longitude}\n\t\t\t\t>\n\t\t\t\t<div >\n\t\t\t\t\t<img className = \"crime-marker\" src={personimg} alt=\"person\" />\n\t\t\t\t</div>\t\n\t\t\t</Marker>\n\t\t\t{/* \t\tAlla cyklar\t\t */}\n\t\t\t{showBikesOrNot ? (\n\t\t\tbikeArray.map(bike => {\n\t\t\treturn (\n\t\t\t<Marker \n\t\t\t\tkey={bike.id} \n\t\t\t\tlat={bike.location.latitude} \n\t\t\t\tlng={bike.location.longitude}\n\t\t\t\t>\n\t\t\t\t<div onClick={() => setPopupInfo({\n\t\t\t\t\tshowBike: true,\n\t\t\t\t\tshowCity: false,\n\t\t\t\t\tshowLocation: false,\n\t\t\t\t\tcontent: bike\n\t\t\t\t\t})}className=\"crime-marker\">\n\t\t\t\t<img className = \"scooter\" src={bikeimg} alt=\"scooter\"/>\n\t\t\t\t</div>\n\t\t\t</Marker>)\n\t\t\t})\n\t\t\t) : (console.log(\"HE\"))}\n\n\n\t\t\t</GoogleMapReact>\n\t\t\t):(<p>Loading...</p> )}\n\n\t\t\t{/*\t\t\t\t POPUP\t\t\t\t */}\n\t\t\t{popupInfo ? (\n\t\t\t<PopUp\n\t\t\t\tkey={\"popupkey\"}\n\t\t\t\tstore={popupInfo} \n\t\t\t\t>\n\t\t\t</PopUp>\n\t\t\t): (console.log(\"EJ POPUP\"))}\n\t\t</Style>\n\t);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}