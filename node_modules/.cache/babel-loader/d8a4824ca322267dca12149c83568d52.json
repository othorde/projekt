{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Invoice\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\"; //components\n\nimport Api from '../../api'; //styles & img\n\nimport { Container } from './Form.styles'; //other\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar pointInPolygon = require('point-in-polygon');\n\nconst userInvoiceInitialValue = {\n  tripId: \"\",\n  endedAtChargePoint: \"\",\n  endedAtLoadStation: \"\",\n  timeOfTrip: \"\",\n  startFee: 10,\n  discountStartFee: \"\",\n  fromFreePark2Defined: \"\"\n};\nexport default function Invoice(props) {\n  _s();\n\n  //hooks\n  // måste ha resan och koordinaterna\n  // måste senare räkna ut var koordinaterna ligger och jmföra\n  const [allCharging_posts, setAllCharging_posts] = useState([]); //parkering och laddstationer\n\n  const [allParkingZones, setAllParkingZones] = useState([]);\n  const [userTrips, setUserTrips] = useState([]);\n  const [userInvoice, setUserInvoice] = useState([userInvoiceInitialValue]);\n  /* Sparara alla ladda och parkeringszoner i state */\n\n  useEffect(() => {\n    const getAllCities = async () => {\n      let allCities = await Api.getAllCitys();\n      allCities.forEach(element => {\n        setAllCharging_posts(element.charging_posts);\n        setAllParkingZones(element.parking_zones);\n      });\n    };\n\n    getAllCities();\n    setUserTrips(props);\n  }, [props]);\n\n  function checkAllUsersTrips() {\n    let arrayOfTrips = [];\n    userTrips.props.forEach(trip => {\n      console.log(trip);\n      var tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n      const atrip = {\n        tripId: trip.id,\n        endedAtChargePoint: checkIfTripEndedAtChargingPost(tripEnded),\n        endedAtParkingZone: checkIfTripEndedAtParkingZone(tripEnded),\n        timeOfTrip: \"\",\n        startFee: 10,\n        timeFee: \"\",\n        discountStartFee: \"\"\n      };\n      arrayOfTrips.push(atrip);\n    });\n    setUserInvoice(arrayOfTrips);\n  }\n  /* Kollar om resan slutade i en parkeringszon */\n\n\n  function checkIfTripEndedAtParkingZone(tripEnded) {\n    let res;\n\n    for (var elem of allParkingZones) {\n      let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n      res = checkIfPointInPolyGon(tripEnded, polyGon);\n      return res;\n    }\n  }\n\n  function checkIfTripEndedAtChargingPost(tripEnded) {\n    let res;\n\n    for (var elem of allCharging_posts) {\n      let polyGon = [[elem.position.polygonePart1.lat, elem.position.polygonePart1.lng], [elem.position.polygonePart2.lat, elem.position.polygonePart2.lng], [elem.position.polygonePart3.lat, elem.position.polygonePart3.lng], [elem.position.polygonePart4.lat, elem.position.polygonePart4.lng]];\n      res = checkIfPointInPolyGon(tripEnded, polyGon);\n      console.log(res);\n    }\n  }\n\n  function checkIfPointInPolyGon(point, polygone) {\n    console.log(allCharging_posts);\n    point = [59.311632, 18.074596];\n    return pointInPolygon(point, polygone);\n  }\n\n  async function calculateCost() {\n    checkAllUsersTrips();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: calculateCost,\n    children: \"Faktura\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Invoice, \"T3Qm/KWOkE+ohdeV589GLCKLJtg=\");\n\n_c = Invoice;\n\nvar _c;\n\n$RefreshReg$(_c, \"Invoice\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Invoice/index.js"],"names":["React","useEffect","useState","Api","Container","pointInPolygon","require","userInvoiceInitialValue","tripId","endedAtChargePoint","endedAtLoadStation","timeOfTrip","startFee","discountStartFee","fromFreePark2Defined","Invoice","props","allCharging_posts","setAllCharging_posts","allParkingZones","setAllParkingZones","userTrips","setUserTrips","userInvoice","setUserInvoice","getAllCities","allCities","getAllCitys","forEach","element","charging_posts","parking_zones","checkAllUsersTrips","arrayOfTrips","trip","console","log","tripEnded","stop","position","lat","lng","atrip","id","checkIfTripEndedAtChargingPost","endedAtParkingZone","checkIfTripEndedAtParkingZone","timeFee","push","res","elem","polyGon","polygonePart1","polygonePart2","polygonePart3","polygonePart4","checkIfPointInPolyGon","point","polygone","calculateCost"],"mappings":"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","sourcesContent":["import {React, useEffect, useState } from \"react\";\n\n//components\nimport Api from '../../api'\n//styles & img\nimport {Container} from './Form.styles'\n//other\nvar pointInPolygon = require('point-in-polygon');\n\n\nconst userInvoiceInitialValue = {\n    tripId: \"\",\n    endedAtChargePoint: \"\",\n    endedAtLoadStation: \"\",\n    timeOfTrip: \"\",\n    startFee: 10,\n    discountStartFee: \"\",\n    fromFreePark2Defined: \"\"\n}\n\n\nexport default function Invoice(props) {\n\t//hooks\n    // måste ha resan och koordinaterna\n    // måste senare räkna ut var koordinaterna ligger och jmföra\n\n    const [allCharging_posts, setAllCharging_posts] = useState([]) //parkering och laddstationer\n    const [allParkingZones, setAllParkingZones] = useState([])\n    const [userTrips, setUserTrips] = useState([]);\n    const [userInvoice, setUserInvoice] = useState([userInvoiceInitialValue])\n    /* Sparara alla ladda och parkeringszoner i state */\n \n\n    useEffect(() => {\n        const getAllCities = async () => {\n\n        let allCities = await Api.getAllCitys();\n        allCities.forEach(element => {\n            setAllCharging_posts(element.charging_posts)\n            setAllParkingZones(element.parking_zones)\n            });\n        }\n        getAllCities()\n        setUserTrips(props)\n        \n    }, [props])\n\n\n    function checkAllUsersTrips() {\n        let arrayOfTrips = []\n\n        userTrips.props.forEach(trip => {\n            console.log(trip)\n            var tripEnded = [trip.stop.position.lat, trip.stop.position.lng];\n\n            const atrip = { \n\t\t\t\ttripId: trip.id,\n                endedAtChargePoint: checkIfTripEndedAtChargingPost(tripEnded),\n                endedAtParkingZone: checkIfTripEndedAtParkingZone(tripEnded),\n                timeOfTrip: \"\",\n                startFee: 10,\n                timeFee: \"\",\n                discountStartFee: \"\",\n            }\n            arrayOfTrips.push(atrip);\n        })\n        setUserInvoice(arrayOfTrips)\n    }\n\n    \n    /* Kollar om resan slutade i en parkeringszon */\n    function checkIfTripEndedAtParkingZone(tripEnded) {\n        let res;\n        for (var elem of allParkingZones) {\n            let polyGon = [\n                [elem.position.polygonePart1.lat,\n                elem.position.polygonePart1.lng],\n                [elem.position.polygonePart2.lat,\n                elem.position.polygonePart2.lng],\n                [elem.position.polygonePart3.lat,\n                elem.position.polygonePart3.lng],\n                [elem.position.polygonePart4.lat,\n                elem.position.polygonePart4.lng]\n            ]\n            res = checkIfPointInPolyGon(tripEnded, polyGon);\n\n            return res\n       }\n       \n    }\n\n    function checkIfTripEndedAtChargingPost(tripEnded) {\n        let res;\n        for (var elem of allCharging_posts) {\n            let polyGon = [\n                [elem.position.polygonePart1.lat,\n                elem.position.polygonePart1.lng],\n                [elem.position.polygonePart2.lat,\n                elem.position.polygonePart2.lng],\n                [elem.position.polygonePart3.lat,\n                elem.position.polygonePart3.lng],\n                [elem.position.polygonePart4.lat,\n                elem.position.polygonePart4.lng]\n            ]\n            res = checkIfPointInPolyGon(tripEnded, polyGon);\n            console.log(res)\n\n       } \n    }\n\n\n    function checkIfPointInPolyGon(point, polygone) {\n        console.log(allCharging_posts)\n\n        point = [59.311632, 18.074596]\n        return pointInPolygon(point, polygone);\n    }\n\n    async function calculateCost() { \n        checkAllUsersTrips()\n    }\n\n\treturn (\n        <button onClick={calculateCost}>Faktura</button>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}