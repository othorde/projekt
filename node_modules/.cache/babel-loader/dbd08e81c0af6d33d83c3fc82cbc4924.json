{"ast":null,"code":"// const handleApiLoaded = (map, maps) => {\n// \tconst triangleCoords = [\n// \t  { lat: 56.012562, lng: 14.115424 }, // kstad\n// \t  { lat: 55.925155, lng: 14.073078 },\n// \t  { lat: 55.931968, lng:  14.289134 },\n// \t  { lat: 56.037256, lng: 14.306297 }\n// \t];\n// \t var bermudaTriangle = new maps.Polygon({\n// \t  paths: triangleCoords,\n// \t  strokeColor: \"#FF0000\",\n// \t  strokeOpacity: 0.8,\n// \t  strokeWeight: 2,\n// \t  fillColor: \"#FF0000\",\n// \t  fillOpacity: 0.35\n// \t});\n// \tbermudaTriangle.setMap(map);\n// }\nconst handleApiLoaded = (mapRef, props) => {\n  if (props.content.length > 0 && mapRef.map !== null) {\n    let arrayOfAreas = [];\n    var area;\n    const map = mapRef.map;\n    const maps = mapRef.maps;\n    props.content.map(coords => {\n      let polyGon = [coords.position.polygonePart1, coords.position.polygonePart2, coords.position.polygonePart3, coords.position.polygonePart4];\n      area = new maps.Polygon({\n        paths: polyGon,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35\n      });\n\n      if (props.getStations === false) {\n        areas.setMap(null);\n      } else {\n        area.setMap(map);\n        arrayOfAreas.push(area);\n      }\n    });\n  }\n};\n\nexport default handleApiLoaded; //  fungerar som REACt component till kartan\n// import React from \"react\";\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n// export default PopUp;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Map/helperFunctions/loadingStations.js"],"names":["handleApiLoaded","mapRef","props","content","length","map","arrayOfAreas","area","maps","coords","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","getStations","areas","setMap","push"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMA,eAAe,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAE1C,MAAIA,KAAK,CAACC,OAAN,CAAcC,MAAd,GAAuB,CAAvB,IAA4BH,MAAM,CAACI,GAAP,KAAe,IAA/C,EAAqD;AACpD,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,IAAJ;AACA,UAAMF,GAAG,GAAGJ,MAAM,CAACI,GAAnB;AACA,UAAMG,IAAI,GAAGP,MAAM,CAACO,IAApB;AACCN,IAAAA,KAAK,CAACC,OAAN,CAAcE,GAAd,CAAkBI,MAAM,IACvB;AACA,UAAIC,OAAO,GACT,CAACD,MAAM,CAACE,QAAP,CAAgBC,aAAjB,EACAH,MAAM,CAACE,QAAP,CAAgBE,aADhB,EAEAJ,MAAM,CAACE,QAAP,CAAgBG,aAFhB,EAGAL,MAAM,CAACE,QAAP,CAAgBI,aAHhB,CADF;AAOCR,MAAAA,IAAI,GAAG,IAAIC,IAAI,CAACQ,OAAT,CAAiB;AACxBC,QAAAA,KAAK,EAAEP,OADiB;AAExBQ,QAAAA,WAAW,EAAE,SAFW;AAGxBC,QAAAA,aAAa,EAAE,GAHS;AAIxBC,QAAAA,YAAY,EAAE,CAJU;AAKxBC,QAAAA,SAAS,EAAE,SALa;AAMxBC,QAAAA,WAAW,EAAE;AANW,OAAjB,CAAP;;AAQA,UAAGpB,KAAK,CAACqB,WAAN,KAAsB,KAAzB,EAAgC;AAE/BC,QAAAA,KAAK,CAACC,MAAN,CAAa,IAAb;AAEA,OAJD,MAIO;AACNlB,QAAAA,IAAI,CAACkB,MAAL,CAAYpB,GAAZ;AACAC,QAAAA,YAAY,CAACoB,IAAb,CAAkBnB,IAAlB;AACA;AACF,KAzBD;AA0BA;AAIF,CArCD;;AAuCA,eAAeP,eAAf,C,CAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["\n// const handleApiLoaded = (map, maps) => {\n// \tconst triangleCoords = [\n// \t  { lat: 56.012562, lng: 14.115424 }, // kstad\n// \t  { lat: 55.925155, lng: 14.073078 },\n// \t  { lat: 55.931968, lng:  14.289134 },\n// \t  { lat: 56.037256, lng: 14.306297 }\n// \t];\n  \n// \t var bermudaTriangle = new maps.Polygon({\n// \t  paths: triangleCoords,\n// \t  strokeColor: \"#FF0000\",\n// \t  strokeOpacity: 0.8,\n// \t  strokeWeight: 2,\n// \t  fillColor: \"#FF0000\",\n// \t  fillOpacity: 0.35\n// \t});\n// \tbermudaTriangle.setMap(map);\n// }\n\n\nconst handleApiLoaded = (mapRef, props) => {\n\n\tif (props.content.length > 0 && mapRef.map !== null) {\n\t\tlet arrayOfAreas = []\n\t\tvar area;\n\t\tconst map = mapRef.map;\n\t\tconst maps = mapRef.maps;\n\t\t\tprops.content.map(coords => \n\t\t\t\t{\n\t\t\t\tlet polyGon = \n\t\t\t\t\t([coords.position.polygonePart1,\n\t\t\t\t\t\tcoords.position.polygonePart2,\n\t\t\t\t\t\tcoords.position.polygonePart3,\n\t\t\t\t\t\tcoords.position.polygonePart4\n\t\t\t\t\t]);\n\t\n\t\t\t\t\tarea = new maps.Polygon({\n\t\t\t\t\tpaths: polyGon,\n\t\t\t\t\tstrokeColor: \"#FF0000\",\n\t\t\t\t\tstrokeOpacity: 0.8,\n\t\t\t\t\tstrokeWeight: 2,\n\t\t\t\t\tfillColor: \"#FF0000\",\n\t\t\t\t\tfillOpacity: 0.35,\n\t\t\t\t\t});\n\t\t\t\t\tif(props.getStations === false) { \n\t\t\t\t\t\t\n\t\t\t\t\t\tareas.setMap(null);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarea.setMap(map);\n\t\t\t\t\t\tarrayOfAreas.push(area)\n\t\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\n\t\t\t\n\t\n}\n\nexport default handleApiLoaded;\n\n\n\n//  fungerar som REACt component till kartan\n\n// import React from \"react\";\n\n// const PopUp = ({ text, tooltip, store }) => (\n//   <div className=\"circle\">\n//     <span className=\"circleText\" title={tooltip}>\n//       {text, store}\n//     </span>\n//   </div>\n// );\n\n// export default PopUp;\n\n"]},"metadata":{},"sourceType":"module"}