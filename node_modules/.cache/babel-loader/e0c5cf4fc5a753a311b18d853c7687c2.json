{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showLoadCitys: false,\n  city: []\n};\n\nconst useLoadCitysToMap = (mapRef, props, changePopUpInfo) => {\n  _s();\n\n  const [cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n  // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n\n  const [resFromApi, setResFromApi] = useState(null);\n  const [errorForCity, setErrorForCity] = useState();\n  console.log(props);\n\n  const handleSucces = res => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.map(city => {\n      cityname = city.city;\n      let polyGon = [city.position.polygonePart1, city.position.polygonePart2, city.position.polygonePart3, city.position.polygonePart4];\n      cityname = new maps.Polygon({\n        paths: polyGon,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.9,\n        strokeWeight: 2,\n        fillColor: \"transparent\",\n        fillOpacity: 0.35\n      });\n      cityname.addListener('click', event => {\n        setCityContent(prevState => ({\n          showLoadCitys: !prevState.showLoadCitys,\n          city\n        }));\n      });\n      cityname.setMap(map);\n      setcityObject(oldArray => [...oldArray, cityname]);\n    });\n  };\n\n  const showPopUpForCity = () => {\n    setCityContent(prevState => ({\n      showLoadCitys: !prevState.showLoadCitys,\n      city\n    }));\n  };\n\n  const handleError = error => {\n    setErrorForCity(error.message);\n  }; // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n  // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\n\n  function removeCitysFromMap() {\n    if (cityObject !== null) {\n      cityObject.map(city => {\n        city.setMap(null);\n      });\n    }\n\n    return;\n  }\n\n  useEffect(async () => {\n    // Om loadStations ska tas bort från kartan\n    if (props.ifToShowCity.loadCity === false) {\n      removeCitysFromMap(mapRef);\n      return;\n    } // Om state är null == ej hämtat från backend ännu\n\n\n    if (resFromApi === null) {\n      let res = await Api.getAllCitys();\n      setResFromApi(res);\n      handleSucces(res); // Annars använd det som är sparat i state\n    } else if (resFromApi != null) {\n      handleSucces(resFromApi);\n    } else {\n      handleError(\"Error\");\n      return;\n    }\n  }, [mapRef, props.ifToShowCity.loadCity]);\n  return {\n    cityContent,\n    errorForCity,\n    showPopUpForCity\n  };\n};\n\n_s(useLoadCitysToMap, \"myIijyfZFUnxZ7HiAHTqOzEsif0=\");\n\nexport default useLoadCitysToMap;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadCitysToMap.js"],"names":["useState","useEffect","Api","initalValue","showLoadCitys","city","useLoadCitysToMap","mapRef","props","changePopUpInfo","cityObject","setcityObject","cityContent","setCityContent","resFromApi","setResFromApi","errorForCity","setErrorForCity","console","log","handleSucces","res","cityname","map","current","maps","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","prevState","setMap","oldArray","showPopUpForCity","handleError","error","message","removeCitysFromMap","ifToShowCity","loadCity","getAllCitys"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowLoadCitys: false,\n\tcity: []\n}\n\nconst useLoadCitysToMap = (mapRef, props, changePopUpInfo) => {\n    const[cityObject, setcityObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[cityContent, setCityContent] = useState(initalValue); // håller content för onClick\n    // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n    const[resFromApi, setResFromApi] = useState(null); \n    const [errorForCity, setErrorForCity] = useState();\n    console.log(props)\n    \n    const handleSucces = (res) => {\n    var cityname;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.map(city => {\n\n        cityname = city.city\n        let polyGon = \n            ([city.position.polygonePart1,\n                city.position.polygonePart2,\n                city.position.polygonePart3,\n                city.position.polygonePart4\n            ]);\n        cityname = new maps.Polygon({\n            paths: polyGon,\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.9,\n            strokeWeight: 2,\n            fillColor: \"transparent\",\n            fillOpacity: 0.35,\n            });\n        \n        cityname.addListener('click', (event) => {\n\n            setCityContent(prevState => ({\n                showLoadCitys: !prevState.showLoadCitys,\n                city\n            }));\n        });\n\n        cityname.setMap(map);\n        setcityObject(oldArray => [...oldArray, cityname]);\n\n        })\n    };\n\n    const showPopUpForCity = () => {\n        setCityContent(prevState => ({\n            showLoadCitys: !prevState.showLoadCitys,\n            city\n        }));\n\t}\n\n    const handleError = (error) => {\n        setErrorForCity(error.message);\n    };\n\n    // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n    // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\tfunction removeCitysFromMap() { \n\t\tif (cityObject !== null) {\n\t\t\tcityObject.map(city => {\n\t\t\t\tcity.setMap(null);\n\t\t\t})\n\t\t}\n        return\n\t}\n\n    useEffect(async () => {\n        // Om loadStations ska tas bort från kartan\n        if (props.ifToShowCity.loadCity === false ) {\n            removeCitysFromMap(mapRef)\n            return\n        }\n        // Om state är null == ej hämtat från backend ännu\n        if (resFromApi === null) {\n            let res = await Api.getAllCitys();\n            setResFromApi(res);\n            handleSucces(res)\n        // Annars använd det som är sparat i state\n        } else if (resFromApi != null) {\n            handleSucces(resFromApi);\n        } else {\n            handleError(\"Error\")\n            return;\n        }\n    },[mapRef, props.ifToShowCity.loadCity])\n    \n    return {cityContent, errorForCity, showPopUpForCity};\n};\nexport default useLoadCitysToMap;\n\n"]},"metadata":{},"sourceType":"module"}