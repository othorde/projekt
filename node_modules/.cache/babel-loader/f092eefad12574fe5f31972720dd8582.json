{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nlet initalValue = {\n  showLoadStations: false,\n  loadStationName: []\n};\n\nconst useLoadStationToMap = (mapRef, props) => {\n  _s();\n\n  const [loadStationObject, setLoadStationObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n\n  const [loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n  // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n\n  const [resFromApi, setResFromApi] = useState(null);\n  const [error1, setError1] = useState();\n\n  const handleSucces = res => {\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n    res.map(cityCoords => {\n      cityCoords.charging_posts.map(loadStations => {\n        let polyGon = [cityCoords.position.polygonePart1, cityCoords.position.polygonePart2, cityCoords.position.polygonePart3, cityCoords.position.polygonePart4];\n        loadStationName = new maps.Polygon({\n          paths: polyGon,\n          strokeColor: \"yellow\",\n          strokeOpacity: 0.9,\n          strokeWeight: 2,\n          fillColor: \"transparent\",\n          fillOpacity: 0.35\n        });\n        loadStationName.addListener('click', event => {\n          setLoadStationContent(prevState => ({\n            showLoadStations: !prevState.showLoadStations,\n            loadStations\n          }));\n        });\n        loadStationName.setMap(map);\n        setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n      });\n    });\n  }; // funktion som kan toggla state, från andra komponenter\n\n\n  const showInfoForLoadStation = trueOrFalse => {\n    setLoadStationContent(prevState => ({\n      showLoadStations: !prevState.showLoadStations,\n      loadStations\n    }));\n  };\n\n  const handleError = error => {\n    setError1(error.message);\n  }; // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n  // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\n\n  function removeLoadingStationsFromMap() {\n    if (loadStationObject !== null) {\n      loadStationObject.map(loadStation => {\n        loadStation.setMap(null);\n      });\n    }\n\n    return;\n  }\n\n  useEffect(async () => {\n    // Om loadStations ska tas bort från kartan\n    if (props.ifToShowLoadStations.loadStation === false) {\n      removeLoadingStationsFromMap(mapRef);\n      return;\n    } // Om state är null == ej hämtat från backend ännu\n\n\n    if (resFromApi === null) {\n      let res = await Api.getAllCitys();\n      setResFromApi(res);\n      handleSucces(res); // Annars använd det som är sparat i state\n    } else if (resFromApi != null) {\n      handleSucces(resFromApi);\n    } else {\n      handleError(\"Error\");\n      return;\n    } // geolocation.getCurrentPosition(handleSucces, handleError, options)\n\n  }, [mapRef, props.ifToShowLoadStations.loadStation]);\n  return {\n    loadStationObject,\n    loadStationContent,\n    error1,\n    showInfoForLoadStation\n  };\n};\n\n_s(useLoadStationToMap, \"tHNgwmDH1OyJYMbhvKssuWc7S30=\");\n\nexport default useLoadStationToMap;","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/loadStationsToMap.js"],"names":["useState","useEffect","Api","initalValue","showLoadStations","loadStationName","useLoadStationToMap","mapRef","props","loadStationObject","setLoadStationObject","loadStationContent","setLoadStationContent","resFromApi","setResFromApi","error1","setError1","handleSucces","res","map","current","maps","cityCoords","charging_posts","loadStations","polyGon","position","polygonePart1","polygonePart2","polygonePart3","polygonePart4","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","addListener","event","prevState","setMap","oldArray","showInfoForLoadStation","trueOrFalse","handleError","error","message","removeLoadingStationsFromMap","loadStation","ifToShowLoadStations","getAllCitys"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\nimport Api from '../api';\n\nlet initalValue = {\n\tshowLoadStations: false,\n\tloadStationName: []\n}\n\nconst useLoadStationToMap = (mapRef, props) => {\n    const[loadStationObject, setLoadStationObject] = useState([]); // håller objektet så att man kan ta bort det från kartan\n    const[loadStationContent, setLoadStationContent] = useState(initalValue); // håller content för onClick\n    // sparar res i state, så slipper hämta från servern hela tiden. Kanske ändra om vi ska köra nån realtime\n    const[resFromApi, setResFromApi] = useState(null); \n    const [error1, setError1] = useState();\n    const handleSucces = (res) => {\n    var loadStationName;\n    const map = mapRef.current.map;\n    const maps = mapRef.current.maps;\n\n    res.map(cityCoords => {\n        cityCoords.charging_posts.map(loadStations => {         \n            let polyGon = \n                ([cityCoords.position.polygonePart1,\n                    cityCoords.position.polygonePart2,\n                    cityCoords.position.polygonePart3,\n                    cityCoords.position.polygonePart4\n                ]);\n            loadStationName = new maps.Polygon({\n                paths: polyGon,\n                strokeColor: \"yellow\",\n                strokeOpacity: 0.9,\n                strokeWeight: 2,\n                fillColor: \"transparent\",\n                fillOpacity: 0.35,\n                });\n            \n            loadStationName.addListener('click', (event) => {\n                setLoadStationContent(prevState => ({\n                    showLoadStations: !prevState.showLoadStations,\n                    loadStations\n                }));\n            });\n        loadStationName.setMap(map);\n        setLoadStationObject(oldArray => [...oldArray, loadStationName]);\n        })\n    })\n};\n\n    // funktion som kan toggla state, från andra komponenter\n    const showInfoForLoadStation = (trueOrFalse) => {\n        setLoadStationContent(prevState => ({\n            showLoadStations: !prevState.showLoadStations,\n            loadStations\n        }));\n\t}\n\n    const handleError = (error) => {\n        setError1(error.message);\n    };\n\n    // tar bort loadinstations från kartan, Ska man rensa i states? Isf kommer backend att kallas.\n    // Kommer behövas om man ska få realtiduppdateringar, typ timer\n\tfunction removeLoadingStationsFromMap() { \n\t\tif (loadStationObject !== null) {\n\t\t\tloadStationObject.map(loadStation => {\n\t\t\t\tloadStation.setMap(null);\n\t\t\t})\n\t\t}\n        return\n\t}\n\n    useEffect(async () => {\n        // Om loadStations ska tas bort från kartan\n        if (props.ifToShowLoadStations.loadStation === false ) {\n            removeLoadingStationsFromMap(mapRef)\n            return\n        }\n        // Om state är null == ej hämtat från backend ännu\n        if (resFromApi === null) {\n            let res = await Api.getAllCitys();\n            setResFromApi(res);\n            handleSucces(res)\n        // Annars använd det som är sparat i state\n        } else if (resFromApi != null) {\n            handleSucces(resFromApi);\n        } else {\n            handleError(\"Error\")\n            return;\n        }\n        // geolocation.getCurrentPosition(handleSucces, handleError, options)\n    },[mapRef, props.ifToShowLoadStations.loadStation])\n    \n    return {loadStationObject, loadStationContent, error1, showInfoForLoadStation};\n};\nexport default useLoadStationToMap;\n\n"]},"metadata":{},"sourceType":"module"}