{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Api from '../api';\nexport const useFetchACity = whatcity => {\n  _s();\n\n  const [city, setCity] = useState();\n  const [loadingCity, setLoadingCity] = useState();\n  const [messageCity, setMessageCity] = useState();\n  const [charging_posts, setCharging_posts] = useState([]);\n  const [allParkingZones, setAllParkingZones] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      setLoadingCity(true);\n      const allCity = await Api.getACity();\n\n      if (allCity.length > 0) {\n        setCity(allCity[0].city);\n        setCharging_posts(allCity[0].charging_posts);\n        setAllParkingZones(allCity[0].parking_zones);\n      } else {\n        setMessageCity(\"Städerna kunde ej läsas in\");\n      }\n    } catch (error) {\n      setMessageCity(\"Något gick fel med hämtningen från servern\");\n    }\n\n    setLoadingCity(false);\n  };\n  /* Kör funktionen  */\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    city,\n    charging_posts,\n    allParkingZones,\n    loadingCity,\n    messageCity\n  };\n}; // /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n// }, [user, state, loading, error, message])\n\n_s(useFetchACity, \"qhd4531lheh5NmE8xzsIKcWOuKU=\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/Hooks/useFetchACity.js"],"names":["useState","useEffect","Api","useFetchACity","whatcity","city","setCity","loadingCity","setLoadingCity","messageCity","setMessageCity","charging_posts","setCharging_posts","allParkingZones","setAllParkingZones","fetchData","allCity","getACity","length","parking_zones","error"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAGA,OAAO,MAAMC,aAAa,GAAIC,QAAD,IAAc;AAAA;;AAE1C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,EAA9C;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AACG,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;;AAEH,QAAMe,SAAS,GAAG,YAAY;AACvB,QAAI;AACAP,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA,YAAMQ,OAAO,GAAG,MAAMd,GAAG,CAACe,QAAJ,EAAtB;;AAEA,UAAGD,OAAO,CAACE,MAAR,GAAiB,CAApB,EAAuB;AACnBZ,QAAAA,OAAO,CAACU,OAAO,CAAC,CAAD,CAAP,CAAWX,IAAZ,CAAP;AACAO,QAAAA,iBAAiB,CAACI,OAAO,CAAC,CAAD,CAAP,CAAWL,cAAZ,CAAjB;AACAG,QAAAA,kBAAkB,CAACE,OAAO,CAAC,CAAD,CAAP,CAAWG,aAAZ,CAAlB;AACH,OAJD,MAIO;AACHT,QAAAA,cAAc,CAAC,4BAAD,CAAd;AACH;AAEJ,KAZD,CAYE,OAAOU,KAAP,EAAc;AACZV,MAAAA,cAAc,CAAC,4CAAD,CAAd;AACH;;AACDF,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAjBJ;AAmBA;;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACV,IAAAA,IAAD;AAAOM,IAAAA,cAAP;AAAuBE,IAAAA,eAAvB;AAAwCN,IAAAA,WAAxC;AAAqDE,IAAAA;AAArD,GAAP;AACA,CAjCM,C,CA0CP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;GAvDaN,a","sourcesContent":["import {useState, useEffect } from 'react'\nimport Api from '../api';\n\n\nexport const useFetchACity = (whatcity) => {\n\n\tconst [city, setCity] = useState();\n\tconst [loadingCity, setLoadingCity] = useState();\n\tconst [messageCity, setMessageCity] = useState();\n    const [charging_posts, setCharging_posts] = useState([])\n    const [allParkingZones, setAllParkingZones] = useState([])\n\n\tconst fetchData = async () => {\n        try {\n            setLoadingCity(true)\n            const allCity = await Api.getACity()\n\n            if(allCity.length > 0) {\n                setCity(allCity[0].city);\n                setCharging_posts(allCity[0].charging_posts);\n                setAllParkingZones(allCity[0].parking_zones);\n            } else {\n                setMessageCity(\"Städerna kunde ej läsas in\")\n            }\n            \n        } catch (error) {\n            setMessageCity(\"Något gick fel med hämtningen från servern\")\n        }\n        setLoadingCity(false)\n    }\n    \n\t/* Kör funktionen  */\n\tuseEffect(() => {\n\t\tfetchData()\n\t}, [])\n\n\treturn {city, charging_posts, allParkingZones, loadingCity, messageCity}\n}\n\n\n\n\n\n\n\n\n// /* Hämtar städer */\n// useEffect(() => {\n// \tconst getAllCities = async () => {\n\n// \tlet allCities = await Api.getAllCitys();\n// \tallCities.forEach(element => {\n// \t\tsetAllCharging_posts(element.charging_posts)\n// \t\tsetAllParkingZones(element.parking_zones)\n// \t\t});\n// \t}\n// \tgetAllCities()\n// \tcheckAllUsersTrips()\n\n// }, [user, state, loading, error, message])"]},"metadata":{},"sourceType":"module"}