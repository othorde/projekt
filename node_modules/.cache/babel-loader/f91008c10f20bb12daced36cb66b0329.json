{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Invoice\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef } from \"react\"; //components\n\nimport Api from '../../api'; //styles & img\n\nimport { Container } from './Form.styles'; //other\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar pointInPolygon = require('point-in-polygon');\n\nexport default function Invoice(props) {\n  _s();\n\n  //hooks\n  // måste ha resan och koordinaterna\n  // måste senare räkna ut var koordinaterna ligger och jmföra\n  const [allCharging_posts, setAllCharging_posts] = useState([]); //parkering och laddstationer\n\n  const [allParkingZones, setAllParkingZones] = useState([]);\n  /* Sparara alla ladda och parkeringszoner i state */\n\n  async function getAllCities() {\n    let allCities = await Api.getAllCitys();\n    allCities.forEach(element => {\n      setAllCharging_posts(element.charging_posts);\n      setAllParkingZones(element.parking_zones);\n    });\n  }\n\n  function checkWhereCustomerEndedTrip() {\n    console.log(\"ÄHR\");\n\n    if (props && props.props) {\n      var tripEnded = props.props.stop.position;\n      allParkingZones.forEach(element => {\n        console.log(element, \"här\");\n      });\n      console.log(tripStarted, tripEnded);\n    }\n  }\n\n  function checkIfPointInPolyGon(polygone, point) {\n    pointInPolygon(point, polygone);\n  }\n\n  async function calculateCost() {\n    getAllCities();\n    checkWhereCustomerEndedTrip();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: calculateCost,\n    children: \"Faktura\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Invoice, \"q3+RyYprMzQhCQYoRDV4aAM7/mg=\");\n\n_c = Invoice;\n\nvar _c;\n\n$RefreshReg$(_c, \"Invoice\");","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Invoice/index.js"],"names":["React","useEffect","useState","useRef","Api","Container","pointInPolygon","require","Invoice","props","allCharging_posts","setAllCharging_posts","allParkingZones","setAllParkingZones","getAllCities","allCities","getAllCitys","forEach","element","charging_posts","parking_zones","checkWhereCustomerEndedTrip","console","log","tripEnded","stop","position","tripStarted","checkIfPointInPolyGon","polygone","point","calculateCost"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAkD,OAAlD,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,WAAhB,C,CACA;;AACA,SAAQC,SAAR,QAAwB,eAAxB,C,CACA;;;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtC;AACG;AACA;AAEA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,CAAC,EAAD,CAA1D,CALmC,CAK4B;;AAC/D,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AAEA;;AACA,iBAAeY,YAAf,GAA8B;AAC1B,QAAIC,SAAS,GAAG,MAAMX,GAAG,CAACY,WAAJ,EAAtB;AACAD,IAAAA,SAAS,CAACE,OAAV,CAAkBC,OAAO,IAAI;AACzBP,MAAAA,oBAAoB,CAACO,OAAO,CAACC,cAAT,CAApB;AACAN,MAAAA,kBAAkB,CAACK,OAAO,CAACE,aAAT,CAAlB;AACH,KAHD;AAKH;;AAGD,WAASC,2BAAT,GAAuC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;;AACA,QAAGd,KAAK,IAAIA,KAAK,CAACA,KAAlB,EAAyB;AACrB,UAAIe,SAAS,GAAGf,KAAK,CAACA,KAAN,CAAYgB,IAAZ,CAAiBC,QAAjC;AAEAd,MAAAA,eAAe,CAACK,OAAhB,CAAwBC,OAAO,IAAI;AAChCI,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqB,KAArB;AACF,OAFD;AAKAI,MAAAA,OAAO,CAACC,GAAR,CAAYI,WAAZ,EAAyBH,SAAzB;AACH;AAEJ;;AAGD,WAASI,qBAAT,CAA+BC,QAA/B,EAAyCC,KAAzC,EAAgD;AAC5CxB,IAAAA,cAAc,CAACwB,KAAD,EAAQD,QAAR,CAAd;AACH;;AAKD,iBAAeE,aAAf,GAA+B;AAC3BjB,IAAAA,YAAY;AAEZO,IAAAA,2BAA2B;AAE9B;;AAEJ,sBACO;AAAQ,IAAA,OAAO,EAAEU,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADP;AAGA;;GApDuBvB,O;;KAAAA,O","sourcesContent":["import {React, useEffect, useState, useRef } from \"react\";\n\n//components\nimport Api from '../../api'\n//styles & img\nimport {Container} from './Form.styles'\n//other\nvar pointInPolygon = require('point-in-polygon');\n\nexport default function Invoice(props) {\n\t//hooks\n    // måste ha resan och koordinaterna\n    // måste senare räkna ut var koordinaterna ligger och jmföra\n\n    const [allCharging_posts, setAllCharging_posts] = useState([]) //parkering och laddstationer\n    const [allParkingZones, setAllParkingZones] = useState([])\n\n    /* Sparara alla ladda och parkeringszoner i state */\n    async function getAllCities() {\n        let allCities = await Api.getAllCitys();\n        allCities.forEach(element => {\n            setAllCharging_posts(element.charging_posts)\n            setAllParkingZones(element.parking_zones)\n        });\n        \n    }\n\n\n    function checkWhereCustomerEndedTrip() {\n        console.log(\"ÄHR\")\n        if(props && props.props) {\n            var tripEnded = props.props.stop.position;\n\n            allParkingZones.forEach(element => {\n               console.log(element, \"här\")\n            });\n            \n\n            console.log(tripStarted, tripEnded)\n        }\n       \n    }\n\n\n    function checkIfPointInPolyGon(polygone, point) {\n        pointInPolygon(point, polygone);\n    }\n\n\n\n\n    async function calculateCost() {\n        getAllCities()\n\n        checkWhereCustomerEndedTrip()\n\n    }\n\n\treturn (\n        <button onClick={calculateCost}>Faktura</button>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}