{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Othor\\\\dbwebb-kurser\\\\frontendphp\\\\webbclient\\\\src\\\\components\\\\Oauth\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { RequestAuthorizationCode } from \"react-oauth2-auth-code-flow\";\nimport ClientOAuth2 from \"client-oauth2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oauthClient = new ClientOAuth2({\n  clientId: process.env.CLIENT_ID,\n  clientSecret: process.env.CLIENT_SECRET,\n  accessTokenUri: `${apiRoot}/oauth/token/`,\n  authorizationUri: \"https://www.dropbox.com/oauth2/authorize\",\n  redirectUri: \"https://www.yourapp.com/auth/dropbox\",\n  scopes: [\"read\"]\n});\nexport default class SendToDropbox extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(RequestAuthorizationCode, {\n      oauthClient: oauthClient,\n      state: {\n        from: \"/settings\"\n      },\n      render: _ref => {\n        let {\n          url\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          children: \"Connect to Dropbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 30\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n\n} // import React, {useState, useContext } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { RequestAuthorizationCode } from \"react-oauth2-auth-code-flow\";\n// import ClientOAuth2 from \"client-oauth2\";\n// import { AuthorizationCodeCallback  } from \"react-oauth2-auth-code-flow\";\n// //styles\n// import { Wrapper, Content, SignIn, Delimiter, ScooterImg } from './Form.styles.js'\n// import scooterPic from '../../images/scooter.png'\n// //other\n// import AppContext from '../../AppContext';\n// import Api from \"../../api.js\";\n// require('dotenv').config()\n// const oauthClient = new ClientOAuth2({\n//     clientId: process.env.GITHUB_CLIENT_ID,\n//     clientSecret: process.env.GITHUB_CLIENT_SECRET,\n//     accessTokenUri: `https://github.com/login/oauth/access_token`, /* måste va rätt */\n//     authorizationUri: \"https://github.com/login/oauth/authorize\", /* måste ocksåva rätt */\n//     redirectUri: \"http://localhost:3000/login/home\",\n//     scopes: [\"identity\"],\n// });\n// const Oauth = () => {\n//     console.log(\"HEJ\")\n//     const handleSubmit2 = async (event)  => {\n//         // kontrollera inlogg, kolla med servern om användaruppg är ok\n//         // nu sparar jag lösen som vnaligt lösen, fixa\n//         let res = oauthClient;\n//         console.log(res)\n//         // localStorage.setItem('user', JSON.stringify(inputs));\n//         // myContext.toggleAuth(true);\n//         // navigate(\"/home\")\n//         event.preventDefault();\n//     }\n//     handleSuccess = async (accessToken, { response, state }) => {\n//           console.log(\"Successfully authorized\");\n//           await setProfileFromDropbox(accessToken);\n//           await redirect(state.from);\n//         };\n//     handleError = (error) => {\n//           console.error(\"An error occurred\");\n//           console.error(error.message);\n//         };\n//     return (\n//         <Wrapper>\n//         <AuthorizationCodeCallback\n//             oauthClient={oauthClient}\n//             onAuthSuccess={handleSuccess()}\n//             onAuthError={handleError()}\n//             render={({ processing, state, error }) => (\n//                 <div>\n//                 {processing && <p>Authorizing now...</p>}\n//                 {error && (\n//                     <p className=\"error\">An error occurred: {error.message}</p>\n//                 )}\n//                 </div>\n//             )}\n//         />\n//         </Wrapper>\n//       );\n// }\n// export default Oauth","map":{"version":3,"sources":["C:/Users/Othor/dbwebb-kurser/frontendphp/webbclient/src/components/Oauth/index.js"],"names":["React","Component","RequestAuthorizationCode","ClientOAuth2","oauthClient","clientId","process","env","CLIENT_ID","clientSecret","CLIENT_SECRET","accessTokenUri","apiRoot","authorizationUri","redirectUri","scopes","SendToDropbox","render","from","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,WAAW,GAAG,IAAID,YAAJ,CAAiB;AACnCE,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADa;AAEnCC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFS;AAGnCC,EAAAA,cAAc,EAAG,GAAEC,OAAQ,eAHQ;AAInCC,EAAAA,gBAAgB,EAAE,0CAJiB;AAKnCC,EAAAA,WAAW,EAAE,sCALsB;AAMnCC,EAAAA,MAAM,EAAE,CAAC,MAAD;AAN2B,CAAjB,CAApB;AASA,eAAe,MAAMC,aAAN,SAA4Bf,SAA5B,CAAsC;AACnDgB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,wBAAD;AACE,MAAA,WAAW,EAAEb,WADf;AAEE,MAAA,KAAK,EAAE;AAAEc,QAAAA,IAAI,EAAE;AAAR,OAFT;AAGE,MAAA,MAAM,EAAE;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,4BAAa;AAAG,UAAA,IAAI,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAb;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AATkD,C,CAmBrD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from \"react\";\nimport { RequestAuthorizationCode } from \"react-oauth2-auth-code-flow\";\nimport ClientOAuth2 from \"client-oauth2\";\n\nconst oauthClient = new ClientOAuth2({\n  clientId: process.env.CLIENT_ID,\n  clientSecret: process.env.CLIENT_SECRET,\n  accessTokenUri: `${apiRoot}/oauth/token/`,\n  authorizationUri: \"https://www.dropbox.com/oauth2/authorize\",\n  redirectUri: \"https://www.yourapp.com/auth/dropbox\",\n  scopes: [\"read\"],\n});\n\nexport default class SendToDropbox extends Component {\n  render() {\n    return (\n      <RequestAuthorizationCode\n        oauthClient={oauthClient}\n        state={{ from: \"/settings\" }}\n        render={({ url }) => <a href={url}>Connect to Dropbox</a>}\n      />\n    );\n  }\n}\n\n\n\n\n\n\n\n\n// import React, {useState, useContext } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { RequestAuthorizationCode } from \"react-oauth2-auth-code-flow\";\n// import ClientOAuth2 from \"client-oauth2\";\n// import { AuthorizationCodeCallback  } from \"react-oauth2-auth-code-flow\";\n\n// //styles\n// import { Wrapper, Content, SignIn, Delimiter, ScooterImg } from './Form.styles.js'\n// import scooterPic from '../../images/scooter.png'\n\n// //other\n// import AppContext from '../../AppContext';\n// import Api from \"../../api.js\";\n// require('dotenv').config()\n\n\n// const oauthClient = new ClientOAuth2({\n//     clientId: process.env.GITHUB_CLIENT_ID,\n//     clientSecret: process.env.GITHUB_CLIENT_SECRET,\n//     accessTokenUri: `https://github.com/login/oauth/access_token`, /* måste va rätt */\n//     authorizationUri: \"https://github.com/login/oauth/authorize\", /* måste ocksåva rätt */\n//     redirectUri: \"http://localhost:3000/login/home\",\n//     scopes: [\"identity\"],\n// });\n\n\n// const Oauth = () => {\n//     console.log(\"HEJ\")\n\n\n  \n//     const handleSubmit2 = async (event)  => {\n//         // kontrollera inlogg, kolla med servern om användaruppg är ok\n//         // nu sparar jag lösen som vnaligt lösen, fixa\n        \n\n//         let res = oauthClient;\n//         console.log(res)\n//         // localStorage.setItem('user', JSON.stringify(inputs));\n//         // myContext.toggleAuth(true);\n//         // navigate(\"/home\")\n//         event.preventDefault();\n//     }\n\n\n    \n//     handleSuccess = async (accessToken, { response, state }) => {\n//           console.log(\"Successfully authorized\");\n//           await setProfileFromDropbox(accessToken);\n//           await redirect(state.from);\n//         };\n      \n//     handleError = (error) => {\n//           console.error(\"An error occurred\");\n//           console.error(error.message);\n//         };\n\n//     return (\n//         <Wrapper>\n//         <AuthorizationCodeCallback\n//             oauthClient={oauthClient}\n//             onAuthSuccess={handleSuccess()}\n//             onAuthError={handleError()}\n//             render={({ processing, state, error }) => (\n//                 <div>\n//                 {processing && <p>Authorizing now...</p>}\n//                 {error && (\n//                     <p className=\"error\">An error occurred: {error.message}</p>\n//                 )}\n//                 </div>\n//             )}\n//         />\n//         </Wrapper>\n//       );\n// }\n\n// export default Oauth\n"]},"metadata":{},"sourceType":"module"}